; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24210.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
EXTRN	_invalid_parameter_noinfo_noreturn:PROC
EXTRN	__std_terminate:PROC
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??3@YAXPEAX@Z:PROC				; operator delete
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPEBD@Z:PROC		; std::_Xout_of_range
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	memmove:PROC
EXTRN	__security_check_cookie:PROC
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
$SG4294967199 DB 'test', 00H
	ORG $+3
$SG4294967198 DB 'hello', 00H
	ORG $+2
$SG4294967197 DB 'how', 00H
	ORG $+4
$SG4294967196 DB 'alistair', 00H
CONST	ENDS
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??$_Copy_memmove@PEAURow@@PEAU1@@std@@YAPEAURow@@PEAU1@00@Z ; std::_Copy_memmove<Row * __ptr64,Row * __ptr64>
PUBLIC	??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Uninitialized_move_al_unchecked1@URow@@U1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked1<Row,Row,std::allocator<Row> >
PUBLIC	??$_Ptr_move_cat@URow@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAURow@@0@Z ; std::_Ptr_move_cat<Row,Row>
PUBLIC	??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Rechecked@PEAURow@@PEAU1@@std@@YAAEAPEAURow@@AEAPEAU1@PEAU1@@Z ; std::_Rechecked<Row * __ptr64,Row * __ptr64>
PUBLIC	??$_Uninitialized_move_al_unchecked@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z ; std::_Uninitialized_move_al_unchecked<Row * __ptr64,Row * __ptr64,std::allocator<Row> >
PUBLIC	??$_Unchecked@PEAURow@@@std@@YAPEAURow@@PEAU1@@Z ; std::_Unchecked<Row * __ptr64>
PUBLIC	??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PEAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z ; std::allocator<char>::construct<char * __ptr64,char * __ptr64 & __ptr64>
PUBLIC	??$destroy@PEAD@?$allocator@D@std@@QEAAXPEAPEAD@Z ; std::allocator<char>::destroy<char * __ptr64>
PUBLIC	??$construct@URow@@AEBU1@@?$allocator@URow@@@std@@QEAAXPEAURow@@AEBU2@@Z ; std::allocator<Row>::construct<Row,Row const & __ptr64>
PUBLIC	??$construct@URow@@AEAU1@@?$allocator@URow@@@std@@QEAAXPEAURow@@AEAU2@@Z ; std::allocator<Row>::construct<Row,Row & __ptr64>
PUBLIC	??$_Destroy_range1@V?$allocator@URow@@@std@@PEAURow@@@std@@YAXPEAURow@@0AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<Row>,Row * __ptr64>
PUBLIC	??$_Uninitialized_move@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z ; std::_Uninitialized_move<Row * __ptr64,Row * __ptr64,std::allocator<Row> >
PUBLIC	??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * __ptr64>
PUBLIC	??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>
PUBLIC	??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z	; std::forward<char * __ptr64 & __ptr64>
PUBLIC	??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char * __ptr64>
PUBLIC	??$construct@URow@@AEBU1@@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SAXAEAV?$allocator@URow@@@1@PEAURow@@AEBU3@@Z ; std::allocator_traits<std::allocator<Row> >::construct<Row,Row const & __ptr64>
PUBLIC	??$forward@AEBURow@@@std@@YAAEBURow@@AEBU1@@Z	; std::forward<Row const & __ptr64>
PUBLIC	??$construct@URow@@AEAU1@@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SAXAEAV?$allocator@URow@@@1@PEAURow@@AEAU3@@Z ; std::allocator_traits<std::allocator<Row> >::construct<Row,Row & __ptr64>
PUBLIC	??$forward@AEAURow@@@std@@YAAEAURow@@AEAU1@@Z	; std::forward<Row & __ptr64>
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??0?$allocator@URow@@@std@@QEAA@XZ		; std::allocator<Row>::allocator<Row>
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAA@XZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<Row> >::_Wrap_alloc<std::allocator<Row> >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@URow@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<Row> >::_Vector_val<std::_Simple_types<Row> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Destroy_range@V?$allocator@URow@@@std@@PEAURow@@@std@@YAXPEAURow@@0AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<Row>,Row * __ptr64>
PUBLIC	??$_Umove@PEAURow@@@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAPEAURow@@PEAU2@00@Z ; std::vector<Row,std::allocator<Row> >::_Umove<Row * __ptr64>
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * __ptr64>
PUBLIC	??$addressof@$$CBD@std@@YAPEBDAEBD@Z		; std::addressof<char const >
PUBLIC	??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>
PUBLIC	??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char * __ptr64>
PUBLIC	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z	; std::addressof<char * __ptr64>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1><>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>
PUBLIC	??$construct@URow@@AEBU1@@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@AEBU2@@Z ; std::_Wrap_alloc<std::allocator<Row> >::construct<Row,Row const & __ptr64>
PUBLIC	??$construct@URow@@AEAU1@@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@AEAU2@@Z ; std::_Wrap_alloc<std::allocator<Row> >::construct<Row,Row & __ptr64>
PUBLIC	??$_Unfancy@URow@@@std@@YAPEAURow@@PEAU1@@Z	; std::_Unfancy<Row>
PUBLIC	??$addressof@$$CBURow@@@std@@YAPEBURow@@AEBU1@@Z ; std::addressof<Row const >
PUBLIC	?max_size@?$allocator@D@std@@QEBA_KXZ		; std::allocator<char>::max_size
PUBLIC	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z	; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	?max_size@?$allocator@URow@@@std@@QEBA_KXZ	; std::allocator<Row>::max_size
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	?allocate@?$allocator@URow@@@std@@QEAAPEAURow@@_K@Z ; std::allocator<Row>::allocate
PUBLIC	?max_size@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SA_KAEBV?$allocator@URow@@@2@@Z ; std::allocator_traits<std::allocator<Row> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?deallocate@?$allocator@URow@@@std@@QEAAXPEAURow@@_K@Z ; std::allocator<Row>::deallocate
PUBLIC	?capacity@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ ; std::vector<Row,std::allocator<Row> >::capacity
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Get_data
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myend
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAPEAURow@@_K@Z ; std::_Wrap_alloc<std::allocator<Row> >::allocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<Row> >::max_size
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_second
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
PUBLIC	?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAXAEBV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Unused_capacity@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ ; std::vector<Row,std::allocator<Row> >::_Unused_capacity
PUBLIC	?size@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ ; std::vector<Row,std::allocator<Row> >::size
PUBLIC	?max_size@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ ; std::vector<Row,std::allocator<Row> >::max_size
PUBLIC	?_Destroy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXPEAURow@@0@Z ; std::vector<Row,std::allocator<Row> >::_Destroy
PUBLIC	?_Grow_to@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBA_K_K@Z ; std::vector<Row,std::allocator<Row> >::_Grow_to
PUBLIC	?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z ; std::vector<Row,std::allocator<Row> >::_Reallocate
PUBLIC	?_Xlen@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBAXXZ ; std::vector<Row,std::allocator<Row> >::_Xlen
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Orphan_all
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Mylast
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@_K@Z ; std::_Wrap_alloc<std::allocator<Row> >::deallocate
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_first
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deallocate
PUBLIC	?pointer_to@?$pointer_traits@PEBD@std@@SAPEBDAEBD@Z ; std::pointer_traits<char const * __ptr64>::pointer_to
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
PUBLIC	?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEBDAEBD@Z ; std::_Wrap_alloc<std::allocator<char> >::address
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	?_Inside@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBA_NPEBURow@@@Z ; std::vector<Row,std::allocator<Row> >::_Inside
PUBLIC	?_Reserve@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z ; std::vector<Row,std::allocator<Row> >::_Reserve
PUBLIC	?_Tidy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXXZ ; std::vector<Row,std::allocator<Row> >::_Tidy
PUBLIC	?_Orphan_range@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBAXPEAURow@@0@Z ; std::vector<Row,std::allocator<Row> >::_Orphan_range
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAA@XZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Getal
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myend
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAA@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
PUBLIC	??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator!=
PUBLIC	??0?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAA@XZ ; std::vector<Row,std::allocator<Row> >::vector<Row,std::allocator<Row> >
PUBLIC	??1?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAA@XZ ; std::vector<Row,std::allocator<Row> >::~vector<Row,std::allocator<Row> >
PUBLIC	?push_back@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAAXAEBURow@@@Z ; std::vector<Row,std::allocator<Row> >::push_back
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	main
PUBLIC	?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; add_word
PUBLIC	?_Deallocate@std@@YAXPEAX_K1@Z			; std::_Deallocate
PUBLIC	?_Allocate@std@@YAPEAX_K0_N@Z			; std::_Allocate
PUBLIC	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z	; std::_Iterator_base0::_Adopt
PUBLIC	?_Orphan_all@_Container_base0@std@@QEAAXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?assign@?$char_traits@D@std@@SAXAEADAEBD@Z	; std::char_traits<char>::assign
PUBLIC	?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z	; std::char_traits<char>::move
PUBLIC	?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z	; std::char_traits<char>::copy
PUBLIC	?length@?$char_traits@D@std@@SA_KPEBD@Z		; std::char_traits<char>::length
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
EXTRN	_CxxThrowException:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	memcpy:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEAXI@Z DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAURow@@PEAU1@@std@@YAPEAURow@@PEAU1@00@Z DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$??$_Copy_memmove@PEAURow@@PEAU1@@std@@YAPEAURow@@PEAU1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move_al_unchecked1@URow@@U1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+48
	DD	imagerel $unwind$??$_Uninitialized_move_al_unchecked1@URow@@U1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move_al_unchecked@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z DD imagerel $LN10
	DD	imagerel $LN10+48
	DD	imagerel $unwind$??$_Uninitialized_move_al_unchecked@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z DD imagerel $LN20
	DD	imagerel $LN20+48
	DD	imagerel $unwind$??$_Uninitialized_move@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD imagerel $LN155
	DD	imagerel $LN155+14
	DD	imagerel $unwind$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD imagerel $LN155+14
	DD	imagerel $LN155+152
	DD	imagerel $chain$1$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD imagerel $LN155+152
	DD	imagerel $LN155+153
	DD	imagerel $chain$2$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD imagerel $LN155+153
	DD	imagerel $LN155+177
	DD	imagerel $chain$3$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Umove@PEAURow@@@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAPEAURow@@PEAU2@00@Z DD imagerel $LN28
	DD	imagerel $LN28+45
	DD	imagerel $unwind$??$_Umove@PEAURow@@@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAPEAURow@@PEAU2@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD imagerel $LN16
	DD	imagerel $LN16+83
	DD	imagerel $unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z DD imagerel $LN19
	DD	imagerel $LN19+83
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@URow@@@std@@QEAAPEAURow@@_K@Z DD imagerel $LN17
	DD	imagerel $LN17+111
	DD	imagerel $unwind$?allocate@?$allocator@URow@@@std@@QEAAPEAURow@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z DD imagerel $LN18
	DD	imagerel $LN18+81
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD imagerel $LN464
	DD	imagerel $LN464+389
	DD	imagerel $unwind$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA DD imagerel ?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
	DD	imagerel ?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+47
	DD	imagerel $unwind$?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$106@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA DD imagerel ?catch$106@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
	DD	imagerel ?catch$106@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+154
	DD	imagerel $unwind$?catch$106@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ DD imagerel $LN4
	DD	imagerel $LN4+17
	DD	imagerel $unwind$?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@URow@@@std@@QEAAXPEAURow@@_K@Z DD imagerel $LN19
	DD	imagerel $LN19+108
	DD	imagerel $unwind$?deallocate@?$allocator@URow@@@std@@QEAAXPEAURow@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAPEAURow@@_K@Z DD imagerel $LN20
	DD	imagerel $LN20+111
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAPEAURow@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z DD imagerel $LN19
	DD	imagerel $LN19+106
	DD	imagerel $unwind$?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z DD imagerel $LN39
	DD	imagerel $LN39+61
	DD	imagerel $unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z DD imagerel $LN94
	DD	imagerel $LN94+159
	DD	imagerel $unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z DD imagerel $LN91
	DD	imagerel $LN91+89
	DD	imagerel $unwind$?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ DD imagerel $LN4
	DD	imagerel $LN4+17
	DD	imagerel $unwind$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z DD imagerel $LN19
	DD	imagerel $LN19+28
	DD	imagerel $unwind$?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z DD imagerel $LN21
	DD	imagerel $LN21+81
	DD	imagerel $unwind$?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z DD imagerel $LN213
	DD	imagerel $LN213+127
	DD	imagerel $unwind$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z DD imagerel $LN213+127
	DD	imagerel $LN213+331
	DD	imagerel $chain$0$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z DD imagerel $LN213+331
	DD	imagerel $LN213+343
	DD	imagerel $chain$1$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z DD imagerel $LN213+343
	DD	imagerel $LN213+373
	DD	imagerel $chain$2$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBAXXZ DD imagerel $LN4
	DD	imagerel $LN4+17
	DD	imagerel $unwind$?_Xlen@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@_K@Z DD imagerel $LN22
	DD	imagerel $LN22+108
	DD	imagerel $unwind$?deallocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z DD imagerel $LN22
	DD	imagerel $LN22+106
	DD	imagerel $unwind$?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z DD imagerel $LN212
	DD	imagerel $LN212+300
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z DD imagerel $LN189
	DD	imagerel $LN189+304
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z DD imagerel $LN120
	DD	imagerel $LN120+170
	DD	imagerel $unwind$?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reserve@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z DD imagerel $LN136
	DD	imagerel $LN136+197
	DD	imagerel $unwind$?_Reserve@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXXZ DD imagerel $LN113
	DD	imagerel $LN113+167
	DD	imagerel $unwind$?_Tidy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXXZ DD imagerel $LN123
	DD	imagerel $LN123+153
	DD	imagerel $unwind$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z DD imagerel $LN131
	DD	imagerel $LN131+60
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN123
	DD	imagerel $LN123+129
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAAXAEBURow@@@Z DD imagerel $LN190
	DD	imagerel $LN190+163
	DD	imagerel $unwind$?push_back@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAAXAEBURow@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN1237
	DD	imagerel $LN1237+799
	DD	imagerel $unwind$main
$pdata$?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD imagerel $LN310
	DD	imagerel $LN310+95
	DD	imagerel $unwind$?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
$pdata$2$?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD imagerel $LN310+95
	DD	imagerel $LN310+573
	DD	imagerel $chain$2$?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
$pdata$3$?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD imagerel $LN310+573
	DD	imagerel $LN310+600
	DD	imagerel $chain$3$?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Deallocate@std@@YAXPEAX_K1@Z DD imagerel $LN16
	DD	imagerel $LN16+105
	DD	imagerel $unwind$?_Deallocate@std@@YAXPEAX_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@std@@YAPEAX_K0_N@Z DD imagerel $LN14
	DD	imagerel $LN14+108
	DD	imagerel $unwind$?_Allocate@std@@YAPEAX_K0_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z DD imagerel $LN7
	DD	imagerel $LN7+28
	DD	imagerel $unwind$?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@std@@YAPEAX_K0_N@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Deallocate@std@@YAXPEAX_K1@Z DD 010401H
	DD	04204H
	ORG $+7
$cppxdata$main DD 019930522H
	DD	06H
	DD	imagerel $stateUnwindMap$main
	DD	00H
	DD	00H
	DD	0dH
	DD	imagerel $ip2state$main
	DD	038H
	DD	00H
	DD	01H
CONST	ENDS
xdata	SEGMENT
$unwind$main DD	042a19H
	DD	012341cH
	DD	05002f20cH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$main
	DD	07aH
$stateUnwindMap$main DD 0ffffffffH
	DD	imagerel main$dtor$0
	DD	00H
	DD	imagerel main$dtor$1
	DD	01H
	DD	imagerel main$dtor$2
	DD	01H
	DD	imagerel main$dtor$3
	DD	01H
	DD	imagerel main$dtor$4
	DD	01H
	DD	imagerel main$dtor$5
$ip2state$main DD imagerel main
	DD	0ffffffffH
	DD	imagerel main+56
	DD	00H
	DD	imagerel main+65
	DD	01H
	DD	imagerel main+101
	DD	02H
	DD	imagerel main+115
	DD	01H
	DD	imagerel main+240
	DD	03H
	DD	imagerel main+254
	DD	01H
	DD	imagerel main+379
	DD	04H
	DD	imagerel main+393
	DD	01H
	DD	imagerel main+518
	DD	05H
	DD	imagerel main+532
	DD	01H
	DD	imagerel main+619
	DD	00H
	DD	imagerel main+768
	DD	0ffffffffH
$unwind$?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 051d19H
	DD	022010bH
	DD	050037004H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$chain$2$?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 062821H
	DD	0276428H
	DD	029f413H
	DD	028e408H
	DD	imagerel $LN310
	DD	imagerel $LN310+95
	DD	imagerel $unwind$?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
$chain$3$?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 021H
	DD	imagerel $LN310
	DD	imagerel $LN310+95
	DD	imagerel $unwind$?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAAXAEBURow@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reserve@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z DD 020021H
	DD	065400H
	DD	imagerel $LN213
	DD	imagerel $LN213+127
	DD	imagerel $unwind$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z DD 021H
	DD	imagerel $LN213
	DD	imagerel $LN213+127
	DD	imagerel $unwind$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z DD 020521H
	DD	065405H
	DD	imagerel $LN213
	DD	imagerel $LN213+127
	DD	imagerel $unwind$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z DD 081501H
	DD	097415H
	DD	086415H
	DD	073415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAPEAURow@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@URow@@@std@@QEAAXPEAURow@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$106@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA DD 030b19H
	DD	05007420bH
	DD	03006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD imagerel ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
	DD	0ffffffffH
	DD	imagerel ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z+110
	DD	00H
	DD	imagerel ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z+176
	DD	0ffffffffH
	DD	imagerel ?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
	DD	00H
	DD	imagerel ?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+13
	DD	01H
	DD	imagerel ?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+21
	DD	02H
	DD	imagerel ?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+33
	DD	00H
	DD	imagerel ?catch$106@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+14
	DD	03H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$1$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$106@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 00H
	DD	00H
	DD	03H
	DD	01H
	DD	imagerel $handlerMap$0$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	imagerel $handlerMap$1$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
	DD	02H
	DD	imagerel $tryMap$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
	DD	08H
	DD	imagerel $ip2state$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 052119H
	DD	0e0146218H
	DD	060117012H
	DD	03010H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@URow@@@std@@QEAAPEAURow@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Umove@PEAURow@@@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAPEAURow@@PEAU2@00@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD 040021H
	DD	076400H
	DD	063400H
	DD	imagerel $LN155
	DD	imagerel $LN155+14
	DD	imagerel $unwind$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD 021H
	DD	imagerel $LN155
	DD	imagerel $LN155+14
	DD	imagerel $unwind$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD 040d21H
	DD	07640dH
	DD	063405H
	DD	imagerel $LN155
	DD	imagerel $LN155+14
	DD	imagerel $unwind$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move_al_unchecked@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move_al_unchecked1@URow@@U1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAURow@@PEAU1@@std@@YAPEAURow@@PEAU1@00@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$dead$ = 8
_Where$ = 16
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 88   :         (void)_Size;
; 89   :         return _Where;

  00000	48 8b c2	 mov	 rax, rdx

; 90   :     }

  00003	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SA_KPEBD@Z
_TEXT	SEGMENT
_First$ = 8
?length@?$char_traits@D@std@@SA_KPEBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 523  : 		return (*_First == 0 ? 0

  00000	80 39 00	 cmp	 BYTE PTR [rcx], 0
  00003	75 03		 jne	 SHORT $LN3@length
  00005	33 c0		 xor	 eax, eax

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  00007	c3		 ret	 0
$LN3@length:

; 523  : 		return (*_First == 0 ? 0

  00008	48 83 c8 ff	 or	 rax, -1
  0000c	0f 1f 40 00	 npad	 4
$LL5@length:
  00010	48 ff c0	 inc	 rax
  00013	80 3c 01 00	 cmp	 BYTE PTR [rcx+rax], 0
  00017	75 f7		 jne	 SHORT $LL5@length

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  00019	c3		 ret	 0
?length@?$char_traits@D@std@@SA_KPEBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z
_TEXT	SEGMENT
_First1$ = 48
_First2$ = 56
_Count$ = 64
?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z PROC	; std::char_traits<char>::copy, COMDAT

; 529  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 530  : 		return (_Count == 0 ? _First1

  00009	4d 85 c0	 test	 r8, r8
  0000c	74 05		 je	 SHORT $LN5@copy
  0000e	e8 00 00 00 00	 call	 memcpy
$LN5@copy:
  00013	48 8b c3	 mov	 rax, rbx

; 531  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));
; 532  : 		}

  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5b		 pop	 rbx
  0001b	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ENDP	; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z
_TEXT	SEGMENT
_First1$ = 8
_First2$ = 16
_Count$ = 24
?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z PROC	; std::char_traits<char>::move, COMDAT

; 553  : 		return (_Count == 0 ? _First1

  00000	4d 85 c0	 test	 r8, r8
  00003	75 04		 jne	 SHORT $LN3@move
  00005	48 8b c1	 mov	 rax, rcx

; 554  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));
; 555  : 		}

  00008	c3		 ret	 0
$LN3@move:

; 553  : 		return (_Count == 0 ? _First1

  00009	e9 00 00 00 00	 jmp	 memmove
?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ENDP	; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
?assign@?$char_traits@D@std@@SAXAEADAEBD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 565  : 		_Left = _Right;

  00000	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00003	88 01		 mov	 BYTE PTR [rcx], al

; 566  : 		}

  00005	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QEAAXXZ
_TEXT	SEGMENT
this$dead$ = 8
?_Orphan_all@_Container_base0@std@@QEAAXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT

; 44   : 		}

  00000	c2 00 00	 ret	 0
?_Orphan_all@_Container_base0@std@@QEAAXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT

; 55   : 		}

  00000	c2 00 00	 ret	 0
?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPEAX_K0_N@Z
_TEXT	SEGMENT
_Count$ = 48
_Sz$ = 56
_Try_aligned_allocation$dead$ = 64
?_Allocate@std@@YAPEAX_K0_N@Z PROC			; std::_Allocate, COMDAT

; 48   : 	{	// allocate storage for _Count elements of size _Sz

$LN14:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b c2	 mov	 r8, rdx

; 49   : 	void *_Ptr = 0;
; 50   : 
; 51   : 	if (_Count == 0)

  00007	48 85 c9	 test	 rcx, rcx
  0000a	75 07		 jne	 SHORT $LN2@Allocate

; 52   : 		return (_Ptr);

  0000c	33 c0		 xor	 eax, eax

; 87   : 	}

  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	c3		 ret	 0
$LN2@Allocate:

; 53   : 
; 54   : 	// check overflow of multiply
; 55   : 	if ((size_t)(-1) / _Sz < _Count)

  00013	33 d2		 xor	 edx, edx
  00015	48 83 c8 ff	 or	 rax, -1
  00019	49 f7 f0	 div	 r8
  0001c	48 3b c1	 cmp	 rax, rcx
  0001f	72 3f		 jb	 SHORT $LN11@Allocate

; 57   : 	const size_t _User_size = _Count * _Sz;

  00021	49 0f af c8	 imul	 rcx, r8

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00025	48 81 f9 00 10
	00 00		 cmp	 rcx, 4096		; 00001000H
  0002c	72 25		 jb	 SHORT $LN4@Allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0002e	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 66   : 		if (_Block_size <= _User_size)

  00032	48 3b c1	 cmp	 rax, rcx
  00035	76 2f		 jbe	 SHORT $LN13@Allocate

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);
; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0003f	48 8d 48 27	 lea	 rcx, QWORD PTR [rax+39]
  00043	48 83 e1 e0	 and	 rcx, -32		; ffffffffffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00047	48 89 41 f8	 mov	 QWORD PTR [rcx-8], rax

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);
; 85   : 		}
; 86   : 	return (_Ptr);

  0004b	48 8b c1	 mov	 rax, rcx

; 87   : 	}

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
$LN4@Allocate:

; 74   : 
; 75   :  #ifdef _DEBUG
; 76   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 77   :  #endif /* _DEBUG */
; 78   : 		}
; 79   : 	else
; 80   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 81   : 
; 82   : 		{	// allocate normal block
; 83   : 		_Ptr = ::operator new(_User_size);

  00053	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00058	48 8b c8	 mov	 rcx, rax

; 87   : 	}

  0005b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005f	c3		 ret	 0
$LN11@Allocate:

; 56   : 		_Xbad_alloc();	// report no memory

  00060	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00065	cc		 int	 3
$LN13@Allocate:

; 67   : 			_Xbad_alloc();	// report no memory

  00066	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0006b	cc		 int	 3
$LN10@Allocate:
?_Allocate@std@@YAPEAX_K0_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPEAX_K1@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Count$ = 56
_Sz$ = 64
?_Deallocate@std@@YAXPEAX_K1@Z PROC			; std::_Deallocate, COMDAT

; 92   : 	{	// deallocate storage for _Count elements of size _Sz

$LN16:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	4c 8b ca	 mov	 r9, rdx

; 93   :  #if defined(_M_IX86) || defined(_M_X64)
; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00007	48 83 c8 ff	 or	 rax, -1
  0000b	33 d2		 xor	 edx, edx
  0000d	49 f7 f0	 div	 r8
  00010	4c 3b c8	 cmp	 r9, rax
  00013	77 36		 ja	 SHORT $LN10@Deallocate

; 95   : 	const size_t _User_size = _Count * _Sz;

  00015	4d 0f af c8	 imul	 r9, r8

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00019	49 81 f9 00 10
	00 00		 cmp	 r9, 4096		; 00001000H
  00020	72 20		 jb	 SHORT $LN3@Deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	f6 c1 1f	 test	 cl, 31
  00025	75 2a		 jne	 SHORT $LN12@Deallocate

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00027	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0002b	48 3b c1	 cmp	 rax, rcx
  0002e	73 27		 jae	 SHORT $LN13@Deallocate

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00030	48 2b c8	 sub	 rcx, rax
  00033	48 83 f9 08	 cmp	 rcx, 8
  00037	72 24		 jb	 SHORT $LN14@Deallocate

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00039	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  0003d	77 24		 ja	 SHORT $LN15@Deallocate

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0003f	48 8b c8	 mov	 rcx, rax
$LN3@Deallocate:

; 133  : 	}

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00046	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
$LN10@Deallocate:

; 93   :  #if defined(_M_IX86) || defined(_M_X64)
; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0004b	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00050	cc		 int	 3
$LN12@Deallocate:

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00051	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00056	cc		 int	 3
$LN13@Deallocate:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00057	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0005c	cc		 int	 3
$LN14@Deallocate:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0005d	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00062	cc		 int	 3
$LN15@Deallocate:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00063	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00068	cc		 int	 3
$LN9@Deallocate:
?_Deallocate@std@@YAXPEAX_K1@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\alist_000\cppmisc\trie.cc
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\alist_000\cppmisc\trie.cc
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\alist_000\cppmisc\trie.cc
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\alist_000\cppmisc\trie.cc
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\users\alist_000\cppmisc\trie.cc
_TEXT	SEGMENT
r$1 = 32
__$ArrayPad$ = 256
t$ = 304
word$ = 312
?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; add_word

; 17   : void add_word(Trie &t, const std::string &word) {

$LN310:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	57		 push	 rdi
  00004	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

  0001d	48 8b 42 18	 mov	 rax, QWORD PTR [rdx+24]
; File c:\users\alist_000\cppmisc\trie.cc

; 17   : void add_word(Trie &t, const std::string &word) {

  00021	48 8b f9	 mov	 rdi, rcx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00024	48 83 f8 10	 cmp	 rax, 16
  00028	72 05		 jb	 SHORT $LN17@add_word
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  0002a	48 8b 1a	 mov	 rbx, QWORD PTR [rdx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

  0002d	eb 03		 jmp	 SHORT $LN18@add_word
$LN17@add_word:
  0002f	48 8b da	 mov	 rbx, rdx
$LN18@add_word:
  00032	48 83 f8 10	 cmp	 rax, 16
  00036	72 05		 jb	 SHORT $LN49@add_word
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00038	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 521  : 		return (this->_BUF_SIZE <= _Myres

  0003b	eb 03		 jmp	 SHORT $LN50@add_word
$LN49@add_word:
  0003d	48 8b ca	 mov	 rcx, rdx
$LN50@add_word:

; 1614 : 		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));

  00040	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  00044	48 03 c1	 add	 rax, rcx
  00047	33 c9		 xor	 ecx, ecx
  00049	48 8b e8	 mov	 rbp, rax
  0004c	48 2b eb	 sub	 rbp, rbx
  0004f	48 3b d8	 cmp	 rbx, rax
  00052	48 0f 47 e9	 cmova	 rbp, rcx
; File c:\users\alist_000\cppmisc\trie.cc

; 18   :   for(const auto& c : word) {

  00056	48 85 ed	 test	 rbp, rbp
  00059	0f 84 de 01 00
	00		 je	 $LN3@add_word
  0005f	4c 89 b4 24 40
	01 00 00	 mov	 QWORD PTR [rsp+320], r14
  00067	4c 8b f3	 mov	 r14, rbx
  0006a	4c 89 bc 24 48
	01 00 00	 mov	 QWORD PTR [rsp+328], r15
  00072	49 f7 de	 neg	 r14
  00075	49 bf 13 da 4b
	68 2f a1 bd 04	 mov	 r15, 341606371735362067	; 04bda12f684bda13H
  0007f	48 89 b4 24 38
	01 00 00	 mov	 QWORD PTR [rsp+312], rsi
  00087	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@add_word:

; 20   :     r.entries[0].key = c;

  00090	0f b6 03	 movzx	 eax, BYTE PTR [rbx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

  00093	4c 8b 47 08	 mov	 r8, QWORD PTR [rdi+8]
; File c:\users\alist_000\cppmisc\trie.cc

; 20   :     r.entries[0].key = c;

  00097	88 44 24 20	 mov	 BYTE PTR r$1[rsp], al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

  0009b	48 8d 44 24 20	 lea	 rax, QWORD PTR r$1[rsp]
  000a0	49 3b c0	 cmp	 rax, r8
  000a3	0f 83 d1 00 00
	00		 jae	 $LN81@add_word
  000a9	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  000ac	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$1[rsp]
  000b1	48 3b c1	 cmp	 rax, rcx
  000b4	0f 87 c0 00 00
	00		 ja	 $LN81@add_word

; 1279 : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

  000ba	48 8d 4c 24 20	 lea	 rcx, QWORD PTR r$1[rsp]
  000bf	48 2b c8	 sub	 rcx, rax
  000c2	49 8b c7	 mov	 rax, r15
  000c5	48 f7 e9	 imul	 rcx
  000c8	48 8b f2	 mov	 rsi, rdx
  000cb	48 c1 fe 02	 sar	 rsi, 2
  000cf	48 8b c6	 mov	 rax, rsi
  000d2	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  000d6	48 03 f0	 add	 rsi, rax

; 1280 : 			if (this->_Mylast() == this->_Myend())

  000d9	4c 3b 47 10	 cmp	 r8, QWORD PTR [rdi+16]
  000dd	75 08		 jne	 SHORT $LN83@add_word

; 1281 : 				_Reserve(1);

  000df	48 8b cf	 mov	 rcx, rdi
  000e2	e8 00 00 00 00	 call	 ?_Reserve@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z ; std::vector<Row,std::allocator<Row> >::_Reserve
$LN83@add_word:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000e7	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  000eb	48 85 d2	 test	 rdx, rdx
  000ee	0f 84 19 01 00
	00		 je	 $LN288@add_word
  000f4	48 8b 07	 mov	 rax, QWORD PTR [rdi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1283 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  000f7	48 69 ce d8 00
	00 00		 imul	 rcx, rsi, 216		; 000000d8H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  000fe	48 03 c1	 add	 rax, rcx
  00101	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00104	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00107	0f 10 48 10	 movups	 xmm1, XMMWORD PTR [rax+16]
  0010b	0f 11 4a 10	 movups	 XMMWORD PTR [rdx+16], xmm1
  0010f	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [rax+32]
  00113	0f 11 42 20	 movups	 XMMWORD PTR [rdx+32], xmm0
  00117	0f 10 48 30	 movups	 xmm1, XMMWORD PTR [rax+48]
  0011b	0f 11 4a 30	 movups	 XMMWORD PTR [rdx+48], xmm1
  0011f	0f 10 40 40	 movups	 xmm0, XMMWORD PTR [rax+64]
  00123	0f 11 42 40	 movups	 XMMWORD PTR [rdx+64], xmm0
  00127	0f 10 48 50	 movups	 xmm1, XMMWORD PTR [rax+80]
  0012b	0f 11 4a 50	 movups	 XMMWORD PTR [rdx+80], xmm1
  0012f	0f 10 40 60	 movups	 xmm0, XMMWORD PTR [rax+96]
  00133	0f 11 42 60	 movups	 XMMWORD PTR [rdx+96], xmm0
  00137	48 83 ea 80	 sub	 rdx, -128		; ffffffffffffff80H
  0013b	0f 10 48 70	 movups	 xmm1, XMMWORD PTR [rax+112]
  0013f	48 83 e8 80	 sub	 rax, -128		; ffffffffffffff80H
  00143	0f 11 4a f0	 movups	 XMMWORD PTR [rdx-16], xmm1
  00147	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  0014a	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  0014d	0f 10 48 10	 movups	 xmm1, XMMWORD PTR [rax+16]
  00151	0f 11 4a 10	 movups	 XMMWORD PTR [rdx+16], xmm1
  00155	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [rax+32]
  00159	0f 11 42 20	 movups	 XMMWORD PTR [rdx+32], xmm0
  0015d	0f 10 48 30	 movups	 xmm1, XMMWORD PTR [rax+48]
  00161	0f 11 4a 30	 movups	 XMMWORD PTR [rdx+48], xmm1
  00165	0f 10 40 40	 movups	 xmm0, XMMWORD PTR [rax+64]
  00169	0f 11 42 40	 movups	 XMMWORD PTR [rdx+64], xmm0
  0016d	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00171	48 89 42 50	 mov	 QWORD PTR [rdx+80], rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1287 : 		else

  00175	e9 93 00 00 00	 jmp	 $LN288@add_word
$LN81@add_word:

; 1288 : 			{	// push back a non-element
; 1289 : 			if (this->_Mylast() == this->_Myend())

  0017a	4c 3b 47 10	 cmp	 r8, QWORD PTR [rdi+16]
  0017e	75 08		 jne	 SHORT $LN84@add_word

; 1290 : 				_Reserve(1);

  00180	48 8b cf	 mov	 rcx, rdi
  00183	e8 00 00 00 00	 call	 ?_Reserve@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z ; std::vector<Row,std::allocator<Row> >::_Reserve
$LN84@add_word:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00188	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  0018c	48 85 c9	 test	 rcx, rcx
  0018f	74 7c		 je	 SHORT $LN288@add_word
  00191	48 8d 44 24 20	 lea	 rax, QWORD PTR r$1[rsp]
  00196	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  00199	0f 10 48 10	 movups	 xmm1, XMMWORD PTR [rax+16]
  0019d	48 8d 80 80 00
	00 00		 lea	 rax, QWORD PTR [rax+128]
  001a4	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
  001a7	0f 10 40 a0	 movups	 xmm0, XMMWORD PTR [rax-96]
  001ab	0f 11 49 10	 movups	 XMMWORD PTR [rcx+16], xmm1
  001af	0f 10 48 b0	 movups	 xmm1, XMMWORD PTR [rax-80]
  001b3	0f 11 41 20	 movups	 XMMWORD PTR [rcx+32], xmm0
  001b7	0f 10 40 c0	 movups	 xmm0, XMMWORD PTR [rax-64]
  001bb	0f 11 49 30	 movups	 XMMWORD PTR [rcx+48], xmm1
  001bf	0f 10 48 d0	 movups	 xmm1, XMMWORD PTR [rax-48]
  001c3	0f 11 41 40	 movups	 XMMWORD PTR [rcx+64], xmm0
  001c7	0f 10 40 e0	 movups	 xmm0, XMMWORD PTR [rax-32]
  001cb	0f 11 49 50	 movups	 XMMWORD PTR [rcx+80], xmm1
  001cf	0f 10 48 f0	 movups	 xmm1, XMMWORD PTR [rax-16]
  001d3	0f 11 41 60	 movups	 XMMWORD PTR [rcx+96], xmm0
  001d7	48 83 e9 80	 sub	 rcx, -128		; ffffffffffffff80H
  001db	0f 10 00	 movups	 xmm0, XMMWORD PTR [rax]
  001de	0f 11 49 f0	 movups	 XMMWORD PTR [rcx-16], xmm1
  001e2	0f 10 48 10	 movups	 xmm1, XMMWORD PTR [rax+16]
  001e6	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
  001e9	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [rax+32]
  001ed	0f 11 49 10	 movups	 XMMWORD PTR [rcx+16], xmm1
  001f1	0f 10 48 30	 movups	 xmm1, XMMWORD PTR [rax+48]
  001f5	0f 11 41 20	 movups	 XMMWORD PTR [rcx+32], xmm0
  001f9	0f 10 40 40	 movups	 xmm0, XMMWORD PTR [rax+64]
  001fd	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00201	0f 11 49 30	 movups	 XMMWORD PTR [rcx+48], xmm1
  00205	0f 11 41 40	 movups	 XMMWORD PTR [rcx+64], xmm0
  00209	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN288@add_word:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1294 : 			++this->_Mylast();

  0020d	48 81 47 08 d8
	00 00 00	 add	 QWORD PTR [rdi+8], 216	; 000000d8H
  00215	48 ff c3	 inc	 rbx
; File c:\users\alist_000\cppmisc\trie.cc

; 18   :   for(const auto& c : word) {

  00218	49 8d 04 1e	 lea	 rax, QWORD PTR [r14+rbx]
  0021c	48 3b c5	 cmp	 rax, rbp
  0021f	0f 85 6b fe ff
	ff		 jne	 $LL4@add_word
  00225	4c 8b bc 24 48
	01 00 00	 mov	 r15, QWORD PTR [rsp+328]
  0022d	4c 8b b4 24 40
	01 00 00	 mov	 r14, QWORD PTR [rsp+320]
  00235	48 8b b4 24 38
	01 00 00	 mov	 rsi, QWORD PTR [rsp+312]
$LN3@add_word:

; 21   :     t.push_back(r);
; 22   :   }
; 23   : }

  0023d	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00245	48 33 cc	 xor	 rcx, rsp
  00248	e8 00 00 00 00	 call	 __security_check_cookie
  0024d	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  00254	5f		 pop	 rdi
  00255	5d		 pop	 rbp
  00256	5b		 pop	 rbx
  00257	c3		 ret	 0
?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; add_word
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\alist_000\cppmisc\trie.cc
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\alist_000\cppmisc\trie.cc
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\alist_000\cppmisc\trie.cc
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\alist_000\cppmisc\trie.cc
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\users\alist_000\cppmisc\trie.cc
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\users\alist_000\cppmisc\trie.cc
_TEXT	SEGMENT
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main	PROC

; 25   : int main() {

$LN1237:
  00000	40 55		 push	 rbp
  00002	48 8b ec	 mov	 rbp, rsp
  00005	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0000c	48 c7 45 b8 fe
	ff ff ff	 mov	 QWORD PTR $T1[rbp-128], -2
  00014	48 89 9c 24 90
	00 00 00	 mov	 QWORD PTR [rsp+144], rbx
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 45 f8	 mov	 QWORD PTR __$ArrayPad$[rbp-128], rax
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	f3 0f 7f 45 c0	 movdqu	 XMMWORD PTR words$[rbp-128], xmm0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 487  : 		_Myend()

  00032	33 db		 xor	 ebx, ebx
  00034	48 89 5d d0	 mov	 QWORD PTR words$[rbp-112], rbx
  00038	f3 0f 7f 45 a0	 movdqu	 XMMWORD PTR data$[rbp-128], xmm0
  0003d	48 89 5d b0	 mov	 QWORD PTR data$[rbp-112], rbx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00041	48 c7 45 f0 0f
	00 00 00	 mov	 QWORD PTR $T5[rbp-104], 15

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00049	48 89 5d e8	 mov	 QWORD PTR $T5[rbp-112], rbx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0004d	88 5d d8	 mov	 BYTE PTR $T5[rbp-128], bl
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00050	44 8d 43 04	 lea	 r8d, QWORD PTR [rbx+4]
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294967199
  0005b	48 8d 4d d8	 lea	 rcx, QWORD PTR $T5[rbp-128]
  0005f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00064	90		 npad	 1
; File c:\users\alist_000\cppmisc\trie.cc

; 28   :   add_word(data, "test");

  00065	48 8d 55 d8	 lea	 rdx, QWORD PTR $T5[rbp-128]
  00069	48 8d 4d a0	 lea	 rcx, QWORD PTR data$[rbp-128]
  0006d	e8 00 00 00 00	 call	 ?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; add_word
  00072	90		 npad	 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00073	48 8b 45 f0	 mov	 rax, QWORD PTR $T5[rbp-104]
  00077	48 83 f8 10	 cmp	 rax, 16
  0007b	72 4c		 jb	 SHORT $LN242@main

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)
; 2256 : 				_Traits::copy(this->_Bx()._Buf,
; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0007d	48 ff c0	 inc	 rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00080	48 8b 4d d8	 mov	 rcx, QWORD PTR $T5[rbp-128]

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00084	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  0008a	72 38		 jb	 SHORT $LN237@main

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0008c	f6 c1 1f	 test	 cl, 31
  0008f	74 06		 je	 SHORT $LN238@main
  00091	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00096	cc		 int	 3
$LN238@main:

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00097	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0009b	48 3b c1	 cmp	 rax, rcx
  0009e	72 06		 jb	 SHORT $LN239@main
  000a0	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  000a5	cc		 int	 3
$LN239@main:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  000a6	48 2b c8	 sub	 rcx, rax
  000a9	48 83 f9 08	 cmp	 rcx, 8
  000ad	73 06		 jae	 SHORT $LN240@main
  000af	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  000b4	cc		 int	 3
$LN240@main:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  000b5	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  000b9	76 06		 jbe	 SHORT $LN241@main
  000bb	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  000c0	cc		 int	 3
$LN241@main:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000c1	48 8b c8	 mov	 rcx, rax
$LN237@main:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  000c4	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN242@main:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  000c9	48 c7 45 f0 0f
	00 00 00	 mov	 QWORD PTR $T4[rbp-104], 15

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  000d1	48 89 5d e8	 mov	 QWORD PTR $T4[rbp-112], rbx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000d5	c6 45 d8 00	 mov	 BYTE PTR $T4[rbp-128], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  000d9	41 b8 05 00 00
	00		 mov	 r8d, 5
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294967198
  000e6	48 8d 4d d8	 lea	 rcx, QWORD PTR $T4[rbp-128]
  000ea	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000ef	90		 npad	 1
; File c:\users\alist_000\cppmisc\trie.cc

; 29   :   add_word(data, "hello");

  000f0	48 8d 55 d8	 lea	 rdx, QWORD PTR $T4[rbp-128]
  000f4	48 8d 4d a0	 lea	 rcx, QWORD PTR data$[rbp-128]
  000f8	e8 00 00 00 00	 call	 ?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; add_word
  000fd	90		 npad	 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  000fe	48 8b 45 f0	 mov	 rax, QWORD PTR $T4[rbp-104]
  00102	48 83 f8 10	 cmp	 rax, 16
  00106	72 4c		 jb	 SHORT $LN487@main

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)
; 2256 : 				_Traits::copy(this->_Bx()._Buf,
; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00108	48 ff c0	 inc	 rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  0010b	48 8b 4d d8	 mov	 rcx, QWORD PTR $T4[rbp-128]

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0010f	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  00115	72 38		 jb	 SHORT $LN482@main

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00117	f6 c1 1f	 test	 cl, 31
  0011a	74 06		 je	 SHORT $LN483@main
  0011c	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00121	cc		 int	 3
$LN483@main:

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00122	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00126	48 3b c1	 cmp	 rax, rcx
  00129	72 06		 jb	 SHORT $LN484@main
  0012b	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00130	cc		 int	 3
$LN484@main:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00131	48 2b c8	 sub	 rcx, rax
  00134	48 83 f9 08	 cmp	 rcx, 8
  00138	73 06		 jae	 SHORT $LN485@main
  0013a	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0013f	cc		 int	 3
$LN485@main:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00140	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  00144	76 06		 jbe	 SHORT $LN486@main
  00146	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0014b	cc		 int	 3
$LN486@main:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0014c	48 8b c8	 mov	 rcx, rax
$LN482@main:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  0014f	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN487@main:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00154	48 c7 45 f0 0f
	00 00 00	 mov	 QWORD PTR $T3[rbp-104], 15

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  0015c	48 89 5d e8	 mov	 QWORD PTR $T3[rbp-112], rbx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00160	c6 45 d8 00	 mov	 BYTE PTR $T3[rbp-128], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00164	41 b8 03 00 00
	00		 mov	 r8d, 3
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294967197
  00171	48 8d 4d d8	 lea	 rcx, QWORD PTR $T3[rbp-128]
  00175	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0017a	90		 npad	 1
; File c:\users\alist_000\cppmisc\trie.cc

; 30   :   add_word(data, "how");

  0017b	48 8d 55 d8	 lea	 rdx, QWORD PTR $T3[rbp-128]
  0017f	48 8d 4d a0	 lea	 rcx, QWORD PTR data$[rbp-128]
  00183	e8 00 00 00 00	 call	 ?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; add_word
  00188	90		 npad	 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00189	48 8b 45 f0	 mov	 rax, QWORD PTR $T3[rbp-104]
  0018d	48 83 f8 10	 cmp	 rax, 16
  00191	72 4c		 jb	 SHORT $LN732@main

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)
; 2256 : 				_Traits::copy(this->_Bx()._Buf,
; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00193	48 ff c0	 inc	 rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00196	48 8b 4d d8	 mov	 rcx, QWORD PTR $T3[rbp-128]

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0019a	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  001a0	72 38		 jb	 SHORT $LN727@main

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  001a2	f6 c1 1f	 test	 cl, 31
  001a5	74 06		 je	 SHORT $LN728@main
  001a7	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  001ac	cc		 int	 3
$LN728@main:

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  001ad	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  001b1	48 3b c1	 cmp	 rax, rcx
  001b4	72 06		 jb	 SHORT $LN729@main
  001b6	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  001bb	cc		 int	 3
$LN729@main:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  001bc	48 2b c8	 sub	 rcx, rax
  001bf	48 83 f9 08	 cmp	 rcx, 8
  001c3	73 06		 jae	 SHORT $LN730@main
  001c5	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  001ca	cc		 int	 3
$LN730@main:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  001cb	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  001cf	76 06		 jbe	 SHORT $LN731@main
  001d1	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  001d6	cc		 int	 3
$LN731@main:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  001d7	48 8b c8	 mov	 rcx, rax
$LN727@main:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  001da	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN732@main:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  001df	48 c7 45 f0 0f
	00 00 00	 mov	 QWORD PTR $T2[rbp-104], 15

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  001e7	48 89 5d e8	 mov	 QWORD PTR $T2[rbp-112], rbx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  001eb	c6 45 d8 00	 mov	 BYTE PTR $T2[rbp-128], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  001ef	41 b8 08 00 00
	00		 mov	 r8d, 8
  001f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294967196
  001fc	48 8d 4d d8	 lea	 rcx, QWORD PTR $T2[rbp-128]
  00200	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00205	90		 npad	 1
; File c:\users\alist_000\cppmisc\trie.cc

; 31   :   add_word(data, "alistair");

  00206	48 8d 55 d8	 lea	 rdx, QWORD PTR $T2[rbp-128]
  0020a	48 8d 4d a0	 lea	 rcx, QWORD PTR data$[rbp-128]
  0020e	e8 00 00 00 00	 call	 ?add_word@@YAXAEAV?$vector@URow@@V?$allocator@URow@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; add_word
  00213	90		 npad	 1
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00214	48 8b 45 f0	 mov	 rax, QWORD PTR $T2[rbp-104]
  00218	48 83 f8 10	 cmp	 rax, 16
  0021c	72 4d		 jb	 SHORT $LN977@main

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)
; 2256 : 				_Traits::copy(this->_Bx()._Buf,
; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0021e	48 ff c0	 inc	 rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00221	48 8b 4d d8	 mov	 rcx, QWORD PTR $T2[rbp-128]

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00225	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  0022b	72 38		 jb	 SHORT $LN972@main

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0022d	f6 c1 1f	 test	 cl, 31
  00230	74 06		 je	 SHORT $LN973@main
  00232	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00237	cc		 int	 3
$LN973@main:

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00238	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0023c	48 3b c1	 cmp	 rax, rcx
  0023f	72 06		 jb	 SHORT $LN974@main
  00241	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00246	cc		 int	 3
$LN974@main:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00247	48 2b c8	 sub	 rcx, rax
  0024a	48 83 f9 08	 cmp	 rcx, 8
  0024e	73 06		 jae	 SHORT $LN975@main
  00250	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00255	cc		 int	 3
$LN975@main:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00256	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  0025a	76 06		 jbe	 SHORT $LN976@main
  0025c	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00261	cc		 int	 3
$LN976@main:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00262	48 8b c8	 mov	 rcx, rax
$LN972@main:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00265	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
  0026a	90		 npad	 1
$LN977@main:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1637 : 		if (this->_Myfirst() != pointer())

  0026b	4c 8b 45 a0	 mov	 r8, QWORD PTR data$[rbp-128]
  0026f	4d 85 c0	 test	 r8, r8
  00272	0f 84 88 00 00
	00		 je	 $LN1012@main

; 1638 : 			{	// something to free, destroy and deallocate it
; 1639 : 			this->_Orphan_all();
; 1640 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

  00278	48 8b 4d b0	 mov	 rcx, QWORD PTR data$[rbp-112]
  0027c	49 2b c8	 sub	 rcx, r8
  0027f	48 b8 13 da 4b
	68 2f a1 bd 04	 mov	 rax, 341606371735362067	; 04bda12f684bda13H
  00289	48 f7 e9	 imul	 rcx
  0028c	48 c1 fa 02	 sar	 rdx, 2
  00290	48 8b c2	 mov	 rax, rdx
  00293	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00297	48 03 d0	 add	 rdx, rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0029a	48 b8 84 f6 12
	da 4b 68 2f 01	 mov	 rax, 85401592933840516	; 012f684bda12f684H
  002a4	48 3b d0	 cmp	 rdx, rax
  002a7	76 06		 jbe	 SHORT $LN1079@main
  002a9	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  002ae	cc		 int	 3
$LN1079@main:

; 95   : 	const size_t _User_size = _Count * _Sz;

  002af	48 69 c2 d8 00
	00 00		 imul	 rax, rdx, 216		; 000000d8H

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  002b6	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  002bc	72 39		 jb	 SHORT $LN1080@main

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  002be	41 f6 c0 1f	 test	 r8b, 31
  002c2	74 06		 je	 SHORT $LN1081@main
  002c4	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  002c9	cc		 int	 3
$LN1081@main:

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  002ca	49 8b 40 f8	 mov	 rax, QWORD PTR [r8-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  002ce	49 3b c0	 cmp	 rax, r8
  002d1	72 06		 jb	 SHORT $LN1082@main
  002d3	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  002d8	cc		 int	 3
$LN1082@main:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  002d9	4c 2b c0	 sub	 r8, rax
  002dc	49 83 f8 08	 cmp	 r8, 8
  002e0	73 06		 jae	 SHORT $LN1083@main
  002e2	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  002e7	cc		 int	 3
$LN1083@main:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  002e8	49 83 f8 27	 cmp	 r8, 39			; 00000027H
  002ec	76 06		 jbe	 SHORT $LN1084@main
  002ee	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  002f3	cc		 int	 3
$LN1084@main:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  002f4	4c 8b c0	 mov	 r8, rax
$LN1080@main:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  002f7	49 8b c8	 mov	 rcx, r8
  002fa	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
  002ff	90		 npad	 1
$LN1012@main:
; File c:\users\alist_000\cppmisc\trie.cc

; 32   :   return 0;

  00300	33 c0		 xor	 eax, eax

; 33   : }

  00302	48 8b 4d f8	 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-128]
  00306	48 33 cc	 xor	 rcx, rsp
  00309	e8 00 00 00 00	 call	 __security_check_cookie
  0030e	48 8b 9c 24 90
	00 00 00	 mov	 rbx, QWORD PTR [rsp+144]
  00316	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0031d	5d		 pop	 rbp
  0031e	c3		 ret	 0
$LN1236@main:
main	ENDP
_TEXT	ENDS
text$x	SEGMENT
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$0 PROC
  00000	48 8d 8a 40 00
	00 00		 lea	 rcx, QWORD PTR words$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
main$dtor$0 ENDP
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$1 PROC
  0000c	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR data$[rdx]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAA@XZ ; std::vector<Row,std::allocator<Row> >::~vector<Row,std::allocator<Row> >
main$dtor$1 ENDP
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$2 PROC
  00018	48 8d 8a 58 00
	00 00		 lea	 rcx, QWORD PTR $T5[rdx]
  0001f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
main$dtor$2 ENDP
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$3 PROC
  00024	48 8d 8a 58 00
	00 00		 lea	 rcx, QWORD PTR $T4[rdx]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
main$dtor$3 ENDP
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$4 PROC
  00030	48 8d 8a 58 00
	00 00		 lea	 rcx, QWORD PTR $T3[rdx]
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
main$dtor$4 ENDP
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$5 PROC
  0003c	48 8d 8a 58 00
	00 00		 lea	 rcx, QWORD PTR $T2[rdx]
  00043	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
main$dtor$5 ENDP
text$x	ENDS
; Function compile flags: /Ogtpy
text$x	SEGMENT
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$0 PROC
  00000	48 8d 8a 40 00
	00 00		 lea	 rcx, QWORD PTR words$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
main$dtor$0 ENDP
text$x	ENDS
; Function compile flags: /Ogtpy
text$x	SEGMENT
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$1 PROC
  0000c	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR data$[rdx]
  00013	e9 00 00 00 00	 jmp	 ??1?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAA@XZ ; std::vector<Row,std::allocator<Row> >::~vector<Row,std::allocator<Row> >
main$dtor$1 ENDP
text$x	ENDS
; Function compile flags: /Ogtpy
text$x	SEGMENT
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$2 PROC
  00018	48 8d 8a 58 00
	00 00		 lea	 rcx, QWORD PTR $T5[rdx]
  0001f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
main$dtor$2 ENDP
text$x	ENDS
; Function compile flags: /Ogtpy
text$x	SEGMENT
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$3 PROC
  00024	48 8d 8a 58 00
	00 00		 lea	 rcx, QWORD PTR $T4[rdx]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
main$dtor$3 ENDP
text$x	ENDS
; Function compile flags: /Ogtpy
text$x	SEGMENT
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$4 PROC
  00030	48 8d 8a 58 00
	00 00		 lea	 rcx, QWORD PTR $T3[rdx]
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
main$dtor$4 ENDP
text$x	ENDS
; Function compile flags: /Ogtpy
text$x	SEGMENT
data$ = 32
$T1 = 56
words$ = 64
$T2 = 88
$T3 = 88
$T4 = 88
$T5 = 88
__$ArrayPad$ = 120
main$dtor$5 PROC
  0003c	48 8d 8a 58 00
	00 00		 lea	 rcx, QWORD PTR $T2[rdx]
  00043	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
main$dtor$5 ENDP
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 976  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 485  : 		: _Myfirst(),

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax

; 486  : 		_Mylast(),

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 487  : 		_Myend()

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 708  : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QEAA@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAAXAEBURow@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAAXAEBURow@@@Z PROC ; std::vector<Row,std::allocator<Row> >::push_back, COMDAT

; 1276 : 		{	// insert element at end

$LN190:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx
  0000d	48 8b fa	 mov	 rdi, rdx

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

  00010	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00014	48 3b d1	 cmp	 rdx, rcx
  00017	73 5d		 jae	 SHORT $LN2@push_back
  00019	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0001c	48 3b c2	 cmp	 rax, rdx
  0001f	77 55		 ja	 SHORT $LN2@push_back

; 1277 : 		if (_Inside(_STD addressof(_Val)))
; 1278 : 			{	// push back an element
; 1279 : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

  00021	48 2b f8	 sub	 rdi, rax
  00024	48 b8 13 da 4b
	68 2f a1 bd 04	 mov	 rax, 341606371735362067	; 04bda12f684bda13H
  0002e	48 f7 ef	 imul	 rdi
  00031	48 8b fa	 mov	 rdi, rdx
  00034	48 c1 ff 02	 sar	 rdi, 2
  00038	48 8b c7	 mov	 rax, rdi
  0003b	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0003f	48 03 f8	 add	 rdi, rax

; 1280 : 			if (this->_Mylast() == this->_Myend())

  00042	48 3b 4b 10	 cmp	 rcx, QWORD PTR [rbx+16]
  00046	75 08		 jne	 SHORT $LN4@push_back

; 1281 : 				_Reserve(1);

  00048	48 8b cb	 mov	 rcx, rbx
  0004b	e8 00 00 00 00	 call	 ?_Reserve@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z ; std::vector<Row,std::allocator<Row> >::_Reserve
$LN4@push_back:

; 1282 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1283 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  00050	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  00054	4c 69 c7 d8 00
	00 00		 imul	 r8, rdi, 216		; 000000d8H
  0005b	4c 03 03	 add	 r8, QWORD PTR [rbx]
  0005e	e8 00 00 00 00	 call	 ??$construct@URow@@AEAU1@@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@AEAU2@@Z ; std::_Wrap_alloc<std::allocator<Row> >::construct<Row,Row & __ptr64>

; 1293 : 				_Val);
; 1294 : 			++this->_Mylast();

  00063	48 81 43 08 d8
	00 00 00	 add	 QWORD PTR [rbx+8], 216	; 000000d8H

; 1295 : 			}
; 1296 : 		}

  0006b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
$LN2@push_back:

; 1284 : 				this->_Myfirst()[_Idx]);
; 1285 : 			++this->_Mylast();
; 1286 : 			}
; 1287 : 		else
; 1288 : 			{	// push back a non-element
; 1289 : 			if (this->_Mylast() == this->_Myend())

  00076	48 3b 4b 10	 cmp	 rcx, QWORD PTR [rbx+16]
  0007a	75 08		 jne	 SHORT $LN5@push_back

; 1290 : 				_Reserve(1);

  0007c	48 8b cb	 mov	 rcx, rbx
  0007f	e8 00 00 00 00	 call	 ?_Reserve@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z ; std::vector<Row,std::allocator<Row> >::_Reserve
$LN5@push_back:

; 1291 : 			_Orphan_range(this->_Mylast(), this->_Mylast());
; 1292 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  00084	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  00088	4c 8b c7	 mov	 r8, rdi
  0008b	e8 00 00 00 00	 call	 ??$construct@URow@@AEBU1@@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@AEBU2@@Z ; std::_Wrap_alloc<std::allocator<Row> >::construct<Row,Row const & __ptr64>

; 1293 : 				_Val);
; 1294 : 			++this->_Mylast();

  00090	48 81 43 08 d8
	00 00 00	 add	 QWORD PTR [rbx+8], 216	; 000000d8H

; 1295 : 			}
; 1296 : 		}

  00098	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
?push_back@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAAXAEBURow@@@Z ENDP ; std::vector<Row,std::allocator<Row> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAA@XZ PROC ; std::vector<Row,std::allocator<Row> >::~vector<Row,std::allocator<Row> >, COMDAT

; 976  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXXZ ; std::vector<Row,std::allocator<Row> >::_Tidy
??1?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAA@XZ ENDP ; std::vector<Row,std::allocator<Row> >::~vector<Row,std::allocator<Row> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAA@XZ PROC ; std::vector<Row,std::allocator<Row> >::vector<Row,std::allocator<Row> >, COMDAT

; 485  : 		: _Myfirst(),

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax

; 486  : 		_Mylast(),

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 487  : 		_Myend()

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 708  : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEAA@XZ ENDP ; std::vector<Row,std::allocator<Row> >::vector<Row,std::allocator<Row> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator!=, COMDAT

; 226  : 		{	// test for iterator inequality

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00006	0f 95 c0	 setne	 al

; 227  : 		return (!(*this == _Right));
; 228  : 		}

  00009	c3		 ret	 0
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++, COMDAT

; 100  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 101  : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 102  : 		if (_Mycont == 0
; 103  : 			|| _Ptr == nullptr_t{}
; 104  : 			|| _Mycont->_Myptr() + _Mycont->_Mysize <= _Unfancy(_Ptr))
; 105  : 			{	// report error
; 106  : 			_DEBUG_ERROR("string iterator not incrementable");
; 107  : 			_SCL_SECURE_OUT_OF_RANGE;
; 108  : 			}
; 109  : 
; 110  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 111  : 		_SCL_SECURE_VALIDATE(_Ptr != nullptr_t{});
; 112  : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 113  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 114  : 		_SCL_SECURE_VALIDATE_RANGE(_Unfancy(_Ptr) < _Mycont->_Myptr() + _Mycont->_Mysize);
; 115  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 116  : 
; 117  : 		++_Ptr;

  00000	48 ff 01	 inc	 QWORD PTR [rcx]

; 118  : 		return (*this);

  00003	48 8b c1	 mov	 rax, rcx

; 119  : 		}

  00006	c3		 ret	 0
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ
_TEXT	SEGMENT
this$ = 8
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT

; 68   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 69   : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 70   : 		const auto _Contptr = _Mycont ? _Mycont->_Myptr() : 0;
; 71   : 		if (_Mycont == 0
; 72   : 			|| _Ptr == nullptr_t{}
; 73   : 			|| _Unfancy(_Ptr) < _Contptr
; 74   : 			|| _Contptr + _Mycont->_Mysize <= _Unfancy(_Ptr))
; 75   : 			{	// report error
; 76   : 			_DEBUG_ERROR("string iterator not dereferencable");
; 77   : 			_SCL_SECURE_OUT_OF_RANGE;
; 78   : 			}
; 79   : 
; 80   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 81   : 		_SCL_SECURE_VALIDATE(_Ptr != nullptr_t{});
; 82   : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 83   : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 84   : 		const auto _Contptr = _Mycont->_Myptr();
; 85   : 		_SCL_SECURE_VALIDATE_RANGE(_Contptr <= _Unfancy(_Ptr) && _Unfancy(_Ptr) < _Contptr + _Mycont->_Mysize);
; 86   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 87   : 
; 88   : 		_Analysis_assume_(_Ptr != nullptr_t{});
; 89   : 
; 90   : 		return (*_Ptr);

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 91   : 		}

  00003	c3		 ret	 0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00000	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16
  00005	72 11		 jb	 SHORT $LN11@end
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00007	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1614 : 		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));

  0000a	48 8b c2	 mov	 rax, rdx
  0000d	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00011	49 03 c8	 add	 rcx, r8

; 48   : 		: _Ptr(_Parg)

  00014	48 89 0a	 mov	 QWORD PTR [rdx], rcx

; 1615 : 		}

  00017	c3		 ret	 0
$LN11@end:

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00018	4c 8b c1	 mov	 r8, rcx

; 1614 : 		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));

  0001b	48 8b c2	 mov	 rax, rdx
  0001e	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00022	49 03 c8	 add	 rcx, r8

; 48   : 		: _Ptr(_Parg)

  00025	48 89 0a	 mov	 QWORD PTR [rdx], rcx

; 1615 : 		}

  00028	c3		 ret	 0
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00000	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16
  00005	72 0a		 jb	 SHORT $LN11@begin
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00007	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 48   : 		: _Ptr(_Parg)

  0000a	48 89 02	 mov	 QWORD PTR [rdx], rax

; 1601 : 		auto _Mydata = &this->_Get_data();
; 1602 : 		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));

  0000d	48 8b c2	 mov	 rax, rdx

; 1603 : 		}

  00010	c3		 ret	 0
$LN11@begin:

; 48   : 		: _Ptr(_Parg)

  00011	48 89 0a	 mov	 QWORD PTR [rdx], rcx

; 1601 : 		auto _Mydata = &this->_Get_data();
; 1602 : 		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));

  00014	48 8b c2	 mov	 rax, rdx

; 1603 : 		}

  00017	c3		 ret	 0
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 1016 : 		{	// destroy the string

$LN123:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00006	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]

; 1016 : 		{	// destroy the string

  0000a	48 8b d9	 mov	 rbx, rcx

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  0000d	48 83 f8 10	 cmp	 rax, 16
  00011	72 33		 jb	 SHORT $LN86@basic_stri
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00013	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00016	48 ff c0	 inc	 rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00019	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  0001f	72 20		 jb	 SHORT $LN81@basic_stri

; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00021	f6 c1 1f	 test	 cl, 31
  00024	75 43		 jne	 SHORT $LN118@basic_stri

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00026	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0002a	48 3b c1	 cmp	 rax, rcx
  0002d	73 40		 jae	 SHORT $LN120@basic_stri

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0002f	48 2b c8	 sub	 rcx, rax
  00032	48 83 f9 08	 cmp	 rcx, 8
  00036	72 3d		 jb	 SHORT $LN121@basic_stri

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00038	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  0003c	77 3d		 ja	 SHORT $LN122@basic_stri

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0003e	48 8b c8	 mov	 rcx, rax
$LN81@basic_stri:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN86@basic_stri:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00046	48 c7 43 18 0f
	00 00 00	 mov	 QWORD PTR [rbx+24], 15

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0004e	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00053	48 c7 43 10 00
	00 00 00	 mov	 QWORD PTR [rbx+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0005b	72 03		 jb	 SHORT $LN109@basic_stri
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  0005d	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
$LN109@basic_stri:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00060	c6 03 00	 mov	 BYTE PTR [rbx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1018 : 		}

  00063	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00067	5b		 pop	 rbx
  00068	c3		 ret	 0
$LN118@basic_stri:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00069	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0006e	cc		 int	 3
$LN120@basic_stri:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0006f	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00074	cc		 int	 3
$LN121@basic_stri:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00075	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0007a	cc		 int	 3
$LN122@basic_stri:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0007b	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00080	cc		 int	 3
$LN117@basic_stri:
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 836  : 		{	// construct from [_Ptr, <null>)

$LN131:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00006	45 33 c0	 xor	 r8d, r8d

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00009	48 c7 41 18 0f
	00 00 00	 mov	 QWORD PTR [rcx+24], 15

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00011	4c 89 41 10	 mov	 QWORD PTR [rcx+16], r8

; 836  : 		{	// construct from [_Ptr, <null>)

  00015	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00018	44 88 01	 mov	 BYTE PTR [rcx], r8b

; 523  : 		return (*_First == 0 ? 0

  0001b	44 38 02	 cmp	 BYTE PTR [rdx], r8b
  0001e	74 0e		 je	 SHORT $LN128@basic_stri
  00020	49 83 c8 ff	 or	 r8, -1
$LL129@basic_stri:
  00024	49 ff c0	 inc	 r8
  00027	42 80 3c 02 00	 cmp	 BYTE PTR [rdx+r8], 0
  0002c	75 f6		 jne	 SHORT $LL129@basic_stri
$LN128@basic_stri:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  0002e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);
; 839  : 		}

  00033	48 8b c3	 mov	 rax, rbx
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5b		 pop	 rbx
  0003b	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
  00000	c2 00 00	 ret	 0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
  00000	c2 00 00	 ret	 0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
  00000	c2 00 00	 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAA@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT

; 485  : 		: _Myfirst(),

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax

; 486  : 		_Mylast(),

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 487  : 		_Myend()

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 521  : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT

; 1636 : 		{	// free all storage

$LN123:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1637 : 		if (this->_Myfirst() != pointer())

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	48 85 c9	 test	 rcx, rcx
  0000f	74 64		 je	 SHORT $LN2@Tidy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

  00011	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  00015	e8 00 00 00 00	 call	 ??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * __ptr64>
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

  0001a	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0001d	48 ba ff ff ff
	ff ff ff ff 07	 mov	 rdx, 576460752303423487	; 07ffffffffffffffH
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

  00027	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0002b	48 2b c1	 sub	 rax, rcx
  0002e	48 c1 f8 05	 sar	 rax, 5
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00032	48 3b c2	 cmp	 rax, rdx
  00035	77 44		 ja	 SHORT $LN117@Tidy

; 95   : 	const size_t _User_size = _Count * _Sz;

  00037	48 c1 e0 05	 shl	 rax, 5

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0003b	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  00041	72 20		 jb	 SHORT $LN80@Tidy

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00043	f6 c1 1f	 test	 cl, 31
  00046	75 39		 jne	 SHORT $LN119@Tidy

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00048	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0004c	48 3b c1	 cmp	 rax, rcx
  0004f	73 36		 jae	 SHORT $LN120@Tidy

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00051	48 2b c8	 sub	 rcx, rax
  00054	48 83 f9 08	 cmp	 rcx, 8
  00058	72 33		 jb	 SHORT $LN121@Tidy

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0005a	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  0005e	77 33		 ja	 SHORT $LN122@Tidy

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00060	48 8b c8	 mov	 rcx, rax
$LN80@Tidy:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00063	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1643 : 			this->_Myfirst() = pointer();

  00068	33 c0		 xor	 eax, eax
  0006a	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1644 : 			this->_Mylast() = pointer();

  0006d	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 1645 : 			this->_Myend() = pointer();

  00071	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
$LN2@Tidy:

; 1647 : 		}

  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5b		 pop	 rbx
  0007a	c3		 ret	 0
$LN117@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0007b	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00080	cc		 int	 3
$LN119@Tidy:

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00081	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00086	cc		 int	 3
$LN120@Tidy:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00087	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0008c	cc		 int	 3
$LN121@Tidy:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0008d	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00092	cc		 int	 3
$LN122@Tidy:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00093	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00098	cc		 int	 3
$LN116@Tidy:
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ
_TEXT	SEGMENT
this$ = 8
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myend, COMDAT

; 663  : 		return (_Get_data()._Myend);

  00000	48 8d 41 10	 lea	 rax, QWORD PTR [rcx+16]

; 664  : 		}

  00004	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ
_TEXT	SEGMENT
this$ = 8
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Mylast, COMDAT

; 653  : 		return (_Get_data()._Mylast);

  00000	48 8d 41 08	 lea	 rax, QWORD PTR [rcx+8]

; 654  : 		}

  00004	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ
_TEXT	SEGMENT
this$ = 8
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myfirst, COMDAT

; 643  : 		return (_Get_data()._Myfirst);

  00000	48 8b c1	 mov	 rax, rcx

; 644  : 		}

  00003	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAPEAURow@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Getal, COMDAT

; 623  : 		return (_Mypair._Get_first());

  00000	48 8b c1	 mov	 rax, rcx

; 624  : 		}

  00003	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >, COMDAT

; 485  : 		: _Myfirst(),

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax

; 486  : 		_Mylast(),

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 487  : 		_Myend()

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 521  : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBAXPEAURow@@0@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
?_Orphan_range@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBAXPEAURow@@0@Z PROC ; std::vector<Row,std::allocator<Row> >::_Orphan_range, COMDAT

; 1794 : 		}

  00000	c2 00 00	 ret	 0
?_Orphan_range@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBAXPEAURow@@0@Z ENDP ; std::vector<Row,std::allocator<Row> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXXZ PROC ; std::vector<Row,std::allocator<Row> >::_Tidy, COMDAT

; 1636 : 		{	// free all storage

$LN113:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1637 : 		if (this->_Myfirst() != pointer())

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	48 85 c9	 test	 rcx, rcx
  0000f	74 72		 je	 SHORT $LN2@Tidy

; 1638 : 			{	// something to free, destroy and deallocate it
; 1639 : 			this->_Orphan_all();
; 1640 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

  00011	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  00015	48 b8 13 da 4b
	68 2f a1 bd 04	 mov	 rax, 341606371735362067	; 04bda12f684bda13H
  0001f	48 2b d1	 sub	 rdx, rcx
  00022	48 f7 ea	 imul	 rdx
  00025	48 c1 fa 02	 sar	 rdx, 2
  00029	48 8b c2	 mov	 rax, rdx
  0002c	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00030	48 03 d0	 add	 rdx, rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00033	48 b8 84 f6 12
	da 4b 68 2f 01	 mov	 rax, 85401592933840516	; 012f684bda12f684H
  0003d	48 3b d0	 cmp	 rdx, rax
  00040	77 47		 ja	 SHORT $LN107@Tidy

; 95   : 	const size_t _User_size = _Count * _Sz;

  00042	48 69 c2 d8 00
	00 00		 imul	 rax, rdx, 216		; 000000d8H

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00049	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  0004f	72 20		 jb	 SHORT $LN70@Tidy

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00051	f6 c1 1f	 test	 cl, 31
  00054	75 39		 jne	 SHORT $LN109@Tidy

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00056	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0005a	48 3b c1	 cmp	 rax, rcx
  0005d	73 36		 jae	 SHORT $LN110@Tidy

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0005f	48 2b c8	 sub	 rcx, rax
  00062	48 83 f9 08	 cmp	 rcx, 8
  00066	72 33		 jb	 SHORT $LN111@Tidy

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00068	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  0006c	77 33		 ja	 SHORT $LN112@Tidy

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0006e	48 8b c8	 mov	 rcx, rax
$LN70@Tidy:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00071	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1643 : 			this->_Myfirst() = pointer();

  00076	33 c0		 xor	 eax, eax
  00078	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1644 : 			this->_Mylast() = pointer();

  0007b	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 1645 : 			this->_Myend() = pointer();

  0007f	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
$LN2@Tidy:

; 1647 : 		}

  00083	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00087	5b		 pop	 rbx
  00088	c3		 ret	 0
$LN107@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00089	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0008e	cc		 int	 3
$LN109@Tidy:

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0008f	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00094	cc		 int	 3
$LN110@Tidy:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00095	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0009a	cc		 int	 3
$LN111@Tidy:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0009b	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  000a0	cc		 int	 3
$LN112@Tidy:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  000a1	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  000a6	cc		 int	 3
$LN106@Tidy:
?_Tidy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXXZ ENDP ; std::vector<Row,std::allocator<Row> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$dead$ = 56
?_Reserve@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z PROC ; std::vector<Row,std::allocator<Row> >::_Reserve, COMDAT

; 1626 : 		{	// ensure room for _Count new elements, grow exponentially

$LN136:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	4c 8b c9	 mov	 r9, rcx

; 1048 : 		return (this->_Myend() - this->_Mylast());

  00009	48 bb 13 da 4b
	68 2f a1 bd 04	 mov	 rbx, 341606371735362067	; 04bda12f684bda13H
  00013	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00017	48 8b c3	 mov	 rax, rbx
  0001a	48 8b d1	 mov	 rdx, rcx
  0001d	4d 8b 41 08	 mov	 r8, QWORD PTR [r9+8]
  00021	49 2b d0	 sub	 rdx, r8
  00024	48 f7 ea	 imul	 rdx
  00027	48 c1 fa 02	 sar	 rdx, 2
  0002b	48 8b c2	 mov	 rax, rdx
  0002e	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00032	48 03 d0	 add	 rdx, rax

; 1627 : 		if (_Unused_capacity() < _Count)

  00035	48 83 fa 01	 cmp	 rdx, 1
  00039	73 77		 jae	 SHORT $LN2@Reserve

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

  0003b	4d 8b 19	 mov	 r11, QWORD PTR [r9]
  0003e	48 8b c3	 mov	 rax, rbx
  00041	4d 2b c3	 sub	 r8, r11

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

  00044	49 ba 84 f6 12
	da 4b 68 2f 01	 mov	 r10, 85401592933840516	; 012f684bda12f684H

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

  0004e	49 f7 e8	 imul	 r8
  00051	48 c1 fa 02	 sar	 rdx, 2
  00055	48 8b c2	 mov	 rax, rdx
  00058	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0005c	48 03 d0	 add	 rdx, rax

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

  0005f	49 8b c2	 mov	 rax, r10
  00062	48 2b c2	 sub	 rax, rdx
  00065	48 83 f8 01	 cmp	 rax, 1
  00069	72 4d		 jb	 SHORT $LN134@Reserve

; 1043 : 		return (this->_Myend() - this->_Myfirst());

  0006b	49 2b cb	 sub	 rcx, r11

; 1630 : 				_Xlen();
; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

  0006e	4c 8d 42 01	 lea	 r8, QWORD PTR [rdx+1]

; 1043 : 		return (this->_Myend() - this->_Myfirst());

  00072	48 8b c3	 mov	 rax, rbx
  00075	48 f7 e9	 imul	 rcx
  00078	33 c9		 xor	 ecx, ecx
  0007a	48 c1 fa 02	 sar	 rdx, 2
  0007e	48 8b c2	 mov	 rax, rdx
  00081	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00085	48 03 d0	 add	 rdx, rax

; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00088	48 8b c2	 mov	 rax, rdx
  0008b	48 d1 e8	 shr	 rax, 1
  0008e	4c 2b d0	 sub	 r10, rax
  00091	48 03 c2	 add	 rax, rdx
  00094	4c 3b d2	 cmp	 r10, rdx
  00097	48 0f 43 c8	 cmovae	 rcx, rax
  0009b	49 3b c8	 cmp	 rcx, r8
  0009e	4c 0f 43 c1	 cmovae	 r8, rcx

; 1630 : 				_Xlen();
; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

  000a2	49 8b c9	 mov	 rcx, r9
  000a5	49 8b d0	 mov	 rdx, r8

; 1632 : 			}
; 1633 : 		}

  000a8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ac	5b		 pop	 rbx

; 1630 : 				_Xlen();
; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

  000ad	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z ; std::vector<Row,std::allocator<Row> >::_Reallocate
$LN2@Reserve:

; 1632 : 			}
; 1633 : 		}

  000b2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b6	5b		 pop	 rbx
  000b7	c3		 ret	 0
$LN134@Reserve:

; 1765 : 		_Xlength_error("vector<T> too long");

  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  000bf	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  000c4	cc		 int	 3
$LN133@Reserve:
?_Reserve@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z ENDP ; std::vector<Row,std::allocator<Row> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBA_NPEBURow@@@Z
_TEXT	SEGMENT
this$ = 8
_Ptr$ = 16
?_Inside@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBA_NPEBURow@@@Z PROC ; std::vector<Row,std::allocator<Row> >::_Inside, COMDAT

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

  00000	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  00004	73 08		 jae	 SHORT $LN3@Inside
  00006	48 39 11	 cmp	 QWORD PTR [rcx], rdx
  00009	77 03		 ja	 SHORT $LN3@Inside
  0000b	b0 01		 mov	 al, 1

; 1598 : 		}

  0000d	c3		 ret	 0
$LN3@Inside:

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

  0000e	32 c0		 xor	 al, al

; 1598 : 		}

  00010	c3		 ret	 0
?_Inside@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBA_NPEBURow@@@Z ENDP ; std::vector<Row,std::allocator<Row> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT

; 534  : 			}

  00000	c2 00 00	 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==, COMDAT

; 220  : 		{	// test for iterator equality

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00006	0f 94 c0	 sete	 al

; 221  : 		_Compat(_Right);
; 222  : 		return (_Ptr == _Right._Ptr);
; 223  : 		}

  00009	c3		 ret	 0
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 8
_Parg$ = 16
_Pstring$dead$ = 24
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 48   : 		: _Ptr(_Parg)

  00000	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 50   : 		this->_Adopt(_Pstring);
; 51   : 		}

  00003	48 8b c1	 mov	 rax, rcx
  00006	c3		 ret	 0
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00000	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16
  00005	72 04		 jb	 SHORT $LN3@Myptr
  00007	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  0000a	c3		 ret	 0
$LN3@Myptr:

; 521  : 		return (this->_BUF_SIZE <= _Myres

  0000b	48 8b c1	 mov	 rax, rcx

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  0000e	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEBDAEBD@Z
_TEXT	SEGMENT
this$dead$ = 8
_Val$ = 16
?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEBDAEBD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::address, COMDAT

; 931  : 		return (pointer_traits<const_pointer>::pointer_to(_Val));

  00000	48 8b c2	 mov	 rax, rdx

; 932  : 		}

  00003	c3		 ret	 0
?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEBDAEBD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::address
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ
_TEXT	SEGMENT
this$ = 8
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT

; 729  : 		return (_Get_data()._Mysize);

  00000	48 8d 41 10	 lea	 rax, QWORD PTR [rcx+16]

; 730  : 		}

  00004	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT

; 707  : 		return (_Mypair._Get_second());

  00000	48 8b c1	 mov	 rax, rcx

; 708  : 		}

  00003	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT

; 697  : 		return (_Mypair._Get_first());

  00000	48 8b c1	 mov	 rax, rcx

; 698  : 		}

  00003	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT

; 692  : 		return (_Mypair._Get_first());

  00000	48 8b c1	 mov	 rax, rcx

; 693  : 		}

  00003	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT

; 496  : 		_Mysize(0),

  00000	33 c0		 xor	 eax, eax
  00002	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 497  : 		_Myres(0)

  00006	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 590  : 		}

  0000a	48 8b c1	 mov	 rax, rcx
  0000d	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00000	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16
  00005	72 04		 jb	 SHORT $LN11@Myptr

; 583  : 		return (_Get_data()._Myptr());

  00007	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 584  : 		}

  0000a	c3		 ret	 0
$LN11@Myptr:

; 583  : 		return (_Get_data()._Myptr());

  0000b	48 8b c1	 mov	 rax, rcx

; 584  : 		}

  0000e	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 8
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00000	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16
  00005	72 04		 jb	 SHORT $LN11@Myptr

; 578  : 		return (_Get_data()._Myptr());

  00007	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 579  : 		}

  0000a	c3		 ret	 0
$LN11@Myptr:

; 578  : 		return (_Get_data()._Myptr());

  0000b	48 8b c1	 mov	 rax, rcx

; 579  : 		}

  0000e	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z
_TEXT	SEGMENT
this$ = 48
_Built$ = 56
_Newsize$ = 64
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT

; 2248 : 		{	// initialize buffer, deallocating any storage

$LN120:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
  00012	48 8b d9	 mov	 rbx, rcx

; 2249 : 		if (!_Built)

  00015	84 d2		 test	 dl, dl
  00017	74 4f		 je	 SHORT $LN84@Tidy

; 2250 : 			;
; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00019	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16
  0001e	72 48		 jb	 SHORT $LN84@Tidy

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;

  00020	48 8b 39	 mov	 rdi, QWORD PTR [rcx]

; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)

  00023	4d 85 c0	 test	 r8, r8
  00026	74 08		 je	 SHORT $LN57@Tidy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

  00028	48 8b d7	 mov	 rdx, rdi
  0002b	e8 00 00 00 00	 call	 memcpy
$LN57@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  00030	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00034	48 ff c0	 inc	 rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00037	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  0003d	72 21		 jb	 SHORT $LN79@Tidy

; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0003f	40 f6 c7 1f	 test	 dil, 31
  00043	75 4d		 jne	 SHORT $LN115@Tidy

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00045	48 8b 47 f8	 mov	 rax, QWORD PTR [rdi-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00049	48 3b c7	 cmp	 rax, rdi
  0004c	73 4a		 jae	 SHORT $LN117@Tidy

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0004e	48 2b f8	 sub	 rdi, rax
  00051	48 83 ff 08	 cmp	 rdi, 8
  00055	72 47		 jb	 SHORT $LN118@Tidy

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00057	48 83 ff 27	 cmp	 rdi, 39			; 00000027H
  0005b	77 47		 ja	 SHORT $LN119@Tidy

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0005d	48 8b f8	 mov	 rdi, rax
$LN79@Tidy:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00060	48 8b cf	 mov	 rcx, rdi
  00063	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN84@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  00068	48 c7 43 18 0f
	00 00 00	 mov	 QWORD PTR [rbx+24], 15

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00070	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00075	48 89 73 10	 mov	 QWORD PTR [rbx+16], rsi

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00079	72 03		 jb	 SHORT $LN107@Tidy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  0007b	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
$LN107@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0007e	c6 04 33 00	 mov	 BYTE PTR [rbx+rsi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2262 : 		}

  00082	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00087	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00090	5f		 pop	 rdi
  00091	c3		 ret	 0
$LN115@Tidy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00092	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00097	cc		 int	 3
$LN117@Tidy:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00098	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0009d	cc		 int	 3
$LN118@Tidy:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0009e	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  000a3	cc		 int	 3
$LN119@Tidy:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  000a4	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  000a9	cc		 int	 3
$LN114@Tidy:
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z
_TEXT	SEGMENT
this$ = 8
_Ptr$ = 16
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

  00000	80 3a 00	 cmp	 BYTE PTR [rdx], 0
  00003	75 08		 jne	 SHORT $LN5@assign
  00005	45 33 c0	 xor	 r8d, r8d
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00008	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN5@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 523  : 		return (*_First == 0 ? 0

  0000d	49 83 c8 ff	 or	 r8, -1
$LL7@assign:
  00011	49 ff c0	 inc	 r8
  00014	42 80 3c 02 00	 cmp	 BYTE PTR [rdx+r8], 0
  00019	75 f6		 jne	 SHORT $LL7@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  0001b	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 1165 : 		{	// assign [_Ptr, _Ptr + _Count)

$LN189:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  00018	48 85 d2	 test	 rdx, rdx
  0001b	74 5a		 je	 SHORT $LN2@assign

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0001d	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]
  00021	48 83 fa 10	 cmp	 rdx, 16
  00025	72 05		 jb	 SHORT $LN20@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00027	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0002a	eb 03		 jmp	 SHORT $LN21@assign
$LN20@assign:
  0002c	48 8b c3	 mov	 rax, rbx
$LN21@assign:

; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  0002f	48 3b f0	 cmp	 rsi, rax
  00032	72 43		 jb	 SHORT $LN2@assign

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00034	48 83 fa 10	 cmp	 rdx, 16
  00038	72 03		 jb	 SHORT $LN35@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  0003a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
$LN35@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  0003d	48 03 4b 10	 add	 rcx, QWORD PTR [rbx+16]
  00041	48 3b ce	 cmp	 rcx, rsi
  00044	76 31		 jbe	 SHORT $LN2@assign

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00046	48 83 fa 10	 cmp	 rdx, 16
  0004a	72 05		 jb	 SHORT $LN57@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  0004c	48 8b 03	 mov	 rax, QWORD PTR [rbx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0004f	eb 03		 jmp	 SHORT $LN58@assign
$LN57@assign:
  00051	48 8b c3	 mov	 rax, rbx
$LN58@assign:

; 1166 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1167 : 		if (_Inside(_Ptr))
; 1168 : 			return (assign(*this,

  00054	48 2b f0	 sub	 rsi, rax
  00057	4c 8b cf	 mov	 r9, rdi
  0005a	4c 8b c6	 mov	 r8, rsi
  0005d	48 8b d3	 mov	 rdx, rbx
  00060	48 8b cb	 mov	 rcx, rbx

; 1177 : 		}

  00063	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00068	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0006d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00071	5f		 pop	 rdi

; 1166 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1167 : 		if (_Inside(_Ptr))
; 1168 : 			return (assign(*this,

  00072	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@assign:

; 2225 : 		if (max_size() < _Newsize)

  00077	48 83 ff fe	 cmp	 rdi, -2
  0007b	0f 87 a2 00 00
	00		 ja	 $LN187@assign

; 2226 : 			_Xlen();	// result too long
; 2227 : 		if (this->_Myres() < _Newsize)

  00081	48 39 7b 18	 cmp	 QWORD PTR [rbx+24], rdi
  00085	73 20		 jae	 SHORT $LN63@assign

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  00087	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  0008b	48 8b d7	 mov	 rdx, rdi
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2233 : 			_Eos(0);	// new size is zero, just null terminate
; 2234 : 		return (0 < _Newsize);	// return true only if more work to do

  00096	48 85 ff	 test	 rdi, rdi

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

  00099	74 75		 je	 SHORT $LN181@assign
$LN186@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0009b	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16
  000a0	72 44		 jb	 SHORT $LN158@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  000a2	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000a5	eb 42		 jmp	 SHORT $LN159@assign
$LN63@assign:

; 2232 : 		else if (_Newsize == 0)

  000a7	48 85 ff	 test	 rdi, rdi
  000aa	75 ef		 jne	 SHORT $LN186@assign

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000ac	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  000b1	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000b5	72 19		 jb	 SHORT $LN140@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  000b7	48 8b 03	 mov	 rax, QWORD PTR [rbx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000ba	40 88 38	 mov	 BYTE PTR [rax], dil
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1176 : 		return (*this);

  000bd	48 8b c3	 mov	 rax, rbx

; 1177 : 		}

  000c0	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c5	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000ca	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ce	5f		 pop	 rdi
  000cf	c3		 ret	 0
$LN140@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000d0	48 8b c3	 mov	 rax, rbx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000d3	c6 03 00	 mov	 BYTE PTR [rbx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1177 : 		}

  000d6	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000db	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000e0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000e4	5f		 pop	 rdi
  000e5	c3		 ret	 0
$LN158@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000e6	48 8b cb	 mov	 rcx, rbx
$LN159@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

  000e9	48 85 ff	 test	 rdi, rdi
  000ec	74 0b		 je	 SHORT $LN165@assign
  000ee	4c 8b c7	 mov	 r8, rdi
  000f1	48 8b d6	 mov	 rdx, rsi
  000f4	e8 00 00 00 00	 call	 memcpy
$LN165@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000f9	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  000fe	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00102	72 05		 jb	 SHORT $LN176@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00104	48 8b 03	 mov	 rax, QWORD PTR [rbx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00107	eb 03		 jmp	 SHORT $LN177@assign
$LN176@assign:
  00109	48 8b c3	 mov	 rax, rbx
$LN177@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0010c	c6 04 38 00	 mov	 BYTE PTR [rax+rdi], 0
$LN181@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1177 : 		}

  00110	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00115	48 8b c3	 mov	 rax, rbx
  00118	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0011d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00121	5f		 pop	 rdi
  00122	c3		 ret	 0
$LN187@assign:

; 2266 : 		_Xlength_error("string too long");

  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0012a	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  0012f	cc		 int	 3
$LN184@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
_Roff$ = 64
_Count$ = 72
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 1149 : 		{	// assign _Right [_Roff, _Roff + _Count)

$LN212:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2271 : 		if (this->_Mysize() < _Off)

  00015	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]

; 1149 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00019	49 8b f9	 mov	 rdi, r9
  0001c	4d 8b f0	 mov	 r14, r8
  0001f	48 8b f2	 mov	 rsi, rdx
  00022	48 8b d9	 mov	 rbx, rcx

; 2271 : 		if (this->_Mysize() < _Off)

  00025	49 3b c0	 cmp	 rax, r8
  00028	0f 82 d7 00 00
	00		 jb	 $LN208@assign

; 2112 : 		const size_type _Max_effective_size = this->_Mysize() - _Off;

  0002e	49 2b c0	 sub	 rax, r8

; 2113 : 		if (_Size <= _Max_effective_size)

  00031	4c 3b c8	 cmp	 r9, rax
  00034	48 0f 47 f8	 cmova	 rdi, rax

; 1150 : 		_Right._Check_offset(_Roff);
; 1151 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
; 1152 : 
; 1153 : 		if (this == &_Right)

  00038	48 3b ca	 cmp	 rcx, rdx
  0003b	75 2d		 jne	 SHORT $LN2@assign

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  0003d	49 8d 04 38	 lea	 rax, QWORD PTR [r8+rdi]

; 2271 : 		if (this->_Mysize() < _Off)

  00041	48 39 41 10	 cmp	 QWORD PTR [rcx+16], rax
  00045	0f 82 c7 00 00
	00		 jb	 $LN210@assign

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  0004b	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0004f	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16
  00054	72 03		 jb	 SHORT $LN64@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00056	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
$LN64@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00059	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  0005d	48 8b cb	 mov	 rcx, rbx
  00060	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1155 : 		else if (_Grow(_Count))

  00065	e9 82 00 00 00	 jmp	 $LN203@assign
$LN2@assign:

; 2225 : 		if (max_size() < _Newsize)

  0006a	48 83 ff fe	 cmp	 rdi, -2
  0006e	0f 87 ab 00 00
	00		 ja	 $LN211@assign

; 2226 : 			_Xlen();	// result too long
; 2227 : 		if (this->_Myres() < _Newsize)

  00074	48 39 79 18	 cmp	 QWORD PTR [rcx+24], rdi
  00078	73 27		 jae	 SHORT $LN72@assign

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  0007a	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
  0007e	48 8b d7	 mov	 rdx, rdi
  00081	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do

  00086	48 85 ff	 test	 rdi, rdi

; 1155 : 		else if (_Grow(_Count))

  00089	74 61		 je	 SHORT $LN203@assign
$LN207@assign:

; 521  : 		return (this->_BUF_SIZE <= _Myres

  0008b	48 83 7e 18 10	 cmp	 QWORD PTR [rsi+24], 16
  00090	72 03		 jb	 SHORT $LN166@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00092	48 8b 36	 mov	 rsi, QWORD PTR [rsi]
$LN166@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00095	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16
  0009a	72 25		 jb	 SHORT $LN180@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  0009c	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0009f	eb 23		 jmp	 SHORT $LN181@assign
$LN72@assign:

; 2232 : 		else if (_Newsize == 0)

  000a1	48 85 ff	 test	 rdi, rdi
  000a4	75 e5		 jne	 SHORT $LN207@assign

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000a6	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  000ab	48 89 79 10	 mov	 QWORD PTR [rcx+16], rdi

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000af	72 08		 jb	 SHORT $LN149@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  000b1	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000b4	40 88 38	 mov	 BYTE PTR [rax], dil
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do

  000b7	eb 33		 jmp	 SHORT $LN203@assign
$LN149@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000b9	48 8b c3	 mov	 rax, rbx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000bc	c6 03 00	 mov	 BYTE PTR [rbx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do

  000bf	eb 2b		 jmp	 SHORT $LN203@assign
$LN180@assign:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000c1	48 8b cb	 mov	 rcx, rbx
$LN181@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

  000c4	48 85 ff	 test	 rdi, rdi
  000c7	74 0c		 je	 SHORT $LN187@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1157 : 			_Traits::copy(this->_Myptr(),

  000c9	4a 8d 14 36	 lea	 rdx, QWORD PTR [rsi+r14]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

  000cd	4c 8b c7	 mov	 r8, rdi
  000d0	e8 00 00 00 00	 call	 memcpy
$LN187@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000d5	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  000da	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000de	72 05		 jb	 SHORT $LN198@assign
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  000e0	48 8b 03	 mov	 rax, QWORD PTR [rbx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000e3	eb 03		 jmp	 SHORT $LN199@assign
$LN198@assign:
  000e5	48 8b c3	 mov	 rax, rbx
$LN199@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000e8	c6 04 38 00	 mov	 BYTE PTR [rax+rdi], 0
$LN203@assign:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1162 : 		}

  000ec	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000f1	48 8b c3	 mov	 rax, rbx
  000f4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f9	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000fe	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00102	41 5e		 pop	 r14
  00104	c3		 ret	 0
$LN208@assign:

; 2283 : 		_Xout_of_range("invalid string position");

  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0010c	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
  00111	cc		 int	 3
$LN210@assign:
  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00119	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
  0011e	cc		 int	 3
$LN211@assign:

; 2266 : 		_Xlength_error("string too long");

  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00126	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  0012b	cc		 int	 3
$LN205@assign:
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PEBD@std@@SAPEBDAEBD@Z
_TEXT	SEGMENT
_Val$ = 8
?pointer_to@?$pointer_traits@PEBD@std@@SAPEBDAEBD@Z PROC ; std::pointer_traits<char const * __ptr64>::pointer_to, COMDAT

; 280  : 		return (_STD addressof(_Val));

  00000	48 8b c1	 mov	 rax, rcx

; 281  : 		}

  00003	c3		 ret	 0
?pointer_to@?$pointer_traits@PEBD@std@@SAPEBDAEBD@Z ENDP ; std::pointer_traits<char const * __ptr64>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z PROC ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deallocate, COMDAT

; 986  : 		{	// deallocate object at _Ptr, ignore size

$LN22:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00004	48 b8 ff ff ff
	ff ff ff ff 07	 mov	 rax, 576460752303423487	; 07ffffffffffffffH
  0000e	4c 3b c0	 cmp	 r8, rax
  00011	77 39		 ja	 SHORT $LN16@deallocate

; 95   : 	const size_t _User_size = _Count * _Sz;

  00013	49 c1 e0 05	 shl	 r8, 5

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00017	49 81 f8 00 10
	00 00		 cmp	 r8, 4096		; 00001000H
  0001e	72 20		 jb	 SHORT $LN7@deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00020	f6 c2 1f	 test	 dl, 31
  00023	75 2d		 jne	 SHORT $LN18@deallocate

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00025	48 8b 42 f8	 mov	 rax, QWORD PTR [rdx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00029	48 3b c2	 cmp	 rax, rdx
  0002c	73 2a		 jae	 SHORT $LN19@deallocate

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0002e	48 2b d0	 sub	 rdx, rax
  00031	48 83 fa 08	 cmp	 rdx, 8
  00035	72 27		 jb	 SHORT $LN20@deallocate

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00037	48 83 fa 27	 cmp	 rdx, 39			; 00000027H
  0003b	77 27		 ja	 SHORT $LN21@deallocate

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0003d	48 8b d0	 mov	 rdx, rax
$LN7@deallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00040	48 8b ca	 mov	 rcx, rdx

; 987  : 		_Mybase::deallocate(_Ptr, _Count);
; 988  : 		}

  00043	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 132  : 	::operator delete(_Ptr);

  00047	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
$LN16@deallocate:

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0004c	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00051	cc		 int	 3
$LN18@deallocate:

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00052	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00057	cc		 int	 3
$LN19@deallocate:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00058	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0005d	cc		 int	 3
$LN20@deallocate:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0005e	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00063	cc		 int	 3
$LN21@deallocate:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00064	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00069	cc		 int	 3
$LN15@deallocate:
?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend, COMDAT

; 663  : 		return (_Get_data()._Myend);

  00000	48 8d 41 10	 lea	 rax, QWORD PTR [rcx+16]

; 664  : 		}

  00004	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast, COMDAT

; 653  : 		return (_Get_data()._Mylast);

  00000	48 8d 41 08	 lea	 rax, QWORD PTR [rcx+8]

; 654  : 		}

  00004	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst, COMDAT

; 643  : 		return (_Get_data()._Myfirst);

  00000	48 8b c1	 mov	 rax, rcx

; 644  : 		}

  00003	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal, COMDAT

; 623  : 		return (_Mypair._Get_first());

  00000	48 8b c1	 mov	 rax, rcx

; 624  : 		}

  00003	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$dead$ = 8
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all, COMDAT

; 613  : 		_Get_data()._Orphan_all();
; 614  : 		}

  00000	c2 00 00	 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
this$dead$ = 8
_First$ = 16
_Last$ = 24
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT

; 1580 : 		{	// destroy [_First, _Last) using allocator

  00000	48 8b ca	 mov	 rcx, rdx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

  00003	49 8b d0	 mov	 rdx, r8
  00006	e9 00 00 00 00	 jmp	 ??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * __ptr64>
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@IEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_first, COMDAT

; 295  : 		return (*this);

  00000	48 8b c1	 mov	 rax, rcx

; 296  : 		}

  00003	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<Row> >::deallocate, COMDAT

; 986  : 		{	// deallocate object at _Ptr, ignore size

$LN22:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00004	48 b8 84 f6 12
	da 4b 68 2f 01	 mov	 rax, 85401592933840516	; 012f684bda12f684H
  0000e	4c 3b c0	 cmp	 r8, rax
  00011	77 3b		 ja	 SHORT $LN16@deallocate

; 95   : 	const size_t _User_size = _Count * _Sz;

  00013	49 69 c0 d8 00
	00 00		 imul	 rax, r8, 216		; 000000d8H

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  00020	72 20		 jb	 SHORT $LN7@deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	f6 c2 1f	 test	 dl, 31
  00025	75 2d		 jne	 SHORT $LN18@deallocate

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00027	48 8b 42 f8	 mov	 rax, QWORD PTR [rdx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0002b	48 3b c2	 cmp	 rax, rdx
  0002e	73 2a		 jae	 SHORT $LN19@deallocate

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00030	48 2b d0	 sub	 rdx, rax
  00033	48 83 fa 08	 cmp	 rdx, 8
  00037	72 27		 jb	 SHORT $LN20@deallocate

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00039	48 83 fa 27	 cmp	 rdx, 39			; 00000027H
  0003d	77 27		 ja	 SHORT $LN21@deallocate

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0003f	48 8b d0	 mov	 rdx, rax
$LN7@deallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00042	48 8b ca	 mov	 rcx, rdx

; 987  : 		_Mybase::deallocate(_Ptr, _Count);
; 988  : 		}

  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 132  : 	::operator delete(_Ptr);

  00049	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
$LN16@deallocate:

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0004e	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00053	cc		 int	 3
$LN18@deallocate:

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00054	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00059	cc		 int	 3
$LN19@deallocate:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0005a	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0005f	cc		 int	 3
$LN20@deallocate:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00060	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00065	cc		 int	 3
$LN21@deallocate:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00066	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0006b	cc		 int	 3
$LN15@deallocate:
?deallocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<Row> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ
_TEXT	SEGMENT
this$ = 8
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Mylast, COMDAT

; 658  : 		return (_Get_data()._Mylast);

  00000	48 8d 41 08	 lea	 rax, QWORD PTR [rcx+8]

; 659  : 		}

  00004	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ
_TEXT	SEGMENT
this$ = 8
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myfirst, COMDAT

; 648  : 		return (_Get_data()._Myfirst);

  00000	48 8b c1	 mov	 rax, rcx

; 649  : 		}

  00003	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Get_data, COMDAT

; 633  : 		return (_Mypair._Get_second());

  00000	48 8b c1	 mov	 rax, rcx

; 634  : 		}

  00003	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$dead$ = 8
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Orphan_all, COMDAT

; 613  : 		_Get_data()._Orphan_all();
; 614  : 		}

  00000	c2 00 00	 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEAAXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBAXXZ
_TEXT	SEGMENT
this$dead$ = 48
?_Xlen@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBAXXZ PROC ; std::vector<Row,std::allocator<Row> >::_Xlen, COMDAT

; 1764 : 		{	// report a length_error

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1765 : 		_Xlength_error("vector<T> too long");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0000b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  00010	cc		 int	 3
$LN3@Xlen:
?_Xlen@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBAXXZ ENDP ; std::vector<Row,std::allocator<Row> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z PROC ; std::vector<Row,std::allocator<Row> >::_Reallocate, COMDAT

; 1601 : 		{	// move to array of exactly _Count elements

$LN213:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	48 8b f2	 mov	 rsi, rdx
  00018	48 8b f9	 mov	 rdi, rcx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 51   : 	if (_Count == 0)

  0001b	49 be 84 f6 12
	da 4b 68 2f 01	 mov	 r14, 85401592933840516	; 012f684bda12f684H
  00025	48 85 d2	 test	 rdx, rdx
  00028	75 04		 jne	 SHORT $LN20@Reallocate

; 52   : 		return (_Ptr);

  0002a	33 db		 xor	 ebx, ebx
  0002c	eb 44		 jmp	 SHORT $LN26@Reallocate
$LN20@Reallocate:

; 53   : 
; 54   : 	// check overflow of multiply
; 55   : 	if ((size_t)(-1) / _Sz < _Count)

  0002e	49 3b f6	 cmp	 rsi, r14
  00031	0f 87 14 01 00
	00		 ja	 $LN205@Reallocate

; 57   : 	const size_t _User_size = _Count * _Sz;

  00037	48 69 ce d8 00
	00 00		 imul	 rcx, rsi, 216		; 000000d8H

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0003e	48 81 f9 00 10
	00 00		 cmp	 rcx, 4096		; 00001000H
  00045	72 23		 jb	 SHORT $LN22@Reallocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00047	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 66   : 		if (_Block_size <= _User_size)

  0004b	48 3b c1	 cmp	 rax, rcx
  0004e	0f 86 fd 00 00
	00		 jbe	 $LN207@Reallocate

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);
; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0005c	48 8d 58 27	 lea	 rbx, QWORD PTR [rax+39]
  00060	48 83 e3 e0	 and	 rbx, -32		; ffffffffffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00064	48 89 43 f8	 mov	 QWORD PTR [rbx-8], rax

; 74   : 
; 75   :  #ifdef _DEBUG
; 76   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 77   :  #endif /* _DEBUG */
; 78   : 		}
; 79   : 	else

  00068	eb 08		 jmp	 SHORT $LN26@Reallocate
$LN22@Reallocate:

; 80   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 81   : 
; 82   : 		{	// allocate normal block
; 83   : 		_Ptr = ::operator new(_User_size);

  0006a	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0006f	48 8b d8	 mov	 rbx, rax
$LN26@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2302 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);

  00072	48 8b 17	 mov	 rdx, QWORD PTR [rdi]

; 2303 : 	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
; 2304 : 	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
; 2305 : 	const size_t _Count = _Last_ch - _First_ch;
; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00075	48 8b cb	 mov	 rcx, rbx
  00078	4c 8b 47 08	 mov	 r8, QWORD PTR [rdi+8]
  0007c	4c 2b c2	 sub	 r8, rdx
  0007f	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00084	e8 00 00 00 00	 call	 memmove
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

  00089	4c 8b 07	 mov	 r8, QWORD PTR [rdi]
  0008c	49 b9 13 da 4b
	68 2f a1 bd 04	 mov	 r9, 341606371735362067	; 04bda12f684bda13H
  00096	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  0009a	49 8b c1	 mov	 rax, r9
  0009d	49 2b c8	 sub	 rcx, r8
  000a0	48 f7 e9	 imul	 rcx
  000a3	48 8b ea	 mov	 rbp, rdx
  000a6	48 c1 fd 02	 sar	 rbp, 2
  000aa	48 8b cd	 mov	 rcx, rbp
  000ad	48 c1 e9 3f	 shr	 rcx, 63			; 0000003fH
  000b1	48 03 e9	 add	 rbp, rcx

; 1602 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1603 : 
; 1604 : 		_TRY_BEGIN
; 1605 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);
; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;
; 1609 : 		_CATCH_END
; 1610 : 
; 1611 : 		size_type _Size = size();
; 1612 : 		if (this->_Myfirst() != pointer())

  000b4	4d 85 c0	 test	 r8, r8
  000b7	74 58		 je	 SHORT $LN173@Reallocate

; 1613 : 			{	// destroy and deallocate old array
; 1614 : 			_Destroy(this->_Myfirst(), this->_Mylast());
; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

  000b9	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  000bd	49 8b c1	 mov	 rax, r9
  000c0	49 2b c8	 sub	 rcx, r8
  000c3	48 f7 e9	 imul	 rcx
  000c6	48 c1 fa 02	 sar	 rdx, 2
  000ca	48 8b c2	 mov	 rax, rdx
  000cd	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  000d1	48 03 d0	 add	 rdx, rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  000d4	49 3b d6	 cmp	 rdx, r14
  000d7	77 7e		 ja	 SHORT $LN208@Reallocate

; 95   : 	const size_t _User_size = _Count * _Sz;

  000d9	48 69 c2 d8 00
	00 00		 imul	 rax, rdx, 216		; 000000d8H

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  000e0	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  000e6	72 21		 jb	 SHORT $LN168@Reallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  000e8	41 f6 c0 1f	 test	 r8b, 31
  000ec	75 6f		 jne	 SHORT $LN209@Reallocate

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  000ee	49 8b 40 f8	 mov	 rax, QWORD PTR [r8-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  000f2	49 3b c0	 cmp	 rax, r8
  000f5	73 6c		 jae	 SHORT $LN210@Reallocate

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  000f7	4c 2b c0	 sub	 r8, rax
  000fa	49 83 f8 08	 cmp	 r8, 8
  000fe	72 69		 jb	 SHORT $LN211@Reallocate

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00100	49 83 f8 27	 cmp	 r8, 39			; 00000027H
  00104	77 69		 ja	 SHORT $LN212@Reallocate

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00106	4c 8b c0	 mov	 r8, rax
$LN168@Reallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00109	49 8b c8	 mov	 rcx, r8
  0010c	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN173@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1620 : 		this->_Myend() = _Ptr + _Count;

  00111	48 69 c6 d8 00
	00 00		 imul	 rax, rsi, 216		; 000000d8H

; 1623 : 		}

  00118	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0011d	48 03 c3	 add	 rax, rbx
  00120	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax
  00124	48 69 c5 d8 00
	00 00		 imul	 rax, rbp, 216		; 000000d8H
  0012b	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  00130	48 03 c3	 add	 rax, rbx
  00133	48 89 47 08	 mov	 QWORD PTR [rdi+8], rax
  00137	48 89 1f	 mov	 QWORD PTR [rdi], rbx
  0013a	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0013f	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00144	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00148	41 5e		 pop	 r14
  0014a	c3		 ret	 0
$LN205@Reallocate:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 56   : 		_Xbad_alloc();	// report no memory

  0014b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00150	cc		 int	 3
$LN207@Reallocate:

; 67   : 			_Xbad_alloc();	// report no memory

  00151	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00156	cc		 int	 3
$LN208@Reallocate:

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00157	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0015c	cc		 int	 3
$LN209@Reallocate:

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0015d	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00162	cc		 int	 3
$LN210@Reallocate:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00163	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00168	cc		 int	 3
$LN211@Reallocate:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00169	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0016e	cc		 int	 3
$LN212@Reallocate:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0016f	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00174	cc		 int	 3
$LN204@Reallocate:
?_Reallocate@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAX_K@Z ENDP ; std::vector<Row,std::allocator<Row> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBA_K_K@Z
_TEXT	SEGMENT
this$ = 8
_Count$ = 16
?_Grow_to@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBA_K_K@Z PROC ; std::vector<Row,std::allocator<Row> >::_Grow_to, COMDAT

; 1043 : 		return (this->_Myend() - this->_Myfirst());

  00000	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]

; 1585 : 		{	// grow by 50% or at least to _Count

  00004	4c 8b ca	 mov	 r9, rdx

; 1043 : 		return (this->_Myend() - this->_Myfirst());

  00007	4c 2b 01	 sub	 r8, QWORD PTR [rcx]
  0000a	48 b8 13 da 4b
	68 2f a1 bd 04	 mov	 rax, 341606371735362067	; 04bda12f684bda13H
  00014	49 f7 e8	 imul	 r8

; 1586 : 		size_type _Capacity = capacity();
; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  00017	49 b8 84 f6 12
	da 4b 68 2f 01	 mov	 r8, 85401592933840516	; 012f684bda12f684H

; 1043 : 		return (this->_Myend() - this->_Myfirst());

  00021	48 c1 fa 02	 sar	 rdx, 2
  00025	48 8b c2	 mov	 rax, rdx
  00028	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0002c	48 03 d0	 add	 rdx, rax

; 1586 : 		size_type _Capacity = capacity();
; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0002f	48 8b c2	 mov	 rax, rdx
  00032	48 d1 e8	 shr	 rax, 1
  00035	4c 2b c0	 sub	 r8, rax
  00038	48 8d 0c 10	 lea	 rcx, QWORD PTR [rax+rdx]
  0003c	33 c0		 xor	 eax, eax
  0003e	4c 3b c2	 cmp	 r8, rdx
  00041	48 0f 43 c1	 cmovae	 rax, rcx

; 1589 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1590 : 		if (_Capacity < _Count)

  00045	49 3b c1	 cmp	 rax, r9
  00048	49 0f 42 c1	 cmovb	 rax, r9

; 1591 : 			_Capacity = _Count;
; 1592 : 		return (_Capacity);
; 1593 : 		}

  0004c	c3		 ret	 0
?_Grow_to@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEBA_K_K@Z ENDP ; std::vector<Row,std::allocator<Row> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXPEAURow@@0@Z
_TEXT	SEGMENT
this$dead$ = 8
_First$dead$ = 16
_Last$dead$ = 24
?_Destroy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXPEAURow@@0@Z PROC ; std::vector<Row,std::allocator<Row> >::_Destroy, COMDAT

; 1581 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1582 : 		}

  00000	c2 00 00	 ret	 0
?_Destroy@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAXPEAURow@@0@Z ENDP ; std::vector<Row,std::allocator<Row> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ PROC ; std::vector<Row,std::allocator<Row> >::max_size, COMDAT

; 1185 : 		return (this->_Getal().max_size());

  00000	48 b8 84 f6 12
	da 4b 68 2f 01	 mov	 rax, 85401592933840516	; 012f684bda12f684H

; 1186 : 		}

  0000a	c3		 ret	 0
?max_size@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<Row,std::allocator<Row> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?size@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ PROC ; std::vector<Row,std::allocator<Row> >::size, COMDAT

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

  00000	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00004	48 b8 13 da 4b
	68 2f a1 bd 04	 mov	 rax, 341606371735362067	; 04bda12f684bda13H
  0000e	48 2b 11	 sub	 rdx, QWORD PTR [rcx]
  00011	48 f7 ea	 imul	 rdx
  00014	48 c1 fa 02	 sar	 rdx, 2
  00018	48 8b c2	 mov	 rax, rdx
  0001b	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0001f	48 03 c2	 add	 rax, rdx

; 1181 : 		}

  00022	c3		 ret	 0
?size@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<Row,std::allocator<Row> >::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?_Unused_capacity@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ PROC ; std::vector<Row,std::allocator<Row> >::_Unused_capacity, COMDAT

; 1048 : 		return (this->_Myend() - this->_Mylast());

  00000	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  00004	48 b8 13 da 4b
	68 2f a1 bd 04	 mov	 rax, 341606371735362067	; 04bda12f684bda13H
  0000e	48 2b 51 08	 sub	 rdx, QWORD PTR [rcx+8]
  00012	48 f7 ea	 imul	 rdx
  00015	48 c1 fa 02	 sar	 rdx, 2
  00019	48 8b c2	 mov	 rax, rdx
  0001c	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00020	48 03 c2	 add	 rax, rdx

; 1049 : 		}

  00023	c3		 ret	 0
?_Unused_capacity@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<Row,std::allocator<Row> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT

; 320  : 		return (_Myval2);

  00000	48 8b c1	 mov	 rax, rcx

; 321  : 		}

  00003	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 300  : 		return (*this);

  00000	48 8b c1	 mov	 rax, rcx

; 301  : 		}

  00003	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 295  : 		return (*this);

  00000	48 8b c1	 mov	 rax, rcx

; 296  : 		}

  00003	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAXAEBV12@@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAXAEBV12@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat, COMDAT

; 270  : 		}

  00000	c2 00 00	 ret	 0
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAXAEBV12@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 8
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00000	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16
  00005	72 04		 jb	 SHORT $LN3@Myptr
  00007	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  0000a	c3		 ret	 0
$LN3@Myptr:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0000b	48 8b c1	 mov	 rax, rcx

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  0000e	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT

; 986  : 		{	// deallocate object at _Ptr, ignore size

$LN21:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00004	49 81 f8 00 10
	00 00		 cmp	 r8, 4096		; 00001000H
  0000b	72 20		 jb	 SHORT $LN7@deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0000d	f6 c2 1f	 test	 dl, 31
  00010	75 27		 jne	 SHORT $LN16@deallocate

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00012	48 8b 42 f8	 mov	 rax, QWORD PTR [rdx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00016	48 3b c2	 cmp	 rax, rdx
  00019	73 24		 jae	 SHORT $LN18@deallocate

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0001b	48 2b d0	 sub	 rdx, rax
  0001e	48 83 fa 08	 cmp	 rdx, 8
  00022	72 21		 jb	 SHORT $LN19@deallocate

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00024	48 83 fa 27	 cmp	 rdx, 39			; 00000027H
  00028	77 21		 ja	 SHORT $LN20@deallocate

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002a	48 8b d0	 mov	 rdx, rax
$LN7@deallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  0002d	48 8b ca	 mov	 rcx, rdx

; 987  : 		_Mybase::deallocate(_Ptr, _Count);
; 988  : 		}

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 132  : 	::operator delete(_Ptr);

  00034	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
$LN16@deallocate:

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00039	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0003e	cc		 int	 3
$LN18@deallocate:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0003f	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00044	cc		 int	 3
$LN19@deallocate:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00045	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0004a	cc		 int	 3
$LN20@deallocate:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0004b	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00050	cc		 int	 3
$LN15@deallocate:
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ
_TEXT	SEGMENT
this$ = 8
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres, COMDAT

; 734  : 		return (_Get_data()._Myres);

  00000	48 8d 41 18	 lea	 rax, QWORD PTR [rcx+24]

; 735  : 		}

  00004	c3		 ret	 0
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ
_TEXT	SEGMENT
this$ = 8
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT

; 724  : 		return (_Get_data()._Mysize);

  00000	48 8d 41 10	 lea	 rax, QWORD PTR [rcx+16]

; 725  : 		}

  00004	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx, COMDAT

; 714  : 		return (_Get_data()._Bx);

  00000	48 8b c1	 mov	 rax, rcx

; 715  : 		}

  00003	c3		 ret	 0
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT

; 702  : 		return (_Mypair._Get_second());

  00000	48 8b c1	 mov	 rax, rcx

; 703  : 		}

  00003	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset, COMDAT

; 2270 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

$LN19:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2271 : 		if (this->_Mysize() < _Off)

  00004	48 39 51 10	 cmp	 QWORD PTR [rcx+16], rdx
  00008	72 05		 jb	 SHORT $LN17@Check_offs

; 2272 : 			_Xran();
; 2273 : 		}

  0000a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000e	c3		 ret	 0
$LN17@Check_offs:

; 2283 : 		_Xout_of_range("invalid string position");

  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00016	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
  0001b	cc		 int	 3
$LN16@Check_offs:
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ
_TEXT	SEGMENT
this$dead$ = 48
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 2265 : 		{	// report a length_error

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2266 : 		_Xlength_error("string too long");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  0000b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  00010	cc		 int	 3
$LN3@Xlen:
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z
_TEXT	SEGMENT
this$ = 8
_Ptr$ = 16
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 35		 je	 SHORT $LN4@Inside

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00005	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00009	48 83 f8 10	 cmp	 rax, 16
  0000d	72 05		 jb	 SHORT $LN16@Inside
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  0000f	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00012	eb 03		 jmp	 SHORT $LN17@Inside
$LN16@Inside:
  00014	4c 8b c1	 mov	 r8, rcx
$LN17@Inside:

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  00017	49 3b d0	 cmp	 rdx, r8
  0001a	72 1e		 jb	 SHORT $LN4@Inside

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0001c	48 83 f8 10	 cmp	 rax, 16
  00020	72 05		 jb	 SHORT $LN30@Inside
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00022	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00025	eb 03		 jmp	 SHORT $LN31@Inside
$LN30@Inside:
  00027	4c 8b c1	 mov	 r8, rcx
$LN31@Inside:

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  0002a	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0002e	49 8d 0c 00	 lea	 rcx, QWORD PTR [r8+rax]
  00032	48 3b ca	 cmp	 rcx, rdx
  00035	76 03		 jbe	 SHORT $LN4@Inside

; 2242 : 		else
; 2243 : 			return (true);

  00037	b0 01		 mov	 al, 1

; 2244 : 		}

  00039	c3		 ret	 0
$LN4@Inside:

; 2241 : 			return (false);	// don't ask

  0003a	32 c0		 xor	 al, al

; 2244 : 		}

  0003c	c3		 ret	 0
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z
_TEXT	SEGMENT
this$ = 48
_Newsize$ = 56
_Trim$dead$ = 64
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT

; 2224 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

$LN91:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b da	 mov	 rbx, rdx

; 2225 : 		if (max_size() < _Newsize)

  00009	48 83 fa fe	 cmp	 rdx, -2
  0000d	77 3d		 ja	 SHORT $LN89@Grow

; 2226 : 			_Xlen();	// result too long
; 2227 : 		if (this->_Myres() < _Newsize)

  0000f	48 39 51 18	 cmp	 QWORD PTR [rcx+24], rdx
  00013	73 15		 jae	 SHORT $LN5@Grow

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  00015	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
  00019	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0001e	48 85 db	 test	 rbx, rbx
  00021	0f 95 c0	 setne	 al

; 2235 : 		}

  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5b		 pop	 rbx
  00029	c3		 ret	 0
$LN5@Grow:

; 2229 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2230 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2231 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2232 : 		else if (_Newsize == 0)

  0002a	48 85 db	 test	 rbx, rbx
  0002d	75 14		 jne	 SHORT $LN88@Grow

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0002f	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00034	48 89 59 10	 mov	 QWORD PTR [rcx+16], rbx

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00038	72 03		 jb	 SHORT $LN80@Grow
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  0003a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
$LN80@Grow:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0003d	c6 01 00	 mov	 BYTE PTR [rcx], 0
  00040	48 85 db	 test	 rbx, rbx
$LN88@Grow:
  00043	0f 95 c0	 setne	 al
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2235 : 		}

  00046	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004a	5b		 pop	 rbx
  0004b	c3		 ret	 0
$LN89@Grow:

; 2266 : 		_Xlength_error("string too long");

  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00053	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  00058	cc		 int	 3
$LN87@Grow:
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 8
_Newsize$ = 16
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00000	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16

; 2218 : 		auto& _Dx = this->_Get_data();
; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00005	48 89 51 10	 mov	 QWORD PTR [rcx+16], rdx

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00009	72 08		 jb	 SHORT $LN11@Eos
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  0000b	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0000e	c6 04 10 00	 mov	 BYTE PTR [rax+rdx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2220 : 		}

  00012	c3		 ret	 0
$LN11@Eos:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00013	c6 04 11 00	 mov	 BYTE PTR [rcx+rdx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2220 : 		}

  00017	c3		 ret	 0
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
_Size$ = 24
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size, COMDAT

; 2112 : 		const size_type _Max_effective_size = this->_Mysize() - _Off;

  00000	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00004	48 2b c2	 sub	 rax, rdx

; 2113 : 		if (_Size <= _Max_effective_size)

  00007	4c 3b c0	 cmp	 r8, rax
  0000a	49 0f 46 c0	 cmovbe	 rax, r8

; 2114 : 			return (_Size);
; 2115 : 		else
; 2116 : 			return (_Max_effective_size);
; 2117 : 		}

  0000e	c3		 ret	 0
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z
_TEXT	SEGMENT
this$ = 48
_Off$dead$ = 56
_Count$ = 64
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT

; 1347 : 		{	// erase elements [_Off, _Off + _Count)

$LN94:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1348 : 		_Check_offset(_Off);
; 1349 : 		if (this->_Mysize() - _Off <= _Count)

  0000a	48 8b 79 10	 mov	 rdi, QWORD PTR [rcx+16]
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	49 3b f8	 cmp	 rdi, r8
  00014	77 34		 ja	 SHORT $LN2@erase

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00016	48 c7 41 10 00
	00 00 00	 mov	 QWORD PTR [rcx+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0001e	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16
  00023	72 14		 jb	 SHORT $LN41@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00025	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00028	c6 00 00	 mov	 BYTE PTR [rax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1358 : 		return (*this);

  0002b	48 8b c1	 mov	 rax, rcx

; 1359 : 		}

  0002e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
$LN41@erase:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00039	48 8b c3	 mov	 rax, rbx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0003c	c6 03 00	 mov	 BYTE PTR [rbx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1359 : 		}

  0003f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00044	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00048	5f		 pop	 rdi
  00049	c3		 ret	 0
$LN2@erase:

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1351 : 		else if (0 < _Count)

  0004a	4d 85 c0	 test	 r8, r8
  0004d	74 42		 je	 SHORT $LN92@erase

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0004f	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16
  00054	72 03		 jb	 SHORT $LN59@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00056	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
$LN59@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1354 : 			size_type _Newsize = this->_Mysize() - _Count;

  00059	49 2b f8	 sub	 rdi, r8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

  0005c	74 0c		 je	 SHORT $LN74@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1355 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

  0005e	4a 8d 14 01	 lea	 rdx, QWORD PTR [rcx+r8]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 553  : 		return (_Count == 0 ? _First1

  00062	4c 8b c7	 mov	 r8, rdi
  00065	e8 00 00 00 00	 call	 memmove
$LN74@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0006a	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  0006f	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00073	72 15		 jb	 SHORT $LN85@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00075	48 8b 03	 mov	 rax, QWORD PTR [rbx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00078	c6 04 38 00	 mov	 BYTE PTR [rax+rdi], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1358 : 		return (*this);

  0007c	48 8b c3	 mov	 rax, rbx

; 1359 : 		}

  0007f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00084	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
$LN85@erase:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0008a	48 8b c3	 mov	 rax, rbx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0008d	c6 04 3b 00	 mov	 BYTE PTR [rbx+rdi], 0
$LN92@erase:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1358 : 		return (*this);

  00091	48 8b c3	 mov	 rax, rbx

; 1359 : 		}

  00094	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00099	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009d	5f		 pop	 rdi
  0009e	c3		 ret	 0
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT

; 1340 : 		{	// erase elements [_Off, ...)

$LN39:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2271 : 		if (this->_Mysize() < _Off)

  00004	48 39 51 10	 cmp	 QWORD PTR [rcx+16], rdx
  00008	72 26		 jb	 SHORT $LN37@erase

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  0000a	48 89 51 10	 mov	 QWORD PTR [rcx+16], rdx

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0000e	48 83 79 18 10	 cmp	 QWORD PTR [rcx+24], 16
  00013	72 0f		 jb	 SHORT $LN29@erase
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00015	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00018	c6 04 10 00	 mov	 BYTE PTR [rax+rdx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1343 : 		return (*this);

  0001c	48 8b c1	 mov	 rax, rcx

; 1344 : 		}

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
$LN29@erase:

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00024	48 8b c1	 mov	 rax, rcx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00027	c6 04 11 00	 mov	 BYTE PTR [rcx+rdx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 1344 : 		}

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
$LN37@erase:

; 2283 : 		_Xout_of_range("invalid string position");

  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00037	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
  0003c	cc		 int	 3
$LN36@erase:
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT

; 295  : 		return (*this);

  00000	48 8b c1	 mov	 rax, rcx

; 296  : 		}

  00003	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data, COMDAT

; 633  : 		return (_Mypair._Get_second());

  00000	48 8b c1	 mov	 rax, rcx

; 634  : 		}

  00003	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT

; 719  : 		{	// deallocate object at _Ptr

$LN19:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00004	48 b8 ff ff ff
	ff ff ff ff 07	 mov	 rax, 576460752303423487	; 07ffffffffffffffH
  0000e	4c 3b c0	 cmp	 r8, rax
  00011	77 39		 ja	 SHORT $LN13@deallocate

; 95   : 	const size_t _User_size = _Count * _Sz;

  00013	49 c1 e0 05	 shl	 r8, 5

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00017	49 81 f8 00 10
	00 00		 cmp	 r8, 4096		; 00001000H
  0001e	72 20		 jb	 SHORT $LN5@deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00020	f6 c2 1f	 test	 dl, 31
  00023	75 2d		 jne	 SHORT $LN15@deallocate

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00025	48 8b 42 f8	 mov	 rax, QWORD PTR [rdx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00029	48 3b c2	 cmp	 rax, rdx
  0002c	73 2a		 jae	 SHORT $LN16@deallocate

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0002e	48 2b d0	 sub	 rdx, rax
  00031	48 83 fa 08	 cmp	 rdx, 8
  00035	72 27		 jb	 SHORT $LN17@deallocate

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00037	48 83 fa 27	 cmp	 rdx, 39			; 00000027H
  0003b	77 27		 ja	 SHORT $LN18@deallocate

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0003d	48 8b d0	 mov	 rdx, rax
$LN5@deallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00040	48 8b ca	 mov	 rcx, rdx

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));
; 721  : 		}

  00043	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 132  : 	::operator delete(_Ptr);

  00047	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
$LN13@deallocate:

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0004c	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00051	cc		 int	 3
$LN15@deallocate:

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00052	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00057	cc		 int	 3
$LN16@deallocate:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00058	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0005d	cc		 int	 3
$LN17@deallocate:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0005e	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00063	cc		 int	 3
$LN18@deallocate:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00064	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00069	cc		 int	 3
$LN12@deallocate:
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@_K@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_second, COMDAT

; 315  : 		return (_Myval2);

  00000	48 8b c1	 mov	 rax, rcx

; 316  : 		}

  00003	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEBA_KU_Nil@2@@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
?max_size@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEBA_KU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<Row> >::max_size, COMDAT

; 1008 : 		return (_Mytraits::max_size(*this));

  00000	48 b8 84 f6 12
	da 4b 68 2f 01	 mov	 rax, 85401592933840516	; 012f684bda12f684H

; 1009 : 		}

  0000a	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEBA_KU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<Row> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAPEAURow@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAPEAURow@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<Row> >::allocate, COMDAT

; 975  : 		{	// allocate array of _Count elements

$LN20:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 51   : 	if (_Count == 0)

  00004	48 85 d2	 test	 rdx, rdx
  00007	75 09		 jne	 SHORT $LN6@allocate

; 52   : 		return (_Ptr);

  00009	33 c9		 xor	 ecx, ecx

; 976  : 		return (_Mybase::allocate(_Count));

  0000b	8b c1		 mov	 eax, ecx

; 977  : 		}

  0000d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00011	c3		 ret	 0
$LN6@allocate:

; 55   : 	if ((size_t)(-1) / _Sz < _Count)

  00012	48 b8 84 f6 12
	da 4b 68 2f 01	 mov	 rax, 85401592933840516	; 012f684bda12f684H
  0001c	48 3b d0	 cmp	 rdx, rax
  0001f	77 42		 ja	 SHORT $LN17@allocate

; 57   : 	const size_t _User_size = _Count * _Sz;

  00021	48 69 ca d8 00
	00 00		 imul	 rcx, rdx, 216		; 000000d8H

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00028	48 81 f9 00 10
	00 00		 cmp	 rcx, 4096		; 00001000H
  0002f	72 25		 jb	 SHORT $LN8@allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00031	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 66   : 		if (_Block_size <= _User_size)

  00035	48 3b c1	 cmp	 rax, rcx
  00038	76 2f		 jbe	 SHORT $LN19@allocate

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);
; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00042	48 8d 48 27	 lea	 rcx, QWORD PTR [rax+39]
  00046	48 83 e1 e0	 and	 rcx, -32		; ffffffffffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0004a	48 89 41 f8	 mov	 QWORD PTR [rcx-8], rax

; 976  : 		return (_Mybase::allocate(_Count));

  0004e	48 8b c1	 mov	 rax, rcx

; 977  : 		}

  00051	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00055	c3		 ret	 0
$LN8@allocate:

; 83   : 		_Ptr = ::operator new(_User_size);

  00056	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0005b	48 8b c8	 mov	 rcx, rax

; 977  : 		}

  0005e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00062	c3		 ret	 0
$LN17@allocate:

; 56   : 		_Xbad_alloc();	// report no memory

  00063	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00068	cc		 int	 3
$LN19@allocate:

; 67   : 			_Xbad_alloc();	// report no memory

  00069	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0006e	cc		 int	 3
$LN16@allocate:
?allocate@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAPEAURow@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<Row> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ
_TEXT	SEGMENT
this$ = 8
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myend, COMDAT

; 668  : 		return (_Get_data()._Myend);

  00000	48 8d 41 10	 lea	 rax, QWORD PTR [rcx+16]

; 669  : 		}

  00004	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBQEAURow@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Get_data, COMDAT

; 638  : 		return (_Mypair._Get_second());

  00000	48 8b c1	 mov	 rax, rcx

; 639  : 		}

  00003	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Getal, COMDAT

; 628  : 		return (_Mypair._Get_first());

  00000	48 8b c1	 mov	 rax, rcx

; 629  : 		}

  00003	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URow@@V?$allocator@URow@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<Row,std::allocator<Row> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?capacity@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ PROC ; std::vector<Row,std::allocator<Row> >::capacity, COMDAT

; 1043 : 		return (this->_Myend() - this->_Myfirst());

  00000	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  00004	48 b8 13 da 4b
	68 2f a1 bd 04	 mov	 rax, 341606371735362067	; 04bda12f684bda13H
  0000e	48 2b 11	 sub	 rdx, QWORD PTR [rcx]
  00011	48 f7 ea	 imul	 rdx
  00014	48 c1 fa 02	 sar	 rdx, 2
  00018	48 8b c2	 mov	 rax, rdx
  0001b	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0001f	48 03 c2	 add	 rax, rdx

; 1044 : 		}

  00022	c3		 ret	 0
?capacity@?$vector@URow@@V?$allocator@URow@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<Row,std::allocator<Row> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@URow@@@std@@QEAAXPEAURow@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@URow@@@std@@QEAAXPEAURow@@_K@Z PROC ; std::allocator<Row>::deallocate, COMDAT

; 719  : 		{	// deallocate object at _Ptr

$LN19:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00004	48 b8 84 f6 12
	da 4b 68 2f 01	 mov	 rax, 85401592933840516	; 012f684bda12f684H
  0000e	4c 3b c0	 cmp	 r8, rax
  00011	77 3b		 ja	 SHORT $LN13@deallocate

; 95   : 	const size_t _User_size = _Count * _Sz;

  00013	49 69 c0 d8 00
	00 00		 imul	 rax, r8, 216		; 000000d8H

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0001a	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  00020	72 20		 jb	 SHORT $LN5@deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00022	f6 c2 1f	 test	 dl, 31
  00025	75 2d		 jne	 SHORT $LN15@deallocate

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00027	48 8b 42 f8	 mov	 rax, QWORD PTR [rdx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0002b	48 3b c2	 cmp	 rax, rdx
  0002e	73 2a		 jae	 SHORT $LN16@deallocate

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00030	48 2b d0	 sub	 rdx, rax
  00033	48 83 fa 08	 cmp	 rdx, 8
  00037	72 27		 jb	 SHORT $LN17@deallocate

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00039	48 83 fa 27	 cmp	 rdx, 39			; 00000027H
  0003d	77 27		 ja	 SHORT $LN18@deallocate

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0003f	48 8b d0	 mov	 rdx, rax
$LN5@deallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00042	48 8b ca	 mov	 rcx, rdx

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));
; 721  : 		}

  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 132  : 	::operator delete(_Ptr);

  00049	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
$LN13@deallocate:

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  0004e	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00053	cc		 int	 3
$LN15@deallocate:

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00054	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00059	cc		 int	 3
$LN16@deallocate:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0005a	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0005f	cc		 int	 3
$LN17@deallocate:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00060	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00065	cc		 int	 3
$LN18@deallocate:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00066	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0006b	cc		 int	 3
$LN12@deallocate:
?deallocate@?$allocator@URow@@@std@@QEAAXPEAURow@@_K@Z ENDP ; std::allocator<Row>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT

; 315  : 		return (_Myval2);

  00000	48 8b c1	 mov	 rax, rcx

; 316  : 		}

  00003	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ
_TEXT	SEGMENT
this$dead$ = 48
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT

; 2282 : 		{	// report an out_of_range error

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2283 : 		_Xout_of_range("invalid string position");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  0000b	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
  00010	cc		 int	 3
$LN3@Xran:
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 96
_Newres$ = 104
_Newsize$ = 104
_Oldlen$ = 112
_Ptr$ = 120
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

$LN464:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	53		 push	 rbx
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	41 56		 push	 r14
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00018	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00021	4d 8b f0	 mov	 r14, r8
  00024	48 8b d9	 mov	 rbx, rcx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00027	48 8b fa	 mov	 rdi, rdx
  0002a	48 83 cf 0f	 or	 rdi, 15

; 2184 : 		if (max_size() < _Newres)

  0002e	48 83 ff fe	 cmp	 rdi, -2
  00032	76 05		 jbe	 SHORT $LN2@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

  00034	48 8b fa	 mov	 rdi, rdx

; 2186 : 		else if (this->_Myres() / 2 <= _Newres / 3)

  00037	eb 35		 jmp	 SHORT $LN108@Copy
$LN2@Copy:
  00039	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
  0003d	49 8b c8	 mov	 rcx, r8
  00040	48 d1 e9	 shr	 rcx, 1
  00043	48 b8 ab aa aa
	aa aa aa aa aa	 mov	 rax, -6148914691236517205 ; aaaaaaaaaaaaaaabH
  0004d	48 f7 e7	 mul	 rdi
  00050	48 d1 ea	 shr	 rdx, 1
  00053	48 3b ca	 cmp	 rcx, rdx
  00056	76 16		 jbe	 SHORT $LN108@Copy

; 2187 : 			;
; 2188 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)

  00058	48 c7 c7 fe ff
	ff ff		 mov	 rdi, -2
  0005f	48 8b c7	 mov	 rax, rdi
  00062	48 2b c1	 sub	 rax, rcx
  00065	4c 3b c0	 cmp	 r8, rax
  00068	77 04		 ja	 SHORT $LN108@Copy

; 2189 : 			_Newres = this->_Myres()

  0006a	4a 8d 3c 01	 lea	 rdi, QWORD PTR [rcx+r8]
$LN108@Copy:

; 2190 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		pointer _Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

  0006e	48 8d 4f 01	 lea	 rcx, QWORD PTR [rdi+1]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 51   : 	if (_Count == 0)

  00072	48 85 c9	 test	 rcx, rcx
  00075	75 04		 jne	 SHORT $LN136@Copy

; 52   : 		return (_Ptr);

  00077	33 f6		 xor	 esi, esi
  00079	eb 35		 jmp	 SHORT $LN135@Copy
$LN136@Copy:

; 53   : 
; 54   : 	// check overflow of multiply
; 55   : 	if ((size_t)(-1) / _Sz < _Count)
; 56   : 		_Xbad_alloc();	// report no memory
; 57   : 	const size_t _User_size = _Count * _Sz;
; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  0007b	48 81 f9 00 10
	00 00		 cmp	 rcx, 4096		; 00001000H
  00082	72 24		 jb	 SHORT $LN138@Copy

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00084	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 66   : 		if (_Block_size <= _User_size)

  00088	48 3b c1	 cmp	 rax, rcx
  0008b	77 05		 ja	 SHORT $LN140@Copy

; 67   : 			_Xbad_alloc();	// report no memory

  0008d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN140@Copy:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);
; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  0009a	48 8d 70 27	 lea	 rsi, QWORD PTR [rax+39]
  0009e	48 83 e6 e0	 and	 rsi, -32		; ffffffffffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000a2	48 89 46 f8	 mov	 QWORD PTR [rsi-8], rax

; 74   : 
; 75   :  #ifdef _DEBUG
; 76   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 77   :  #endif /* _DEBUG */
; 78   : 		}
; 79   : 	else

  000a6	eb 08		 jmp	 SHORT $LN135@Copy
$LN138@Copy:

; 80   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 81   : 
; 82   : 		{	// allocate normal block
; 83   : 		_Ptr = ::operator new(_User_size);

  000a8	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  000ad	48 8b f0	 mov	 rsi, rax
$LN135@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
  000b0	eb 14		 jmp	 SHORT $LN18@Copy
$LN19@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
  000b2	48 8b 5c 24 60	 mov	 rbx, QWORD PTR this$[rsp]
  000b7	4c 8b 74 24 70	 mov	 r14, QWORD PTR _Oldlen$[rsp]
  000bc	48 8b 7c 24 68	 mov	 rdi, QWORD PTR _Newres$[rsp]
  000c1	48 8b 74 24 78	 mov	 rsi, QWORD PTR _Ptr$[rsp]
$LN18@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2207 : 		if (0 < _Oldlen)

  000c6	4d 85 f6	 test	 r14, r14
  000c9	74 1f		 je	 SHORT $LN285@Copy

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000cb	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16
  000d0	72 05		 jb	 SHORT $LN276@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  000d2	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000d5	eb 03		 jmp	 SHORT $LN277@Copy
$LN276@Copy:
  000d7	48 8b d3	 mov	 rdx, rbx
$LN277@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 530  : 		return (_Count == 0 ? _First1

  000da	4d 85 f6	 test	 r14, r14
  000dd	74 0b		 je	 SHORT $LN285@Copy
  000df	4d 8b c6	 mov	 r8, r14
  000e2	48 8b ce	 mov	 rcx, rsi
  000e5	e8 00 00 00 00	 call	 memcpy
$LN285@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  000ea	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000ee	48 83 f8 10	 cmp	 rax, 16
  000f2	72 4b		 jb	 SHORT $LN369@Copy

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)
; 2256 : 				_Traits::copy(this->_Bx()._Buf,
; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  000f4	48 ff c0	 inc	 rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  000f7	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  000fa	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  00100	72 38		 jb	 SHORT $LN364@Copy

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00102	f6 c1 1f	 test	 cl, 31
  00105	74 06		 je	 SHORT $LN365@Copy
  00107	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0010c	cc		 int	 3
$LN365@Copy:

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0010d	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00111	48 3b c1	 cmp	 rax, rcx
  00114	72 06		 jb	 SHORT $LN366@Copy
  00116	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0011b	cc		 int	 3
$LN366@Copy:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0011c	48 2b c8	 sub	 rcx, rax
  0011f	48 83 f9 08	 cmp	 rcx, 8
  00123	73 06		 jae	 SHORT $LN367@Copy
  00125	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0012a	cc		 int	 3
$LN367@Copy:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0012b	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  0012f	76 06		 jbe	 SHORT $LN368@Copy
  00131	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00136	cc		 int	 3
$LN368@Copy:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00137	48 8b c8	 mov	 rcx, rax
$LN364@Copy:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  0013a	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN369@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0013f	48 c7 43 18 0f
	00 00 00	 mov	 QWORD PTR [rbx+24], 15

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00147	48 c7 43 10 00
	00 00 00	 mov	 QWORD PTR [rbx+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0014f	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16
  00154	72 05		 jb	 SHORT $LN392@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00156	48 8b 03	 mov	 rax, QWORD PTR [rbx]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00159	eb 03		 jmp	 SHORT $LN393@Copy
$LN392@Copy:
  0015b	48 8b c3	 mov	 rax, rbx
$LN393@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0015e	c6 00 00	 mov	 BYTE PTR [rax], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00161	48 89 33	 mov	 QWORD PTR [rbx], rsi
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2212 : 		this->_Myres() = _Newres;

  00164	48 89 7b 18	 mov	 QWORD PTR [rbx+24], rdi

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00168	4c 89 73 10	 mov	 QWORD PTR [rbx+16], r14

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0016c	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16
  00171	72 03		 jb	 SHORT $LN456@Copy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  00173	48 8b de	 mov	 rbx, rsi
$LN456@Copy:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  00176	42 c6 04 33 00	 mov	 BYTE PTR [rbx+r14], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2214 : 		}

  0017b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0017f	41 5e		 pop	 r14
  00181	5f		 pop	 rdi
  00182	5e		 pop	 rsi
  00183	5b		 pop	 rbx
  00184	c3		 ret	 0
$LN462@Copy:
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 96
_Newres$ = 104
_Newsize$ = 104
_Oldlen$ = 112
_Ptr$ = 120
?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$107

; 2197 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z$0:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0000d	48 8b 55 68	 mov	 rdx, QWORD PTR _Newsize$[rbp]
  00011	48 89 55 68	 mov	 QWORD PTR _Newres$[rbp], rdx

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  00015	48 ff c2	 inc	 rdx
  00018	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
  0001d	48 89 45 78	 mov	 QWORD PTR _Ptr$[rbp], rax

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END

  00021	48 8d 05 00 00
	00 00		 lea	 rax, $LN19@catch$107
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
  0002e	cc		 int	 3
?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$107
$T1 = 32
this$ = 96
_Newres$ = 104
_Newsize$ = 104
_Oldlen$ = 112
_Ptr$ = 120
?catch$106@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$106

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL

  0002f	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00034	53		 push	 rbx
  00035	55		 push	 rbp
  00036	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0003a	48 8b ea	 mov	 rbp, rdx
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z$1:

; 734  : 		return (_Get_data()._Myres);

  0003d	48 8b 5d 60	 mov	 rbx, QWORD PTR this$[rbp]

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00041	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00045	48 83 f8 10	 cmp	 rax, 16
  00049	72 57		 jb	 SHORT $LN236@catch$106

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)
; 2256 : 				_Traits::copy(this->_Bx()._Buf,
; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0004b	48 ff c0	 inc	 rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  0004e	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00051	48 83 f8 ff	 cmp	 rax, -1
  00055	76 06		 jbe	 SHORT $LN230@catch$106
  00057	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0005c	cc		 int	 3
$LN230@catch$106:

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);
; 85   : 		}
; 86   : 	return (_Ptr);
; 87   : 	}
; 88   : 
; 89   : 		// FUNCTION _Deallocate
; 90   : inline
; 91   : 	void _Deallocate(void * _Ptr, size_t _Count, size_t _Sz)
; 92   : 	{	// deallocate storage for _Count elements of size _Sz
; 93   :  #if defined(_M_IX86) || defined(_M_X64)
; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);
; 95   : 	const size_t _User_size = _Count * _Sz;
; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0005d	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  00063	72 38		 jb	 SHORT $LN231@catch$106

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00065	f6 c1 1f	 test	 cl, 31
  00068	74 06		 je	 SHORT $LN232@catch$106
  0006a	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0006f	cc		 int	 3
$LN232@catch$106:

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00070	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00074	48 3b c1	 cmp	 rax, rcx
  00077	72 06		 jb	 SHORT $LN233@catch$106
  00079	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0007e	cc		 int	 3
$LN233@catch$106:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0007f	48 2b c8	 sub	 rcx, rax
  00082	48 83 f9 08	 cmp	 rcx, 8
  00086	73 06		 jae	 SHORT $LN234@catch$106
  00088	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0008d	cc		 int	 3
$LN234@catch$106:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0008e	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  00092	76 06		 jbe	 SHORT $LN235@catch$106
  00094	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00099	cc		 int	 3
$LN235@catch$106:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0009a	48 8b c8	 mov	 rcx, rax
$LN231@catch$106:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  0009d	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN236@catch$106:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  000a2	48 c7 43 18 0f
	00 00 00	 mov	 QWORD PTR [rbx+24], 15

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  000aa	48 c7 43 10 00
	00 00 00	 mov	 QWORD PTR [rbx+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000b2	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16
  000b7	72 03		 jb	 SHORT $LN260@catch$106
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  000b9	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
$LN260@catch$106:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000bc	c6 03 00	 mov	 BYTE PTR [rbx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;

  000bf	33 d2		 xor	 edx, edx
  000c1	33 c9		 xor	 ecx, ecx
  000c3	e8 00 00 00 00	 call	 _CxxThrowException
  000c8	90		 npad	 1
?catch$106@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$106
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 96
_Newres$ = 104
_Newsize$ = 104
_Oldlen$ = 112
_Ptr$ = 120
?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$107

; 2197 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z$0:

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0000d	48 8b 55 68	 mov	 rdx, QWORD PTR _Newsize$[rbp]
  00011	48 89 55 68	 mov	 QWORD PTR _Newres$[rbp], rdx

; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  00015	48 ff c2	 inc	 rdx
  00018	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
  0001d	48 89 45 78	 mov	 QWORD PTR _Ptr$[rbp], rax

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END

  00021	48 8d 05 00 00
	00 00		 lea	 rax, $LN19@catch$107
  00028	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
  0002e	cc		 int	 3
?catch$107@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$107
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 96
_Newres$ = 104
_Newsize$ = 104
_Oldlen$ = 112
_Ptr$ = 120
?catch$106@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$106

; 735  : 		}
; 736  : 
; 737  : 	const size_type& _Myres() const _NOEXCEPT
; 738  : 		{	// return const reference to _Myres
; 739  : 		return (_Get_data()._Myres);
; 740  : 		}
; 741  : 
; 742  : private:
; 743  : 	_Compressed_pair<_Alty, _String_val<_Val_types> > _Mypair;
; 744  : 	};
; 745  : 
; 746  : 		// TEMPLATE CLASS basic_string
; 747  : template<class _Elem,
; 748  : 	class _Traits,
; 749  : 	class _Alloc>
; 750  : 	class basic_string
; 751  : 		: public _String_alloc<_String_base_types<_Elem, _Alloc> >
; 752  : 	{	// null-terminated transparent array of elements
; 753  : public:
; 754  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Myt;
; 755  : 	typedef _String_alloc<_String_base_types<_Elem, _Alloc> > _Mybase;
; 756  : 	typedef _Traits traits_type;
; 757  : 	typedef _Alloc allocator_type;
; 758  : 
; 759  : 	typedef typename _Mybase::_Alty _Alty;
; 760  : 
; 761  : 	typedef typename _Mybase::value_type value_type;
; 762  : 	typedef typename _Mybase::size_type size_type;
; 763  : 	typedef typename _Mybase::difference_type difference_type;
; 764  : 	typedef typename _Mybase::pointer pointer;
; 765  : 	typedef typename _Mybase::const_pointer const_pointer;
; 766  : 	typedef typename _Mybase::reference reference;
; 767  : 	typedef typename _Mybase::const_reference const_reference;
; 768  : 
; 769  : 	typedef typename _Mybase::iterator iterator;
; 770  : 	typedef typename _Mybase::const_iterator const_iterator;
; 771  : 
; 772  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 773  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 774  : 
; 775  : 	basic_string(const _Myt& _Right)
; 776  : 
; 777  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 778  : 
; 779  : 
; 780  : 		{	// construct by copying _Right
; 781  : 		_Tidy();
; 782  : 		assign(_Right, 0, npos);
; 783  : 		}
; 784  : 
; 785  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 786  : 		: _Mybase(_Al)
; 787  : 		{	// construct by copying with allocator
; 788  : 		_Tidy();
; 789  : 		assign(_Right, 0, npos);
; 790  : 		}
; 791  : 
; 792  : 	basic_string() _NOEXCEPT_OP(is_nothrow_default_constructible<_Alloc>::value)
; 793  : 		: _Mybase()
; 794  : 		{	// construct empty string
; 795  : 		_Tidy();
; 796  : 		}
; 797  : 
; 798  : 	explicit basic_string(const _Alloc& _Al) _NOEXCEPT
; 799  : 		: _Mybase(_Al)
; 800  : 		{	// construct empty string with allocator
; 801  : 		_Tidy();
; 802  : 		}
; 803  : 
; 804  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 805  : 		size_type _Count = npos)
; 806  : 		: _Mybase(_Right._Getal())
; 807  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 808  : 		_Tidy();
; 809  : 		assign(_Right, _Roff, _Count);
; 810  : 		}
; 811  : 
; 812  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 813  : 		const _Alloc& _Al)
; 814  : 		: _Mybase(_Al)
; 815  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 816  : 		_Tidy();
; 817  : 		assign(_Right, _Roff, _Count);
; 818  : 		}
; 819  : 
; 820  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 823  : 		_Tidy();
; 824  : 		assign(_Ptr, _Count);
; 825  : 		}
; 826  : 
; 827  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 828  : 		: _Mybase(_Al)
; 829  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 830  : 		_Tidy();
; 831  : 		assign(_Ptr, _Count);
; 832  : 		}
; 833  : 
; 834  : 	basic_string(const _Elem *_Ptr)
; 835  : 		: _Mybase()
; 836  : 		{	// construct from [_Ptr, <null>)
; 837  : 		_Tidy();
; 838  : 		assign(_Ptr);
; 839  : 		}
; 840  : 
; 841  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 842  : 		: _Mybase(_Al)
; 843  : 		{	// construct from [_Ptr, <null>) with allocator
; 844  : 		_Tidy();
; 845  : 		assign(_Ptr);
; 846  : 		}
; 847  : 
; 848  : 	basic_string(size_type _Count, _Elem _Ch)
; 849  : 		: _Mybase()
; 850  : 		{	// construct from _Count * _Ch
; 851  : 		_Tidy();
; 852  : 		assign(_Count, _Ch);
; 853  : 		}
; 854  : 
; 855  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 856  : 		: _Mybase(_Al)
; 857  : 		{	// construct from _Count * _Ch with allocator
; 858  : 		_Tidy();
; 859  : 		assign(_Count, _Ch);
; 860  : 		}
; 861  : 
; 862  : 	template<class _Iter,
; 863  : 		class = typename enable_if<_Is_iterator<_Iter>::value,
; 864  : 			void>::type>
; 865  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc())
; 866  : 		: _Mybase(_Al)
; 867  : 		{	// construct from [_First, _Last) with optional allocator
; 868  : 		_DEBUG_RANGE(_First, _Last);
; 869  : 		_Tidy();
; 870  : 		_Construct(_Unchecked(_First), _Unchecked(_Last), _Iter_cat_t<_Iter>());
; 871  : 		}
; 872  : 
; 873  : 	template<class _Iter>
; 874  : 		void _Construct(_Iter _First,
; 875  : 			_Iter _Last, input_iterator_tag)
; 876  : 		{	// initialize from [_First, _Last), input iterators
; 877  : 		_TRY_BEGIN
; 878  : 		for (; _First != _Last; ++_First)
; 879  : 			append((size_type)1, (_Elem)*_First);
; 880  : 		_CATCH_ALL
; 881  : 		_Tidy(true);
; 882  : 		_RERAISE;
; 883  : 		_CATCH_END
; 884  : 		}
; 885  : 
; 886  : 	template<class _Iter>
; 887  : 		void _Construct(_Iter _First,
; 888  : 			_Iter _Last, forward_iterator_tag)
; 889  : 		{	// initialize from [_First, _Last), forward iterators
; 890  : 		size_type _Count = _STD distance(_First, _Last);
; 891  : 		reserve(_Count);
; 892  : 		_Construct(_First, _Last, input_iterator_tag());
; 893  : 		}
; 894  : 
; 895  : 	void _Construct(_Elem *_First,
; 896  : 		_Elem *_Last, random_access_iterator_tag)
; 897  : 		{	// initialize from [_First, _Last), pointers
; 898  : 		if (_First != _Last)
; 899  : 			assign(_First, _Last - _First);
; 900  : 		}
; 901  : 
; 902  : 	void _Construct(const _Elem *_First,
; 903  : 		const _Elem *_Last, random_access_iterator_tag)
; 904  : 		{	// initialize from [_First, _Last), const pointers
; 905  : 		if (_First != _Last)
; 906  : 			assign(_First, _Last - _First);
; 907  : 		}
; 908  : 
; 909  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 910  : 		: _Mybase(_STD move(_Right._Getal()))
; 911  : 		{	// construct by moving _Right
; 912  : 		_Tidy();
; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 914  : 		}
; 915  : 
; 916  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 917  : 		: _Mybase(_Al)
; 918  : 		{	// construct by moving _Right, allocator
; 919  : 		if (this->_Getal() != _Right._Getal())
; 920  : 			assign(_Right.begin(), _Right.end());
; 921  : 		else
; 922  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 923  : 		}
; 924  : 
; 925  : 	_Myt& operator=(_Myt&& _Right)
; 926  : 		_NOEXCEPT_OP(_Alty::propagate_on_container_move_assignment::value
; 927  : 			|| _Alty::is_always_equal::value)
; 928  : 		{	// assign by moving _Right
; 929  : 		if (this != &_Right)
; 930  : 			{	// different, assign it
; 931  : 			_Tidy(true);
; 932  : 
; 933  : 			if (_Alty::propagate_on_container_move_assignment::value
; 934  : 				&& this->_Getal() != _Right._Getal())
; 935  : 				this->_Move_alloc(_Right._Getal());
; 936  : 
; 937  : 			if (this->_Getal() != _Right._Getal())
; 938  : 				assign(_Right.begin(), _Right.end());
; 939  : 			else
; 940  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 941  : 			}
; 942  : 		return (*this);
; 943  : 		}
; 944  : 
; 945  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 946  : 		{	// assign by moving _Right
; 947  : 		if (this == &_Right)
; 948  : 			;
; 949  : 		else if (get_allocator() != _Right.get_allocator()
; 950  : 			&& this->_BUF_SIZE <= _Right._Myres())
; 951  : 			*this = _Right;
; 952  : 		else
; 953  : 			{	// not same, clear this and steal from _Right
; 954  : 			_Tidy(true);
; 955  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 956  : 			}
; 957  : 		return (*this);
; 958  : 		}
; 959  : 
; 960  : 	void _Assign_rv(_Myt&& _Right)
; 961  : 		{	// assign by moving _Right
; 962  : 		if (_Right._Myres() < this->_BUF_SIZE)
; 963  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,
; 964  : 				_Right._Mysize() + 1);
; 965  : 		else
; 966  : 			{	// copy pointer
; 967  : 			this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Right._Bx()._Ptr);
; 968  : 			_Right._Bx()._Ptr = pointer();
; 969  : 			}
; 970  : 		this->_Mysize() = _Right._Mysize();
; 971  : 		this->_Myres() = _Right._Myres();
; 972  : 		_Right._Tidy();
; 973  : 		}
; 974  : 
; 975  : 	basic_string(_XSTD initializer_list<_Elem> _Ilist,
; 976  : 		const _Alloc& _Al = allocator_type())
; 977  : 		: _Mybase(_Al)
; 978  : 		{	// construct from initializer_list
; 979  : 		_Tidy();
; 980  : 		assign(_Ilist.begin(), _Ilist.end());
; 981  : 		}
; 982  : 
; 983  : 	_Myt& operator=(_XSTD initializer_list<_Elem> _Ilist)
; 984  : 		{	// assign initializer_list
; 985  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 986  : 		}
; 987  : 
; 988  : 	_Myt& operator+=(_XSTD initializer_list<_Elem> _Ilist)
; 989  : 		{	// append initializer_list
; 990  : 		return (append(_Ilist.begin(), _Ilist.end()));
; 991  : 		}
; 992  : 
; 993  : 	_Myt& assign(_XSTD initializer_list<_Elem> _Ilist)
; 994  : 		{	// assign initializer_list
; 995  : 		return (assign(_Ilist.begin(), _Ilist.end()));
; 996  : 		}
; 997  : 
; 998  : 	_Myt& append(_XSTD initializer_list<_Elem> _Ilist)
; 999  : 		{	// append initializer_list
; 1000 : 		return (append(_Ilist.begin(), _Ilist.end()));
; 1001 : 		}
; 1002 : 
; 1003 : 	iterator insert(const_iterator _Where,
; 1004 : 		_XSTD initializer_list<_Elem> _Ilist)
; 1005 : 		{	// insert initializer_list
; 1006 : 		return (insert(_Where, _Ilist.begin(), _Ilist.end()));
; 1007 : 		}
; 1008 : 
; 1009 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1010 : 		_XSTD initializer_list<_Elem> _Ilist)
; 1011 : 		{	// replace with initializer_list
; 1012 : 		return (replace(_First, _Last, _Ilist.begin(), _Ilist.end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	~basic_string() _NOEXCEPT
; 1016 : 		{	// destroy the string
; 1017 : 		_Tidy(true);
; 1018 : 		}
; 1019 : 
; 1020 : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 1021 : 
; 1022 : 	_Myt& operator=(const _Myt& _Right)
; 1023 : 		{	// assign _Right
; 1024 : 		if (this != &_Right)
; 1025 : 			{	// different, assign it
; 1026 : 			if (this->_Getal() != _Right._Getal()
; 1027 : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 1028 : 				{	// change allocator before copying
; 1029 : 				_Tidy(true);
; 1030 : 				this->_Copy_alloc(_Right._Getal());
; 1031 : 				}
; 1032 : 
; 1033 : 			assign(_Right);
; 1034 : 			}
; 1035 : 		return (*this);
; 1036 : 		}
; 1037 : 
; 1038 : 	_Myt& operator=(const _Elem *_Ptr)
; 1039 : 		{	// assign [_Ptr, <null>)
; 1040 : 		return (assign(_Ptr));
; 1041 : 		}
; 1042 : 
; 1043 : 	_Myt& operator=(_Elem _Ch)
; 1044 : 		{	// assign 1 * _Ch
; 1045 : 		return (assign(1, _Ch));
; 1046 : 		}
; 1047 : 
; 1048 : 	_Myt& operator+=(const _Myt& _Right)
; 1049 : 		{	// append _Right
; 1050 : 		return (append(_Right));
; 1051 : 		}
; 1052 : 
; 1053 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1054 : 		{	// append [_Ptr, <null>)
; 1055 : 		return (append(_Ptr));
; 1056 : 		}
; 1057 : 
; 1058 : 	_Myt& operator+=(_Elem _Ch)
; 1059 : 		{	// append 1 * _Ch
; 1060 : 		return (append((size_type)1, _Ch));
; 1061 : 		}
; 1062 : 
; 1063 : 	_Myt& append(const _Myt& _Right)
; 1064 : 		{	// append _Right
; 1065 : 		return (append(_Right, 0, npos));
; 1066 : 		}
; 1067 : 
; 1068 : 	_Myt& append(const _Myt& _Right,
; 1069 : 		size_type _Roff, size_type _Count = npos)
; 1070 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1071 : 		_Right._Check_offset(_Roff);
; 1072 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
; 1073 : 		if (npos - this->_Mysize() <= _Count)
; 1074 : 			_Xlen();	// result too long
; 1075 : 
; 1076 : 		const size_type _Num = this->_Mysize() + _Count;
; 1077 : 		if (0 < _Count && _Grow(_Num))
; 1078 : 			{	// make room and append new stuff
; 1079 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),
; 1080 : 				_Right._Myptr() + _Roff, _Count);
; 1081 : 			_Eos(_Num);
; 1082 : 			}
; 1083 : 		return (*this);
; 1084 : 		}
; 1085 : 
; 1086 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1087 : 		{	// append [_Ptr, _Ptr + _Count)
; 1088 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1089 : 		if (_Inside(_Ptr))
; 1090 : 			return (append(*this,
; 1091 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1092 : 		if (npos - this->_Mysize() <= _Count)
; 1093 : 			_Xlen();	// result too long
; 1094 : 
; 1095 : 		const size_type _Num = this->_Mysize() + _Count;
; 1096 : 		if (0 < _Count && _Grow(_Num))
; 1097 : 			{	// make room and append new stuff
; 1098 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);
; 1099 : 			_Eos(_Num);
; 1100 : 			}
; 1101 : 		return (*this);
; 1102 : 		}
; 1103 : 
; 1104 : 	_Myt& append(const _Elem *_Ptr)
; 1105 : 		{	// append [_Ptr, <null>)
; 1106 : 		_DEBUG_POINTER(_Ptr);
; 1107 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1108 : 		}
; 1109 : 
; 1110 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1111 : 		{	// append _Count * _Ch
; 1112 : 		if (npos - this->_Mysize() <= _Count)
; 1113 : 			_Xlen();	// result too long
; 1114 : 
; 1115 : 		const size_type _Num = this->_Mysize() + _Count;
; 1116 : 		if (0 < _Count && _Grow(_Num))
; 1117 : 			{	// make room and append new stuff using assign
; 1118 : 			_Chassign(this->_Mysize(), _Count, _Ch);
; 1119 : 			_Eos(_Num);
; 1120 : 			}
; 1121 : 		return (*this);
; 1122 : 		}
; 1123 : 
; 1124 : 	template<class _Iter>
; 1125 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1126 : 			_Myt&>::type
; 1127 : 		append(_Iter _First, _Iter _Last)
; 1128 : 		{	// append [_First, _Last), input iterators
; 1129 : 		return (replace(end(), end(), _First, _Last));
; 1130 : 		}
; 1131 : 
; 1132 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1133 : 		{	// append [_First, _Last), const pointers
; 1134 : 		return (replace(end(), end(), _First, _Last));
; 1135 : 		}
; 1136 : 
; 1137 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1138 : 		{	// append [_First, _Last), const_iterators
; 1139 : 		return (replace(end(), end(), _First, _Last));
; 1140 : 		}
; 1141 : 
; 1142 : 	_Myt& assign(const _Myt& _Right)
; 1143 : 		{	// assign _Right
; 1144 : 		return (assign(_Right, 0, npos));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(const _Myt& _Right,
; 1148 : 		size_type _Roff, size_type _Count = npos)
; 1149 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1150 : 		_Right._Check_offset(_Roff);
; 1151 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
; 1152 : 
; 1153 : 		if (this == &_Right)
; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring
; 1155 : 		else if (_Grow(_Count))
; 1156 : 			{	// make room and assign new stuff
; 1157 : 			_Traits::copy(this->_Myptr(),
; 1158 : 				_Right._Myptr() + _Roff, _Count);
; 1159 : 			_Eos(_Count);
; 1160 : 			}
; 1161 : 		return (*this);
; 1162 : 		}
; 1163 : 
; 1164 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1165 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1166 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1167 : 		if (_Inside(_Ptr))
; 1168 : 			return (assign(*this,
; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))
; 1172 : 			{	// make room and assign new stuff
; 1173 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1174 : 			_Eos(_Count);
; 1175 : 			}
; 1176 : 		return (*this);
; 1177 : 		}
; 1178 : 
; 1179 : 	_Myt& assign(const _Elem *_Ptr)
; 1180 : 		{	// assign [_Ptr, <null>)
; 1181 : 		_DEBUG_POINTER(_Ptr);
; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1183 : 		}
; 1184 : 
; 1185 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1186 : 		{	// assign _Count * _Ch
; 1187 : 		if (_Count == npos)
; 1188 : 			_Xlen();	// result too long
; 1189 : 
; 1190 : 		if (_Grow(_Count))
; 1191 : 			{	// make room and assign new stuff
; 1192 : 			_Chassign(0, _Count, _Ch);
; 1193 : 			_Eos(_Count);
; 1194 : 			}
; 1195 : 		return (*this);
; 1196 : 		}
; 1197 : 
; 1198 : 	template<class _Iter>
; 1199 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1200 : 			_Myt&>::type
; 1201 : 		assign(_Iter _First, _Iter _Last)
; 1202 : 		{	// assign [_First, _Last), input iterators
; 1203 : 		return (replace(begin(), end(), _First, _Last));
; 1204 : 		}
; 1205 : 
; 1206 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1207 : 		{	// assign [_First, _Last), const pointers
; 1208 : 		return (replace(begin(), end(), _First, _Last));
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1212 : 		{	// assign [_First, _Last), const_iterators
; 1213 : 		return (replace(begin(), end(), _First, _Last));
; 1214 : 		}
; 1215 : 
; 1216 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1217 : 		{	// insert _Right at _Off
; 1218 : 		return (insert(_Off, _Right, 0, npos));
; 1219 : 		}
; 1220 : 
; 1221 : 	_Myt& insert(size_type _Off,
; 1222 : 		const _Myt& _Right, size_type _Roff, size_type _Count = npos)
; 1223 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1224 : 		_Check_offset(_Off);
; 1225 : 		_Right._Check_offset(_Roff);
; 1226 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
; 1227 : 		if (npos - this->_Mysize() <= _Count)
; 1228 : 			_Xlen();	// result too long
; 1229 : 
; 1230 : 		const size_type _Num = this->_Mysize() + _Count;
; 1231 : 		if (0 < _Count && _Grow(_Num))
; 1232 : 			{	// make room and insert new stuff
; 1233 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1234 : 				this->_Myptr() + _Off,
; 1235 : 				this->_Mysize() - _Off);	// empty out hole
; 1236 : 			if (this == &_Right)
; 1237 : 				_Traits::move(this->_Myptr() + _Off,
; 1238 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1239 : 						_Count);	// substring
; 1240 : 			else
; 1241 : 				_Traits::copy(this->_Myptr() + _Off,
; 1242 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1243 : 			_Eos(_Num);
; 1244 : 			}
; 1245 : 		return (*this);
; 1246 : 		}
; 1247 : 
; 1248 : 	_Myt& insert(size_type _Off,
; 1249 : 		const _Elem *_Ptr, size_type _Count)
; 1250 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1251 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1252 : 		if (_Inside(_Ptr))
; 1253 : 			return (insert(_Off, *this,
; 1254 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1255 : 		_Check_offset(_Off);
; 1256 : 		if (npos - this->_Mysize() <= _Count)
; 1257 : 			_Xlen();	// result too long
; 1258 : 		const size_type _Num = this->_Mysize() + _Count;
; 1259 : 		if (0 < _Count && _Grow(_Num))
; 1260 : 			{	// make room and insert new stuff
; 1261 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1262 : 				this->_Myptr() + _Off,
; 1263 : 				this->_Mysize() - _Off);	// empty out hole
; 1264 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1265 : 			_Eos(_Num);
; 1266 : 			}
; 1267 : 		return (*this);
; 1268 : 		}
; 1269 : 
; 1270 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1271 : 		{	// insert [_Ptr, <null>) at _Off
; 1272 : 		_DEBUG_POINTER(_Ptr);
; 1273 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1274 : 		}
; 1275 : 
; 1276 : 	_Myt& insert(size_type _Off,
; 1277 : 		size_type _Count, _Elem _Ch)
; 1278 : 		{	// insert _Count * _Ch at _Off
; 1279 : 		_Check_offset(_Off);
; 1280 : 		if (npos - this->_Mysize() <= _Count)
; 1281 : 			_Xlen();	// result too long
; 1282 : 		const size_type _Num = this->_Mysize() + _Count;
; 1283 : 		if (0 < _Count && _Grow(_Num))
; 1284 : 			{	// make room and insert new stuff
; 1285 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1286 : 				this->_Myptr() + _Off,
; 1287 : 				this->_Mysize() - _Off);	// empty out hole
; 1288 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1289 : 			_Eos(_Num);
; 1290 : 			}
; 1291 : 		return (*this);
; 1292 : 		}
; 1293 : 
; 1294 : 	iterator insert(const_iterator _Where)
; 1295 : 		{	// insert <null> at _Where
; 1296 : 		return (insert(_Where, _Elem()));
; 1297 : 		}
; 1298 : 
; 1299 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1300 : 		{	// insert _Ch at _Where
; 1301 : 		size_type _Off = _Where - begin();
; 1302 : 		insert(_Off, 1, _Ch);
; 1303 : 		return (begin() + _Off);
; 1304 : 		}
; 1305 : 
; 1306 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1307 : 		{	// insert _Count * _Elem at _Where
; 1308 : 		size_type _Off = _Where - begin();
; 1309 : 		insert(_Off, _Count, _Ch);
; 1310 : 		return (begin() + _Off);
; 1311 : 		}
; 1312 : 
; 1313 : 	template<class _Iter>
; 1314 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1315 : 			iterator>::type
; 1316 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1317 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1318 : 		size_type _Off = _Where - begin();
; 1319 : 		replace(_Where, _Where, _First, _Last);
; 1320 : 		return (begin() + _Off);
; 1321 : 		}
; 1322 : 
; 1323 : 	iterator insert(const_iterator _Where,
; 1324 : 		const_pointer _First, const_pointer _Last)
; 1325 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1326 : 		size_type _Off = _Where - begin();
; 1327 : 		replace(_Where, _Where, _First, _Last);
; 1328 : 		return (begin() + _Off);
; 1329 : 		}
; 1330 : 
; 1331 : 	iterator insert(const_iterator _Where,
; 1332 : 		const_iterator _First, const_iterator _Last)
; 1333 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1334 : 		size_type _Off = _Where - begin();
; 1335 : 		replace(_Where, _Where, _First, _Last);
; 1336 : 		return (begin() + _Off);
; 1337 : 		}
; 1338 : 
; 1339 : 	_Myt& erase(size_type _Off = 0)
; 1340 : 		{	// erase elements [_Off, ...)
; 1341 : 		_Check_offset(_Off);
; 1342 : 		_Eos(_Off);
; 1343 : 		return (*this);
; 1344 : 		}
; 1345 : 
; 1346 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1347 : 		{	// erase elements [_Off, _Off + _Count)
; 1348 : 		_Check_offset(_Off);
; 1349 : 		if (this->_Mysize() - _Off <= _Count)
; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1351 : 		else if (0 < _Count)
; 1352 : 			{	// move elements down
; 1353 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1354 : 			size_type _Newsize = this->_Mysize() - _Count;
; 1355 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1356 : 			_Eos(_Newsize);
; 1357 : 			}
; 1358 : 		return (*this);
; 1359 : 		}
; 1360 : 
; 1361 : 	iterator erase(const_iterator _Where)
; 1362 : 		{	// erase element at _Where
; 1363 : 		size_type _Count = _Where - begin();
; 1364 : 		erase(_Count, 1);
; 1365 : 		return (begin() + _Count);
; 1366 : 		}
; 1367 : 
; 1368 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1369 : 		{	// erase substring [_First, _Last)
; 1370 : 		_DEBUG_RANGE(_First, _Last);
; 1371 : 		size_type _Count = _First - begin();
; 1372 : 		erase(_Count, _Last - _First);
; 1373 : 		return (begin() + _Count);
; 1374 : 		}
; 1375 : 
; 1376 : 	void clear() _NOEXCEPT
; 1377 : 		{	// erase all
; 1378 : 		_Eos(0);
; 1379 : 		}
; 1380 : 
; 1381 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1382 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1383 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1384 : 		}
; 1385 : 
; 1386 : 	_Myt& replace(size_type _Off,
; 1387 : 		size_type _N0, const _Myt& _Right, size_type _Roff,
; 1388 : 			size_type _Count = npos)
; 1389 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1390 : 		_Check_offset(_Off);
; 1391 : 		_Right._Check_offset(_Roff);
; 1392 : 		_N0 = _Clamp_suffix_size(_Off, _N0);
; 1393 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);
; 1394 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1395 : 			_Xlen();	// result too long
; 1396 : 
; 1397 : 		const size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail
; 1398 : 		const size_type _Newsize = this->_Mysize() + _Count - _N0;
; 1399 : 		if (this->_Mysize() < _Newsize)
; 1400 : 			_Grow(_Newsize);
; 1401 : 
; 1402 : 		if (_Count == _N0)
; 1403 : 			{	// only one movement required, so _Traits::move handles any overlap
; 1404 : 			_Traits::move(this->_Myptr() + _Off,
; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (this != &_Right)
; 1408 : 			{	// no overlap, just move down and copy in new stuff
; 1409 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1410 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1411 : 			_Traits::copy(this->_Myptr() + _Off,
; 1412 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1413 : 			}
; 1414 : 		else if (_Count < _N0)
; 1415 : 			{	// hole doesn't get larger, just copy in substring
; 1416 : 			_Traits::move(this->_Myptr() + _Off,
; 1417 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1418 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1419 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1420 : 			}
; 1421 : 		else if (_Roff <= _Off)
; 1422 : 			{	// hole gets larger, substring begins before hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,
; 1426 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1427 : 			}
; 1428 : 		else if (_Off + _N0 <= _Roff)
; 1429 : 			{	// hole gets larger, substring begins after hole
; 1430 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1431 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1432 : 			_Traits::move(this->_Myptr() + _Off,
; 1433 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1434 : 				_Count);	// fill hole
; 1435 : 			}
; 1436 : 		else
; 1437 : 			{	// hole gets larger, substring begins in hole
; 1438 : 			_Traits::move(this->_Myptr() + _Off,
; 1439 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1442 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1443 : 				this->_Myptr() + _Roff + _Count,
; 1444 : 				_Count - _N0);	// fill rest of new hole
; 1445 : 			}
; 1446 : 
; 1447 : 		_Eos(_Newsize);
; 1448 : 		return (*this);
; 1449 : 		}
; 1450 : 
; 1451 : 	_Myt& replace(size_type _Off,
; 1452 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1453 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1454 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1455 : 		if (_Inside(_Ptr))
; 1456 : 			return (replace(_Off, _N0, *this,
; 1457 : 				_Ptr - this->_Myptr(),
; 1458 : 				_Count));	// substring, replace carefully
; 1459 : 		_Check_offset(_Off);
; 1460 : 		_N0 = _Clamp_suffix_size(_Off, _N0);
; 1461 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1462 : 			_Xlen();	// result too long
; 1463 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1464 : 
; 1465 : 		if (_Count < _N0)
; 1466 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1467 : 				this->_Myptr() + _Off + _N0,
; 1468 : 				_Nm);	// smaller hole, move tail up
; 1469 : 		const size_type _Num = this->_Mysize() + _Count - _N0;
; 1470 : 		if ((0 < _Count || 0 < _N0)
; 1471 : 			&& _Grow(_Num))
; 1472 : 			{	// make room and rearrange
; 1473 : 			if (_N0 < _Count)
; 1474 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1476 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1477 : 			_Eos(_Num);
; 1478 : 			}
; 1479 : 		return (*this);
; 1480 : 		}
; 1481 : 
; 1482 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1483 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1484 : 		_DEBUG_POINTER(_Ptr);
; 1485 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1486 : 		}
; 1487 : 
; 1488 : 	_Myt& replace(size_type _Off,
; 1489 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1490 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1491 : 		_Check_offset(_Off);
; 1492 : 		_N0 = _Clamp_suffix_size(_Off, _N0);
; 1493 : 		if (npos - _Count <= this->_Mysize() - _N0)
; 1494 : 			_Xlen();	// result too long
; 1495 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;
; 1496 : 
; 1497 : 		if (_Count < _N0)
; 1498 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1499 : 				this->_Myptr() + _Off + _N0,
; 1500 : 				_Nm);	// smaller hole, move tail up
; 1501 : 		const size_type _Num = this->_Mysize() + _Count - _N0;
; 1502 : 		if ((0 < _Count || 0 < _N0)
; 1503 : 			&& _Grow(_Num))
; 1504 : 			{	// make room and rearrange
; 1505 : 			if (_N0 < _Count)
; 1506 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1507 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1508 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1509 : 			_Eos(_Num);
; 1510 : 			}
; 1511 : 		return (*this);
; 1512 : 		}
; 1513 : 
; 1514 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1515 : 		const _Myt& _Right)
; 1516 : 		{	// replace [_First, _Last) with _Right
; 1517 : 		return (replace(_First - begin(), _Last - _First, _Right));
; 1518 : 		}
; 1519 : 
; 1520 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1521 : 		const _Elem *_Ptr, size_type _Count)
; 1522 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1523 : 		return (replace(_First - begin(), _Last - _First, _Ptr, _Count));
; 1524 : 		}
; 1525 : 
; 1526 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1527 : 		const _Elem *_Ptr)
; 1528 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1529 : 		return (replace(_First - begin(), _Last - _First, _Ptr));
; 1530 : 		}
; 1531 : 
; 1532 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1533 : 		size_type _Count, _Elem _Ch)
; 1534 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1535 : 		return (replace(_First - begin(), _Last - _First, _Count, _Ch));
; 1536 : 		}
; 1537 : 
; 1538 : 	template<class _Iter>
; 1539 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1540 : 			_Myt&>::type
; 1541 : 		replace(const_iterator _First, const_iterator _Last,
; 1542 : 			_Iter _First2, _Iter _Last2)
; 1543 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1544 : 		_Myt _Right(_First2, _Last2);
; 1545 : 		replace(_First, _Last, _Right);
; 1546 : 		return (*this);
; 1547 : 		}
; 1548 : 
; 1549 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1550 : 		const_pointer _First2, const_pointer _Last2)
; 1551 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1552 : 		if (_First2 == _Last2)
; 1553 : 			erase(_First - begin(), _Last - _First);
; 1554 : 		else
; 1555 : 			replace(_First - begin(), _Last - _First,
; 1556 : 				&*_First2, _Last2 - _First2);
; 1557 : 		return (*this);
; 1558 : 		}
; 1559 : 
; 1560 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1561 : 		pointer _First2, pointer _Last2)
; 1562 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1563 : 		if (_First2 == _Last2)
; 1564 : 			erase(_First - begin(), _Last - _First);
; 1565 : 		else
; 1566 : 			replace(_First - begin(), _Last - _First,
; 1567 : 				&*_First2, _Last2 - _First2);
; 1568 : 		return (*this);
; 1569 : 		}
; 1570 : 
; 1571 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1572 : 		const_iterator _First2, const_iterator _Last2)
; 1573 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1574 : 		if (_First2 == _Last2)
; 1575 : 			erase(_First - begin(), _Last - _First);
; 1576 : 		else
; 1577 : 			replace(_First - begin(), _Last - _First,
; 1578 : 				&*_First2, _Last2 - _First2);
; 1579 : 		return (*this);
; 1580 : 		}
; 1581 : 
; 1582 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1583 : 		iterator _First2, iterator _Last2)
; 1584 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1585 : 		if (_First2 == _Last2)
; 1586 : 			erase(_First - begin(), _Last - _First);
; 1587 : 		else
; 1588 : 			replace(_First - begin(), _Last - _First,
; 1589 : 				&*_First2, _Last2 - _First2);
; 1590 : 		return (*this);
; 1591 : 		}
; 1592 : 
; 1593 : 	iterator begin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of mutable sequence
; 1595 : 		auto _Mydata = &this->_Get_data();
; 1596 : 		return (iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
; 1597 : 		}
; 1598 : 
; 1599 : 	const_iterator begin() const _NOEXCEPT
; 1600 : 		{	// return iterator for beginning of nonmutable sequence
; 1601 : 		auto _Mydata = &this->_Get_data();
; 1602 : 		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));
; 1603 : 		}
; 1604 : 
; 1605 : 	iterator end() _NOEXCEPT
; 1606 : 		{	// return iterator for end of mutable sequence
; 1607 : 		auto _Mydata = &this->_Get_data();
; 1608 : 		return (iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
; 1609 : 		}
; 1610 : 
; 1611 : 	const_iterator end() const _NOEXCEPT
; 1612 : 		{	// return iterator for end of nonmutable sequence
; 1613 : 		auto _Mydata = &this->_Get_data();
; 1614 : 		return (const_iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));
; 1615 : 		}
; 1616 : 
; 1617 : 	reverse_iterator rbegin() _NOEXCEPT
; 1618 : 		{	// return iterator for beginning of reversed mutable sequence
; 1619 : 		return (reverse_iterator(end()));
; 1620 : 		}
; 1621 : 
; 1622 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1623 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1624 : 		return (const_reverse_iterator(end()));
; 1625 : 		}
; 1626 : 
; 1627 : 	reverse_iterator rend() _NOEXCEPT
; 1628 : 		{	// return iterator for end of reversed mutable sequence
; 1629 : 		return (reverse_iterator(begin()));
; 1630 : 		}
; 1631 : 
; 1632 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1633 : 		{	// return iterator for end of reversed nonmutable sequence
; 1634 : 		return (const_reverse_iterator(begin()));
; 1635 : 		}
; 1636 : 
; 1637 : 	const_iterator cbegin() const _NOEXCEPT
; 1638 : 		{	// return iterator for beginning of nonmutable sequence
; 1639 : 		return (begin());
; 1640 : 		}
; 1641 : 
; 1642 : 	const_iterator cend() const _NOEXCEPT
; 1643 : 		{	// return iterator for end of nonmutable sequence
; 1644 : 		return (end());
; 1645 : 		}
; 1646 : 
; 1647 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1648 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1649 : 		return (rbegin());
; 1650 : 		}
; 1651 : 
; 1652 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1653 : 		{	// return iterator for end of reversed nonmutable sequence
; 1654 : 		return (rend());
; 1655 : 		}
; 1656 : 
; 1657 : 	void shrink_to_fit()
; 1658 : 		{	// reduce capacity
; 1659 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1660 : 			{	// worth shrinking, do it
; 1661 : 			_Myt _Tmp(*this);
; 1662 : 			swap(_Tmp);
; 1663 : 			}
; 1664 : 		}
; 1665 : 
; 1666 : 	reference at(size_type _Off)
; 1667 : 		{	// subscript mutable sequence with checking
; 1668 : 		_Check_offset_exclusive(_Off);
; 1669 : 		return (this->_Myptr()[_Off]);
; 1670 : 		}
; 1671 : 
; 1672 : 	const_reference at(size_type _Off) const
; 1673 : 		{	// subscript nonmutable sequence with checking
; 1674 : 		_Check_offset_exclusive(_Off);
; 1675 : 		return (this->_Myptr()[_Off]);
; 1676 : 		}
; 1677 : 
; 1678 : 	reference operator[](size_type _Off)
; 1679 : 		{	// subscript mutable sequence
; 1680 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1681 : 		if (this->_Mysize() < _Off)	// sic
; 1682 : 			_DEBUG_ERROR("string subscript out of range");
; 1683 : 
; 1684 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1685 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1686 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1687 : 
; 1688 : 		return (this->_Myptr()[_Off]);
; 1689 : 		}
; 1690 : 
; 1691 : 	const_reference operator[](size_type _Off) const
; 1692 : 		{	// subscript nonmutable sequence
; 1693 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1694 : 		if (this->_Mysize() < _Off)	// sic
; 1695 : 			_DEBUG_ERROR("string subscript out of range");
; 1696 : 
; 1697 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1698 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1699 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1700 : 
; 1701 : 		return (this->_Myptr()[_Off]);
; 1702 : 		}
; 1703 : 
; 1704 : 	void push_back(_Elem _Ch)
; 1705 : 		{	// insert element at end
; 1706 : 		auto& _Dx = this->_Get_data();
; 1707 : 		auto& _Sz = _Dx._Mysize;
; 1708 : 		if (_Sz == _Dx._Myres)
; 1709 : 			_Grow(_Sz + 1); // _Grow checks for overflow
; 1710 : 		auto _Ptr = _Dx._Myptr();
; 1711 : 		_Traits::assign(_Ptr[_Sz], _Ch);
; 1712 : 		++_Sz;
; 1713 : 		_Traits::assign(_Ptr[_Sz], _Elem());
; 1714 : 		}
; 1715 : 
; 1716 : 	void pop_back()
; 1717 : 		{	// erase element at end
; 1718 : 		erase(this->_Mysize() - 1);	// throws if _Mysize() == 0
; 1719 : 		}
; 1720 : 
; 1721 : 	reference front()
; 1722 : 		{	// return first element of mutable sequence
; 1723 : 		return (*begin());
; 1724 : 		}
; 1725 : 
; 1726 : 	const_reference front() const
; 1727 : 		{	// return first element of nonmutable sequence
; 1728 : 		return (*begin());
; 1729 : 		}
; 1730 : 
; 1731 : 	reference back()
; 1732 : 		{	// return last element of mutable sequence
; 1733 : 		return (*(end() - 1));
; 1734 : 		}
; 1735 : 
; 1736 : 	const_reference back() const
; 1737 : 		{	// return last element of nonmutable sequence
; 1738 : 		return (*(end() - 1));
; 1739 : 		}
; 1740 : 
; 1741 : 	const _Elem *c_str() const _NOEXCEPT
; 1742 : 		{	// return pointer to null-terminated nonmutable array
; 1743 : 		return (this->_Myptr());
; 1744 : 		}
; 1745 : 
; 1746 : 	const _Elem *data() const _NOEXCEPT
; 1747 : 		{	// return pointer to nonmutable array
; 1748 : 		return (this->_Myptr());
; 1749 : 		}
; 1750 : 
; 1751 : #if _HAS_CXX17
; 1752 : 	_Elem *data() _NOEXCEPT
; 1753 : 		{	// return pointer to mutable array
; 1754 : 		return (this->_Myptr());
; 1755 : 		}
; 1756 : #endif /* _HAS_CXX17 */
; 1757 : 
; 1758 : 	size_type length() const _NOEXCEPT
; 1759 : 		{	// return length of sequence
; 1760 : 		return (this->_Mysize());
; 1761 : 		}
; 1762 : 
; 1763 : 	size_type size() const _NOEXCEPT
; 1764 : 		{	// return length of sequence
; 1765 : 		return (this->_Mysize());
; 1766 : 		}
; 1767 : 
; 1768 : 	size_type max_size() const _NOEXCEPT
; 1769 : 		{	// return maximum possible length of sequence
; 1770 : 		const size_type _Num = this->_Getal().max_size();
; 1771 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1772 : 		}
; 1773 : 
; 1774 : 	void resize(size_type _Newsize)
; 1775 : 		{	// determine new length, padding with null elements as needed
; 1776 : 		resize(_Newsize, _Elem());
; 1777 : 		}
; 1778 : 
; 1779 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1780 : 		{	// determine new length, padding with _Ch elements as needed
; 1781 : 		if (_Newsize <= this->_Mysize())
; 1782 : 			_Eos(_Newsize);
; 1783 : 		else
; 1784 : 			append(_Newsize - this->_Mysize(), _Ch);
; 1785 : 		}
; 1786 : 
; 1787 : 	size_type capacity() const _NOEXCEPT
; 1788 : 		{	// return current length of allocated storage
; 1789 : 		return (this->_Myres());
; 1790 : 		}
; 1791 : 
; 1792 : 	void reserve(size_type _Newcap = 0)
; 1793 : 		{	// determine new minimum length of allocated storage
; 1794 : 		if (this->_Mysize() <= _Newcap && this->_Myres() != _Newcap)
; 1795 : 			{	// change reservation
; 1796 : 			size_type _Size = this->_Mysize();
; 1797 : 			if (_Grow(_Newcap, true))
; 1798 : 				_Eos(_Size);
; 1799 : 			}
; 1800 : 		}
; 1801 : 
; 1802 : 	bool empty() const _NOEXCEPT
; 1803 : 		{	// test if sequence is empty
; 1804 : 		return (this->_Mysize() == 0);
; 1805 : 		}
; 1806 : 
; 1807 : 	_SCL_INSECURE_DEPRECATE_FN(basic_string::copy)
; 1808 : 	size_type copy(_Elem *_Ptr,
; 1809 : 		size_type _Count, size_type _Off = 0) const
; 1810 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1811 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1812 : 		_Check_offset(_Off);
; 1813 : 		_Count = _Clamp_suffix_size(_Off, _Count);
; 1814 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1815 : 		return (_Count);
; 1816 : 		}
; 1817 : 
; 1818 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1819 : 		size_type _Count, size_type _Off = 0) const
; 1820 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1821 : 		_DEBUG_POINTER_IF(_Count != 0, _Dest);
; 1822 : 		_Check_offset(_Off);
; 1823 : 		_Count = _Clamp_suffix_size(_Off, _Count);
; 1824 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1825 : 		return (_Count);
; 1826 : 		}
; 1827 : 
; 1828 : 	void _Swap_bx(_Myt& _Right)
; 1829 : 		{	// exchange _Bx() with _Right._Bx()
; 1830 : 		if (this->_BUF_SIZE <= this->_Myres())
; 1831 : 			if (this->_BUF_SIZE <= _Right._Myres())
; 1832 : 				_Swap_adl(this->_Bx()._Ptr, _Right._Bx()._Ptr);
; 1833 : 			else
; 1834 : 				{	// swap large with small
; 1835 : 				pointer _Ptr = this->_Bx()._Ptr;
; 1836 : 				this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 1837 : 				_Traits::copy(this->_Bx()._Buf,
; 1838 : 					_Right._Bx()._Buf, _Right._Mysize() + 1);
; 1839 : 				this->_Getal().construct(_STD addressof(_Right._Bx()._Ptr), _Ptr);
; 1840 : 				}
; 1841 : 		else
; 1842 : 			if (_Right._Myres() < this->_BUF_SIZE)
; 1843 : 				_STD swap(this->_Bx()._Buf, _Right._Bx()._Buf);
; 1844 : 			else
; 1845 : 				{	// swap small with large
; 1846 : 				pointer _Ptr = _Right._Bx()._Ptr;
; 1847 : 				this->_Getal().destroy(_STD addressof(_Right._Bx()._Ptr));
; 1848 : 				_Traits::copy(_Right._Bx()._Buf,
; 1849 : 					this->_Bx()._Buf, this->_Mysize() + 1);
; 1850 : 				this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Ptr);
; 1851 : 				}
; 1852 : 		}
; 1853 : 
; 1854 : 	void swap(_Myt& _Right)
; 1855 : 		_NOEXCEPT_OP(_Alty::propagate_on_container_swap::value
; 1856 : 			|| _Alty::is_always_equal::value)
; 1857 : 		{	// exchange contents with _Right
; 1858 : 		if (this != &_Right)
; 1859 : 			{	// (maybe) swap allocators, swap control information
; 1860 : 			_Pocs(this->_Getal(), _Right._Getal());
; 1861 : 			this->_Swap_all(_Right);
; 1862 : 			_Swap_bx(_Right);
; 1863 : 			_STD swap(this->_Mysize(), _Right._Mysize());
; 1864 : 			_STD swap(this->_Myres(), _Right._Myres());
; 1865 : 			}
; 1866 : 		}
; 1867 : 
; 1868 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1869 : 		{	// look for _Right beginning at or after _Off
; 1870 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1871 : 		}
; 1872 : 
; 1873 : 	size_type find(const _Elem *_Ptr,
; 1874 : 		size_type _Off, size_type _Count) const
; 1875 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1876 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1877 : 		if (_Count == 0 && _Off <= this->_Mysize())
; 1878 : 			return (_Off);	// null string always matches (if inside string)
; 1879 : 
; 1880 : 		size_type _Nm;
; 1881 : 		if (_Off < this->_Mysize() && _Count <= (_Nm = this->_Mysize() - _Off))
; 1882 : 			{	// room for match, look for it
; 1883 : 			const _Elem *_Uptr, *_Vptr;
; 1884 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1885 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1886 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1887 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1888 : 					return (_Uptr - this->_Myptr());	// found a match
; 1889 : 			}
; 1890 : 
; 1891 : 		return (npos);	// no match
; 1892 : 		}
; 1893 : 
; 1894 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1895 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1896 : 		_DEBUG_POINTER(_Ptr);
; 1897 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1898 : 		}
; 1899 : 
; 1900 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1901 : 		{	// look for _Ch at or after _Off
; 1902 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1903 : 		}
; 1904 : 
; 1905 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1906 : 		{	// look for _Right beginning before _Off
; 1907 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1908 : 		}
; 1909 : 
; 1910 : 	size_type rfind(const _Elem *_Ptr,
; 1911 : 		size_type _Off, size_type _Count) const
; 1912 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1913 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1914 : 		if (_Count == 0)
; 1915 : 			return (_Off < this->_Mysize() ? _Off
; 1916 : 				: this->_Mysize());	// null always matches
; 1917 : 		if (_Count <= this->_Mysize())
; 1918 : 			{	// room for match, look for it
; 1919 : 			const _Elem *_Uptr = this->_Myptr() +
; 1920 : 				(_Off < this->_Mysize() - _Count ? _Off
; 1921 : 					: this->_Mysize() - _Count);
; 1922 : 			for (; ; --_Uptr)
; 1923 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1924 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1925 : 					return (_Uptr - this->_Myptr());	// found a match
; 1926 : 				else if (_Uptr == this->_Myptr())
; 1927 : 					break;	// at beginning, no more chance for match
; 1928 : 			}
; 1929 : 
; 1930 : 		return (npos);	// no match
; 1931 : 		}
; 1932 : 
; 1933 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1934 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1935 : 		_DEBUG_POINTER(_Ptr);
; 1936 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1937 : 		}
; 1938 : 
; 1939 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1940 : 		{	// look for _Ch before _Off
; 1941 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1942 : 		}
; 1943 : 
; 1944 : 	size_type find_first_of(const _Myt& _Right,
; 1945 : 		size_type _Off = 0) const _NOEXCEPT
; 1946 : 		{	// look for one of _Right at or after _Off
; 1947 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1948 : 		}
; 1949 : 
; 1950 : 	size_type find_first_of(const _Elem *_Ptr,
; 1951 : 		size_type _Off, size_type _Count) const
; 1952 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1953 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1954 : 		if (0 < _Count && _Off < this->_Mysize())
; 1955 : 			{	// room for match, look for it
; 1956 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 1957 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1958 : 				_Uptr < _Vptr; ++_Uptr)
; 1959 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1960 : 					return (_Uptr - this->_Myptr());	// found a match
; 1961 : 			}
; 1962 : 
; 1963 : 		return (npos);	// no match
; 1964 : 		}
; 1965 : 
; 1966 : 	size_type find_first_of(const _Elem *_Ptr,
; 1967 : 		size_type _Off = 0) const
; 1968 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1969 : 		_DEBUG_POINTER(_Ptr);
; 1970 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1971 : 		}
; 1972 : 
; 1973 : 	size_type find_first_of(_Elem _Ch,
; 1974 : 		size_type _Off = 0) const
; 1975 : 		{	// look for _Ch at or after _Off
; 1976 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1977 : 		}
; 1978 : 
; 1979 : 	size_type find_last_of(const _Myt& _Right,
; 1980 : 		size_type _Off = npos) const _NOEXCEPT
; 1981 : 		{	// look for one of _Right before _Off
; 1982 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1983 : 		}
; 1984 : 
; 1985 : 	size_type find_last_of(const _Elem *_Ptr,
; 1986 : 		size_type _Off, size_type _Count) const
; 1987 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1988 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1989 : 		if (0 < _Count && 0 < this->_Mysize())
; 1990 : 			{	// worth searching, do it
; 1991 : 			const _Elem *_Uptr = this->_Myptr()
; 1992 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 1993 : 			for (; ; --_Uptr)
; 1994 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1995 : 					return (_Uptr - this->_Myptr());	// found a match
; 1996 : 				else if (_Uptr == this->_Myptr())
; 1997 : 					break;	// at beginning, no more chance for match
; 1998 : 			}
; 1999 : 
; 2000 : 		return (npos);	// no match
; 2001 : 		}
; 2002 : 
; 2003 : 	size_type find_last_of(const _Elem *_Ptr,
; 2004 : 		size_type _Off = npos) const
; 2005 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2006 : 		_DEBUG_POINTER(_Ptr);
; 2007 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2008 : 		}
; 2009 : 
; 2010 : 	size_type find_last_of(_Elem _Ch,
; 2011 : 		size_type _Off = npos) const
; 2012 : 		{	// look for _Ch before _Off
; 2013 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2014 : 		}
; 2015 : 
; 2016 : 	size_type find_first_not_of(const _Myt& _Right,
; 2017 : 		size_type _Off = 0) const _NOEXCEPT
; 2018 : 		{	// look for none of _Right at or after _Off
; 2019 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2020 : 			_Right.size()));
; 2021 : 		}
; 2022 : 
; 2023 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2024 : 		size_type _Off, size_type _Count) const
; 2025 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2026 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2027 : 		if (_Off < this->_Mysize())
; 2028 : 			{	// room for match, look for it
; 2029 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize();
; 2030 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2031 : 				_Uptr < _Vptr; ++_Uptr)
; 2032 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2033 : 					return (_Uptr - this->_Myptr());
; 2034 : 			}
; 2035 : 		return (npos);
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off = 0) const
; 2040 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2041 : 		_DEBUG_POINTER(_Ptr);
; 2042 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2043 : 		}
; 2044 : 
; 2045 : 	size_type find_first_not_of(_Elem _Ch,
; 2046 : 		size_type _Off = 0) const
; 2047 : 		{	// look for non _Ch at or after _Off
; 2048 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2049 : 		}
; 2050 : 
; 2051 : 	size_type find_last_not_of(const _Myt& _Right,
; 2052 : 		size_type _Off = npos) const _NOEXCEPT
; 2053 : 		{	// look for none of _Right before _Off
; 2054 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off, size_type _Count) const
; 2059 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2060 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2061 : 		if (0 < this->_Mysize())
; 2062 : 			{	// worth searching, do it
; 2063 : 			const _Elem *_Uptr = this->_Myptr()
; 2064 : 				+ (_Off < this->_Mysize() ? _Off : this->_Mysize() - 1);
; 2065 : 			for (; ; --_Uptr)
; 2066 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2067 : 					return (_Uptr - this->_Myptr());
; 2068 : 				else if (_Uptr == this->_Myptr())
; 2069 : 					break;
; 2070 : 			}
; 2071 : 		return (npos);
; 2072 : 		}
; 2073 : 
; 2074 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2075 : 		size_type _Off = npos) const
; 2076 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2077 : 		_DEBUG_POINTER(_Ptr);
; 2078 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2079 : 		}
; 2080 : 
; 2081 : 	size_type find_last_not_of(_Elem _Ch,
; 2082 : 		size_type _Off = npos) const
; 2083 : 		{	// look for non _Ch before _Off
; 2084 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2085 : 		}
; 2086 : 
; 2087 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2088 : 		{	// return [_Off, _Off + _Count) as new string
; 2089 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2090 : 		}
; 2091 : 
; 2092 : 	static int _Traits_compare(const _Elem * const _Left, const size_type _Left_size,
; 2093 : 		const _Elem * const _Right, const size_type _Right_size)
; 2094 : 		{	// compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 2095 : 		const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;
; 2096 : 		const int _Ans = _Traits::compare(_Left, _Right, _Min_size);
; 2097 : 
; 2098 : 		if (_Ans != 0)
; 2099 : 			return (_Ans);
; 2100 : 
; 2101 : 		if (_Left_size < _Right_size)
; 2102 : 			return (-1);
; 2103 : 
; 2104 : 		if (_Left_size > _Right_size)
; 2105 : 			return (1);
; 2106 : 
; 2107 : 		return (0);
; 2108 : 		}
; 2109 : 
; 2110 : 	size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const
; 2111 : 		{	// trims _Size to the longest it can be assuming a string starting at _Off
; 2112 : 		const size_type _Max_effective_size = this->_Mysize() - _Off;
; 2113 : 		if (_Size <= _Max_effective_size)
; 2114 : 			return (_Size);
; 2115 : 		else
; 2116 : 			return (_Max_effective_size);
; 2117 : 		}
; 2118 : 
; 2119 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2120 : 		{	// compare [0, _Mysize()) with _Right
; 2121 : 		return (_Traits_compare(this->_Myptr(), this->_Mysize(),
; 2122 : 			_Right._Myptr(), _Right._Mysize()));
; 2123 : 		}
; 2124 : 
; 2125 : 	int compare(size_type _Off,
; 2126 : 		size_type _N0, const _Myt& _Right) const
; 2127 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2128 : 		_Check_offset(_Off);
; 2129 : 		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
; 2130 : 			_Right._Myptr(), _Right._Mysize()));
; 2131 : 		}
; 2132 : 
; 2133 : 	int compare(size_type _Off,
; 2134 : 		size_type _N0, const _Myt& _Right,
; 2135 : 		size_type _Roff, size_type _Count = npos) const
; 2136 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2137 : 		_Check_offset(_Off);
; 2138 : 		_Right._Check_offset(_Roff);
; 2139 : 		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
; 2140 : 			_Right._Myptr() + _Roff, _Right._Clamp_suffix_size(_Roff, _Count)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(const _Elem *_Ptr) const
; 2144 : 		{	// compare [0, _Mysize()) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (_Traits_compare(this->_Myptr(), this->_Mysize(),
; 2147 : 			_Ptr, _Traits::length(_Ptr)));
; 2148 : 		}
; 2149 : 
; 2150 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2152 : 		_DEBUG_POINTER(_Ptr);
; 2153 : 		_Check_offset(_Off);
; 2154 : 		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
; 2155 : 			_Ptr, _Traits::length(_Ptr)));
; 2156 : 		}
; 2157 : 
; 2158 : 	int compare(size_type _Off,
; 2159 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2160 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2161 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 2162 : 		_Check_offset(_Off);
; 2163 : 		return (_Traits_compare(this->_Myptr() + _Off, _Clamp_suffix_size(_Off, _N0),
; 2164 : 			_Ptr, _Count));
; 2165 : 		}
; 2166 : 
; 2167 : 	allocator_type get_allocator() const _NOEXCEPT
; 2168 : 		{	// return allocator object for values
; 2169 : 		allocator_type _Ret(this->_Getal());
; 2170 : 		return (_Ret);
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres() / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)
; 2189 : 			_Newres = this->_Myres()
; 2190 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		pointer _Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL

  0002f	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00034	53		 push	 rbx
  00035	55		 push	 rbp
  00036	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0003a	48 8b ea	 mov	 rbp, rdx
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z$1:

; 734  : 		return (_Get_data()._Myres);

  0003d	48 8b 5d 60	 mov	 rbx, QWORD PTR this$[rbp]

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00041	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00045	48 83 f8 10	 cmp	 rax, 16
  00049	72 57		 jb	 SHORT $LN236@catch$106

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;
; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));
; 2255 : 			if (0 < _Newsize)
; 2256 : 				_Traits::copy(this->_Bx()._Buf,
; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0004b	48 ff c0	 inc	 rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  0004e	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]

; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00051	48 83 f8 ff	 cmp	 rax, -1
  00055	76 06		 jbe	 SHORT $LN230@catch$106
  00057	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0005c	cc		 int	 3
$LN230@catch$106:

; 95   : 	const size_t _User_size = _Count * _Sz;
; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0005d	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  00063	72 38		 jb	 SHORT $LN231@catch$106

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00065	f6 c1 1f	 test	 cl, 31
  00068	74 06		 je	 SHORT $LN232@catch$106
  0006a	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0006f	cc		 int	 3
$LN232@catch$106:

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00070	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00074	48 3b c1	 cmp	 rax, rcx
  00077	72 06		 jb	 SHORT $LN233@catch$106
  00079	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0007e	cc		 int	 3
$LN233@catch$106:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0007f	48 2b c8	 sub	 rcx, rax
  00082	48 83 f9 08	 cmp	 rcx, 8
  00086	73 06		 jae	 SHORT $LN234@catch$106
  00088	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0008d	cc		 int	 3
$LN234@catch$106:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0008e	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  00092	76 06		 jbe	 SHORT $LN235@catch$106
  00094	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00099	cc		 int	 3
$LN235@catch$106:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0009a	48 8b c8	 mov	 rcx, rax
$LN231@catch$106:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  0009d	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN236@catch$106:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  000a2	48 c7 43 18 0f
	00 00 00	 mov	 QWORD PTR [rbx+24], 15

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  000aa	48 c7 43 10 00
	00 00 00	 mov	 QWORD PTR [rbx+16], 0

; 514  : 		return (this->_BUF_SIZE <= _Myres

  000b2	48 83 7b 18 10	 cmp	 QWORD PTR [rbx+24], 16
  000b7	72 03		 jb	 SHORT $LN260@catch$106
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  000b9	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]
$LN260@catch$106:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  000bc	c6 03 00	 mov	 BYTE PTR [rbx], 0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2203 : 			_RERAISE;

  000bf	33 d2		 xor	 edx, edx
  000c1	33 c9		 xor	 ecx, ecx
  000c3	e8 00 00 00 00	 call	 _CxxThrowException
  000c8	90		 npad	 1
?catch$106@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$106
text$x	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT

; 1770 : 		const size_type _Num = this->_Getal().max_size();
; 1771 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2

; 1772 : 		}

  00007	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 719  : 		{	// deallocate object at _Ptr

$LN18:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00004	49 81 f8 00 10
	00 00		 cmp	 r8, 4096		; 00001000H
  0000b	72 20		 jb	 SHORT $LN5@deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  0000d	f6 c2 1f	 test	 dl, 31
  00010	75 27		 jne	 SHORT $LN13@deallocate

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00012	48 8b 42 f8	 mov	 rax, QWORD PTR [rdx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00016	48 3b c2	 cmp	 rax, rdx
  00019	73 24		 jae	 SHORT $LN15@deallocate

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0001b	48 2b d0	 sub	 rdx, rax
  0001e	48 83 fa 08	 cmp	 rdx, 8
  00022	72 21		 jb	 SHORT $LN16@deallocate

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00024	48 83 fa 27	 cmp	 rdx, 39			; 00000027H
  00028	77 21		 ja	 SHORT $LN17@deallocate

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002a	48 8b d0	 mov	 rdx, rax
$LN5@deallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  0002d	48 8b ca	 mov	 rcx, rdx

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));
; 721  : 		}

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 132  : 	::operator delete(_Ptr);

  00034	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
$LN13@deallocate:

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00039	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0003e	cc		 int	 3
$LN15@deallocate:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  0003f	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00044	cc		 int	 3
$LN16@deallocate:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00045	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0004a	cc		 int	 3
$LN17@deallocate:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  0004b	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00050	cc		 int	 3
$LN12@deallocate:
?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second, COMDAT

; 315  : 		return (_Myval2);

  00000	48 8b c1	 mov	 rax, rcx

; 316  : 		}

  00003	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_second, COMDAT

; 320  : 		return (_Myval2);

  00000	48 8b c1	 mov	 rax, rcx

; 321  : 		}

  00003	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_first, COMDAT

; 300  : 		return (*this);

  00000	48 8b c1	 mov	 rax, rcx

; 301  : 		}

  00003	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@URow@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SA_KAEBV?$allocator@URow@@@2@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
?max_size@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SA_KAEBV?$allocator@URow@@@2@@Z PROC ; std::allocator_traits<std::allocator<Row> >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

  00000	48 b8 84 f6 12
	da 4b 68 2f 01	 mov	 rax, 85401592933840516	; 012f684bda12f684H

; 870  : 		}

  0000a	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SA_KAEBV?$allocator@URow@@@2@@Z ENDP ; std::allocator_traits<std::allocator<Row> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@URow@@@std@@QEAAPEAURow@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$allocator@URow@@@std@@QEAAPEAURow@@_K@Z PROC ; std::allocator<Row>::allocate, COMDAT

; 724  : 		{	// allocate array of _Count elements

$LN17:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 51   : 	if (_Count == 0)

  00004	48 85 d2	 test	 rdx, rdx
  00007	75 09		 jne	 SHORT $LN4@allocate

; 52   : 		return (_Ptr);

  00009	33 c9		 xor	 ecx, ecx

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  0000b	8b c1		 mov	 eax, ecx

; 726  : 		}

  0000d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00011	c3		 ret	 0
$LN4@allocate:

; 55   : 	if ((size_t)(-1) / _Sz < _Count)

  00012	48 b8 84 f6 12
	da 4b 68 2f 01	 mov	 rax, 85401592933840516	; 012f684bda12f684H
  0001c	48 3b d0	 cmp	 rdx, rax
  0001f	77 42		 ja	 SHORT $LN14@allocate

; 57   : 	const size_t _User_size = _Count * _Sz;

  00021	48 69 ca d8 00
	00 00		 imul	 rcx, rdx, 216		; 000000d8H

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00028	48 81 f9 00 10
	00 00		 cmp	 rcx, 4096		; 00001000H
  0002f	72 25		 jb	 SHORT $LN6@allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  00031	48 8d 41 27	 lea	 rax, QWORD PTR [rcx+39]

; 66   : 		if (_Block_size <= _User_size)

  00035	48 3b c1	 cmp	 rax, rcx
  00038	76 2f		 jbe	 SHORT $LN16@allocate

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);
; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00042	48 8d 48 27	 lea	 rcx, QWORD PTR [rax+39]
  00046	48 83 e1 e0	 and	 rcx, -32		; ffffffffffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0004a	48 89 41 f8	 mov	 QWORD PTR [rcx-8], rax

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  0004e	48 8b c1	 mov	 rax, rcx

; 726  : 		}

  00051	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00055	c3		 ret	 0
$LN6@allocate:

; 83   : 		_Ptr = ::operator new(_User_size);

  00056	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0005b	48 8b c8	 mov	 rcx, rax

; 726  : 		}

  0005e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00062	c3		 ret	 0
$LN14@allocate:

; 56   : 		_Xbad_alloc();	// report no memory

  00063	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00068	cc		 int	 3
$LN16@allocate:

; 67   : 			_Xbad_alloc();	// report no memory

  00069	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0006e	cc		 int	 3
$LN13@allocate:
?allocate@?$allocator@URow@@@std@@QEAAPEAURow@@_K@Z ENDP ; std::allocator<Row>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT

; 1008 : 		return (_Mytraits::max_size(*this));

  00000	48 83 c8 ff	 or	 rax, -1

; 1009 : 		}

  00004	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT

; 975  : 		{	// allocate array of _Count elements

$LN19:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 51   : 	if (_Count == 0)

  00004	48 85 d2	 test	 rdx, rdx
  00007	75 09		 jne	 SHORT $LN6@allocate

; 52   : 		return (_Ptr);

  00009	33 c9		 xor	 ecx, ecx

; 976  : 		return (_Mybase::allocate(_Count));

  0000b	8b c1		 mov	 eax, ecx

; 977  : 		}

  0000d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00011	c3		 ret	 0
$LN6@allocate:

; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00012	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  00019	72 22		 jb	 SHORT $LN8@allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001b	48 8d 4a 27	 lea	 rcx, QWORD PTR [rdx+39]

; 66   : 		if (_Block_size <= _User_size)

  0001f	48 3b ca	 cmp	 rcx, rdx
  00022	76 29		 jbe	 SHORT $LN17@allocate

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00024	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);
; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00029	48 8d 48 27	 lea	 rcx, QWORD PTR [rax+39]
  0002d	48 83 e1 e0	 and	 rcx, -32		; ffffffffffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00031	48 89 41 f8	 mov	 QWORD PTR [rcx-8], rax

; 976  : 		return (_Mybase::allocate(_Count));

  00035	48 8b c1	 mov	 rax, rcx

; 977  : 		}

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
$LN8@allocate:

; 83   : 		_Ptr = ::operator new(_User_size);

  0003d	48 8b ca	 mov	 rcx, rdx
  00040	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00045	48 8b c8	 mov	 rcx, rax

; 977  : 		}

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
$LN17@allocate:

; 67   : 			_Xbad_alloc();	// report no memory

  0004d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00052	cc		 int	 3
$LN16@allocate:
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@URow@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$allocator@URow@@@std@@QEBA_KXZ PROC		; std::allocator<Row>::max_size, COMDAT

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	48 b8 84 f6 12
	da 4b 68 2f 01	 mov	 rax, 85401592933840516	; 012f684bda12f684H

; 750  : 		}

  0000a	c3		 ret	 0
?max_size@?$allocator@URow@@@std@@QEBA_KXZ ENDP		; std::allocator<Row>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 869  : 		return (_Al.max_size());

  00000	48 83 c8 ff	 or	 rax, -1

; 870  : 		}

  00004	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z PROC		; std::allocator<char>::allocate, COMDAT

; 724  : 		{	// allocate array of _Count elements

$LN16:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 51   : 	if (_Count == 0)

  00004	48 85 d2	 test	 rdx, rdx
  00007	75 09		 jne	 SHORT $LN4@allocate

; 52   : 		return (_Ptr);

  00009	33 c9		 xor	 ecx, ecx

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  0000b	8b c1		 mov	 eax, ecx

; 726  : 		}

  0000d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00011	c3		 ret	 0
$LN4@allocate:

; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00012	48 81 fa 00 10
	00 00		 cmp	 rdx, 4096		; 00001000H
  00019	72 22		 jb	 SHORT $LN6@allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0001b	48 8d 4a 27	 lea	 rcx, QWORD PTR [rdx+39]

; 66   : 		if (_Block_size <= _User_size)

  0001f	48 3b ca	 cmp	 rcx, rdx
  00022	76 29		 jbe	 SHORT $LN14@allocate

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  00024	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);
; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  00029	48 8d 48 27	 lea	 rcx, QWORD PTR [rax+39]
  0002d	48 83 e1 e0	 and	 rcx, -32		; ffffffffffffffe0H

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00031	48 89 41 f8	 mov	 QWORD PTR [rcx-8], rax

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  00035	48 8b c1	 mov	 rax, rcx

; 726  : 		}

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
$LN6@allocate:

; 83   : 		_Ptr = ::operator new(_User_size);

  0003d	48 8b ca	 mov	 rcx, rdx
  00040	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00045	48 8b c8	 mov	 rcx, rax

; 726  : 		}

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
$LN14@allocate:

; 67   : 			_Xbad_alloc();	// report no memory

  0004d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00052	cc		 int	 3
$LN13@allocate:
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$allocator@D@std@@QEBA_KXZ PROC		; std::allocator<char>::max_size, COMDAT

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	48 83 c8 ff	 or	 rax, -1

; 750  : 		}

  00004	c3		 ret	 0
?max_size@?$allocator@D@std@@QEBA_KXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBURow@@@std@@YAPEBURow@@AEBU1@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@$$CBURow@@@std@@YAPEBURow@@AEBU1@@Z PROC	; std::addressof<Row const >, COMDAT

; 725  : 	return (__builtin_addressof(_Val));

  00000	48 8b c1	 mov	 rax, rcx

; 726  : 	}

  00003	c3		 ret	 0
??$addressof@$$CBURow@@@std@@YAPEBURow@@AEBU1@@Z ENDP	; std::addressof<Row const >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@URow@@@std@@YAPEAURow@@PEAU1@@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@URow@@@std@@YAPEAURow@@PEAU1@@Z PROC	; std::_Unfancy<Row>, COMDAT

; 740  : 	return (_Ptr);

  00000	48 8b c1	 mov	 rax, rcx

; 741  : 	}

  00003	c3		 ret	 0
??$_Unfancy@URow@@@std@@YAPEAURow@@PEAU1@@Z ENDP	; std::_Unfancy<Row>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@URow@@AEAU1@@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@AEAU2@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@URow@@AEAU1@@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@AEAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<Row> >::construct<Row,Row & __ptr64>, COMDAT

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00000	48 85 d2	 test	 rdx, rdx
  00003	0f 84 81 00 00
	00		 je	 $LN13@construct
  00009	41 0f 10 00	 movups	 xmm0, XMMWORD PTR [r8]
  0000d	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00010	41 0f 10 48 10	 movups	 xmm1, XMMWORD PTR [r8+16]
  00015	0f 11 4a 10	 movups	 XMMWORD PTR [rdx+16], xmm1
  00019	41 0f 10 40 20	 movups	 xmm0, XMMWORD PTR [r8+32]
  0001e	0f 11 42 20	 movups	 XMMWORD PTR [rdx+32], xmm0
  00022	41 0f 10 48 30	 movups	 xmm1, XMMWORD PTR [r8+48]
  00027	0f 11 4a 30	 movups	 XMMWORD PTR [rdx+48], xmm1
  0002b	41 0f 10 40 40	 movups	 xmm0, XMMWORD PTR [r8+64]
  00030	0f 11 42 40	 movups	 XMMWORD PTR [rdx+64], xmm0
  00034	41 0f 10 48 50	 movups	 xmm1, XMMWORD PTR [r8+80]
  00039	0f 11 4a 50	 movups	 XMMWORD PTR [rdx+80], xmm1
  0003d	41 0f 10 40 60	 movups	 xmm0, XMMWORD PTR [r8+96]
  00042	0f 11 42 60	 movups	 XMMWORD PTR [rdx+96], xmm0
  00046	48 83 ea 80	 sub	 rdx, -128		; ffffffffffffff80H
  0004a	41 0f 10 40 70	 movups	 xmm0, XMMWORD PTR [r8+112]
  0004f	49 83 e8 80	 sub	 r8, -128		; ffffffffffffff80H
  00053	0f 11 42 f0	 movups	 XMMWORD PTR [rdx-16], xmm0
  00057	41 0f 10 08	 movups	 xmm1, XMMWORD PTR [r8]
  0005b	0f 11 0a	 movups	 XMMWORD PTR [rdx], xmm1
  0005e	41 0f 10 40 10	 movups	 xmm0, XMMWORD PTR [r8+16]
  00063	0f 11 42 10	 movups	 XMMWORD PTR [rdx+16], xmm0
  00067	41 0f 10 48 20	 movups	 xmm1, XMMWORD PTR [r8+32]
  0006c	0f 11 4a 20	 movups	 XMMWORD PTR [rdx+32], xmm1
  00070	41 0f 10 40 30	 movups	 xmm0, XMMWORD PTR [r8+48]
  00075	0f 11 42 30	 movups	 XMMWORD PTR [rdx+48], xmm0
  00079	41 0f 10 48 40	 movups	 xmm1, XMMWORD PTR [r8+64]
  0007e	0f 11 4a 40	 movups	 XMMWORD PTR [rdx+64], xmm1
  00082	49 8b 40 50	 mov	 rax, QWORD PTR [r8+80]
  00086	48 89 42 50	 mov	 QWORD PTR [rdx+80], rax
$LN13@construct:

; 995  : 		_Mytraits::construct(*this, _Ptr,
; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0008a	c3		 ret	 0
??$construct@URow@@AEAU1@@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@AEAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<Row> >::construct<Row,Row & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@URow@@AEBU1@@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@AEBU2@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@URow@@AEBU1@@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@AEBU2@@Z PROC ; std::_Wrap_alloc<std::allocator<Row> >::construct<Row,Row const & __ptr64>, COMDAT

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00000	48 85 d2	 test	 rdx, rdx
  00003	0f 84 81 00 00
	00		 je	 $LN13@construct
  00009	41 0f 10 00	 movups	 xmm0, XMMWORD PTR [r8]
  0000d	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00010	41 0f 10 48 10	 movups	 xmm1, XMMWORD PTR [r8+16]
  00015	0f 11 4a 10	 movups	 XMMWORD PTR [rdx+16], xmm1
  00019	41 0f 10 40 20	 movups	 xmm0, XMMWORD PTR [r8+32]
  0001e	0f 11 42 20	 movups	 XMMWORD PTR [rdx+32], xmm0
  00022	41 0f 10 48 30	 movups	 xmm1, XMMWORD PTR [r8+48]
  00027	0f 11 4a 30	 movups	 XMMWORD PTR [rdx+48], xmm1
  0002b	41 0f 10 40 40	 movups	 xmm0, XMMWORD PTR [r8+64]
  00030	0f 11 42 40	 movups	 XMMWORD PTR [rdx+64], xmm0
  00034	41 0f 10 48 50	 movups	 xmm1, XMMWORD PTR [r8+80]
  00039	0f 11 4a 50	 movups	 XMMWORD PTR [rdx+80], xmm1
  0003d	41 0f 10 40 60	 movups	 xmm0, XMMWORD PTR [r8+96]
  00042	0f 11 42 60	 movups	 XMMWORD PTR [rdx+96], xmm0
  00046	48 83 ea 80	 sub	 rdx, -128		; ffffffffffffff80H
  0004a	41 0f 10 40 70	 movups	 xmm0, XMMWORD PTR [r8+112]
  0004f	49 83 e8 80	 sub	 r8, -128		; ffffffffffffff80H
  00053	0f 11 42 f0	 movups	 XMMWORD PTR [rdx-16], xmm0
  00057	41 0f 10 08	 movups	 xmm1, XMMWORD PTR [r8]
  0005b	0f 11 0a	 movups	 XMMWORD PTR [rdx], xmm1
  0005e	41 0f 10 40 10	 movups	 xmm0, XMMWORD PTR [r8+16]
  00063	0f 11 42 10	 movups	 XMMWORD PTR [rdx+16], xmm0
  00067	41 0f 10 48 20	 movups	 xmm1, XMMWORD PTR [r8+32]
  0006c	0f 11 4a 20	 movups	 XMMWORD PTR [rdx+32], xmm1
  00070	41 0f 10 40 30	 movups	 xmm0, XMMWORD PTR [r8+48]
  00075	0f 11 42 30	 movups	 XMMWORD PTR [rdx+48], xmm0
  00079	41 0f 10 48 40	 movups	 xmm1, XMMWORD PTR [r8+64]
  0007e	0f 11 4a 40	 movups	 XMMWORD PTR [rdx+64], xmm1
  00082	49 8b 40 50	 mov	 rax, QWORD PTR [r8+80]
  00086	48 89 42 50	 mov	 QWORD PTR [rdx+80], rax
$LN13@construct:

; 995  : 		_Mytraits::construct(*this, _Ptr,
; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0008a	c3		 ret	 0
??$construct@URow@@AEBU1@@?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAAXPEAURow@@AEBU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<Row> >::construct<Row,Row const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax

; 486  : 		_Mylast(),

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 487  : 		_Myend()

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1><>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 485  : 		: _Myfirst(),

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax

; 486  : 		_Mylast(),

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 487  : 		_Myend()

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@URow@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<Row> >,std::_Vector_val<std::_Simple_types<Row> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 740  : 	return (_Ptr);

  00000	48 8b c1	 mov	 rax, rcx

; 741  : 	}

  00003	c3		 ret	 0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 496  : 		_Mysize(0),

  00000	33 c0		 xor	 eax, eax
  00002	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 497  : 		_Myres(0)

  00006	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 281  : 		}

  0000a	48 8b c1	 mov	 rax, rcx
  0000d	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z PROC		; std::addressof<char * __ptr64>, COMDAT

; 725  : 	return (__builtin_addressof(_Val));

  00000	48 8b c1	 mov	 rax, rcx

; 726  : 	}

  00003	c3		 ret	 0
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ENDP		; std::addressof<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$dead$ = 16
??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char * __ptr64>, COMDAT

; 1003 : 		_Mytraits::destroy(*this, _Ptr);
; 1004 : 		}

  00000	c2 00 00	 ret	 0
??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>, COMDAT

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 06		 je	 SHORT $LN13@construct
  00005	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00008	48 89 02	 mov	 QWORD PTR [rdx], rax
$LN13@construct:

; 995  : 		_Mytraits::construct(*this, _Ptr,
; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0000b	c3		 ret	 0
??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBD@std@@YAPEBDAEBD@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@$$CBD@std@@YAPEBDAEBD@Z PROC		; std::addressof<char const >, COMDAT

; 725  : 	return (__builtin_addressof(_Val));

  00000	48 8b c1	 mov	 rax, rcx

; 726  : 	}

  00003	c3		 ret	 0
??$addressof@$$CBD@std@@YAPEBDAEBD@Z ENDP		; std::addressof<char const >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Al$dead$ = 24
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * __ptr64>, COMDAT

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

  00000	e9 00 00 00 00	 jmp	 ??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * __ptr64>
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PEAURow@@@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAPEAURow@@PEAU2@00@Z
_TEXT	SEGMENT
this$dead$ = 48
_First$ = 56
_Last$ = 64
_Ptr$ = 72
??$_Umove@PEAURow@@@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAPEAURow@@PEAU2@00@Z PROC ; std::vector<Row,std::allocator<Row> >::_Umove<Row * __ptr64>, COMDAT

; 1658 : 		{	// move initializing [_First, _Last), using allocator

$LN28:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b d8	 mov	 rbx, r8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000d	49 8b c9	 mov	 rcx, r9
  00010	48 2b da	 sub	 rbx, rdx
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1658 : 		{	// move initializing [_First, _Last), using allocator

  00013	49 8b f9	 mov	 rdi, r9
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00016	4c 8b c3	 mov	 r8, rbx
  00019	e8 00 00 00 00	 call	 memmove

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  0001e	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector

; 1661 : 		}

  00022	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5f		 pop	 rdi
  0002c	c3		 ret	 0
??$_Umove@PEAURow@@@?$vector@URow@@V?$allocator@URow@@@std@@@std@@IEAAPEAURow@@PEAU2@00@Z ENDP ; std::vector<Row,std::allocator<Row> >::_Umove<Row * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@URow@@@std@@PEAURow@@@std@@YAXPEAURow@@0AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
_Al$dead$ = 24
??$_Destroy_range@V?$allocator@URow@@@std@@PEAURow@@@std@@YAXPEAURow@@0AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Row>,Row * __ptr64>, COMDAT

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<
; 1119 : 		is_trivially_destructible<_Val>,
; 1120 : 		_Uses_default_destroy<_Alloc, _Val *>>::type());
; 1121 : 	}

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@URow@@@std@@PEAURow@@@std@@YAXPEAURow@@0AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Row>,Row * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 485  : 		: _Myfirst(),

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax

; 486  : 		_Mylast(),

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 487  : 		_Myend()

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 489  : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT

; 937  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@URow@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_val@U?$_Simple_types@URow@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<Row> >::_Vector_val<std::_Simple_types<Row> >, COMDAT

; 485  : 		: _Myfirst(),

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax

; 486  : 		_Mylast(),

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 487  : 		_Myend()

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 489  : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@URow@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<Row> >::_Vector_val<std::_Simple_types<Row> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAA@XZ PROC ; std::_Wrap_alloc<std::allocator<Row> >::_Wrap_alloc<std::allocator<Row> >, COMDAT

; 937  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@URow@@@std@@@std@@QEAA@XZ ENDP ; std::_Wrap_alloc<std::allocator<Row> >::_Wrap_alloc<std::allocator<Row> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT

; 496  : 		_Mysize(0),

  00000	33 c0		 xor	 eax, eax
  00002	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 497  : 		_Myres(0)

  00006	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 499  : 		}

  0000a	48 8b c1	 mov	 rax, rcx
  0000d	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT

; 937  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAA@XZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAA@XZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@URow@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@URow@@@std@@QEAA@XZ PROC			; std::allocator<Row>::allocator<Row>, COMDAT

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$allocator@URow@@@std@@QEAA@XZ ENDP			; std::allocator<Row>::allocator<Row>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT

; 529  : 			{	// user-provided, for fancy pointers
; 530  : 			}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEAURow@@@std@@YAAEAURow@@AEAU1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAURow@@@std@@YAAEAURow@@AEAU1@@Z PROC	; std::forward<Row & __ptr64>, COMDAT

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00000	48 8b c1	 mov	 rax, rcx

; 1277 : 	}

  00003	c3		 ret	 0
??$forward@AEAURow@@@std@@YAAEAURow@@AEAU1@@Z ENDP	; std::forward<Row & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@URow@@AEAU1@@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SAXAEAV?$allocator@URow@@@1@PEAURow@@AEAU3@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@URow@@AEAU1@@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SAXAEAV?$allocator@URow@@@1@PEAURow@@AEAU3@@Z PROC ; std::allocator_traits<std::allocator<Row> >::construct<Row,Row & __ptr64>, COMDAT

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00000	48 85 d2	 test	 rdx, rdx
  00003	0f 84 81 00 00
	00		 je	 $LN8@construct
  00009	41 0f 10 00	 movups	 xmm0, XMMWORD PTR [r8]
  0000d	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00010	41 0f 10 48 10	 movups	 xmm1, XMMWORD PTR [r8+16]
  00015	0f 11 4a 10	 movups	 XMMWORD PTR [rdx+16], xmm1
  00019	41 0f 10 40 20	 movups	 xmm0, XMMWORD PTR [r8+32]
  0001e	0f 11 42 20	 movups	 XMMWORD PTR [rdx+32], xmm0
  00022	41 0f 10 48 30	 movups	 xmm1, XMMWORD PTR [r8+48]
  00027	0f 11 4a 30	 movups	 XMMWORD PTR [rdx+48], xmm1
  0002b	41 0f 10 40 40	 movups	 xmm0, XMMWORD PTR [r8+64]
  00030	0f 11 42 40	 movups	 XMMWORD PTR [rdx+64], xmm0
  00034	41 0f 10 48 50	 movups	 xmm1, XMMWORD PTR [r8+80]
  00039	0f 11 4a 50	 movups	 XMMWORD PTR [rdx+80], xmm1
  0003d	41 0f 10 40 60	 movups	 xmm0, XMMWORD PTR [r8+96]
  00042	0f 11 42 60	 movups	 XMMWORD PTR [rdx+96], xmm0
  00046	48 83 ea 80	 sub	 rdx, -128		; ffffffffffffff80H
  0004a	41 0f 10 40 70	 movups	 xmm0, XMMWORD PTR [r8+112]
  0004f	49 83 e8 80	 sub	 r8, -128		; ffffffffffffff80H
  00053	0f 11 42 f0	 movups	 XMMWORD PTR [rdx-16], xmm0
  00057	41 0f 10 08	 movups	 xmm1, XMMWORD PTR [r8]
  0005b	0f 11 0a	 movups	 XMMWORD PTR [rdx], xmm1
  0005e	41 0f 10 40 10	 movups	 xmm0, XMMWORD PTR [r8+16]
  00063	0f 11 42 10	 movups	 XMMWORD PTR [rdx+16], xmm0
  00067	41 0f 10 48 20	 movups	 xmm1, XMMWORD PTR [r8+32]
  0006c	0f 11 4a 20	 movups	 XMMWORD PTR [rdx+32], xmm1
  00070	41 0f 10 40 30	 movups	 xmm0, XMMWORD PTR [r8+48]
  00075	0f 11 42 30	 movups	 XMMWORD PTR [rdx+48], xmm0
  00079	41 0f 10 48 40	 movups	 xmm1, XMMWORD PTR [r8+64]
  0007e	0f 11 4a 40	 movups	 XMMWORD PTR [rdx+64], xmm1
  00082	49 8b 40 50	 mov	 rax, QWORD PTR [r8+80]
  00086	48 89 42 50	 mov	 QWORD PTR [rdx+80], rax
$LN8@construct:

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 858  : 		}

  0008a	c3		 ret	 0
??$construct@URow@@AEAU1@@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SAXAEAV?$allocator@URow@@@1@PEAURow@@AEAU3@@Z ENDP ; std::allocator_traits<std::allocator<Row> >::construct<Row,Row & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEBURow@@@std@@YAAEBURow@@AEBU1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBURow@@@std@@YAAEBURow@@AEBU1@@Z PROC	; std::forward<Row const & __ptr64>, COMDAT

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00000	48 8b c1	 mov	 rax, rcx

; 1277 : 	}

  00003	c3		 ret	 0
??$forward@AEBURow@@@std@@YAAEBURow@@AEBU1@@Z ENDP	; std::forward<Row const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@URow@@AEBU1@@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SAXAEAV?$allocator@URow@@@1@PEAURow@@AEBU3@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@URow@@AEBU1@@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SAXAEAV?$allocator@URow@@@1@PEAURow@@AEBU3@@Z PROC ; std::allocator_traits<std::allocator<Row> >::construct<Row,Row const & __ptr64>, COMDAT

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00000	48 85 d2	 test	 rdx, rdx
  00003	0f 84 81 00 00
	00		 je	 $LN8@construct
  00009	41 0f 10 00	 movups	 xmm0, XMMWORD PTR [r8]
  0000d	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00010	41 0f 10 48 10	 movups	 xmm1, XMMWORD PTR [r8+16]
  00015	0f 11 4a 10	 movups	 XMMWORD PTR [rdx+16], xmm1
  00019	41 0f 10 40 20	 movups	 xmm0, XMMWORD PTR [r8+32]
  0001e	0f 11 42 20	 movups	 XMMWORD PTR [rdx+32], xmm0
  00022	41 0f 10 48 30	 movups	 xmm1, XMMWORD PTR [r8+48]
  00027	0f 11 4a 30	 movups	 XMMWORD PTR [rdx+48], xmm1
  0002b	41 0f 10 40 40	 movups	 xmm0, XMMWORD PTR [r8+64]
  00030	0f 11 42 40	 movups	 XMMWORD PTR [rdx+64], xmm0
  00034	41 0f 10 48 50	 movups	 xmm1, XMMWORD PTR [r8+80]
  00039	0f 11 4a 50	 movups	 XMMWORD PTR [rdx+80], xmm1
  0003d	41 0f 10 40 60	 movups	 xmm0, XMMWORD PTR [r8+96]
  00042	0f 11 42 60	 movups	 XMMWORD PTR [rdx+96], xmm0
  00046	48 83 ea 80	 sub	 rdx, -128		; ffffffffffffff80H
  0004a	41 0f 10 40 70	 movups	 xmm0, XMMWORD PTR [r8+112]
  0004f	49 83 e8 80	 sub	 r8, -128		; ffffffffffffff80H
  00053	0f 11 42 f0	 movups	 XMMWORD PTR [rdx-16], xmm0
  00057	41 0f 10 08	 movups	 xmm1, XMMWORD PTR [r8]
  0005b	0f 11 0a	 movups	 XMMWORD PTR [rdx], xmm1
  0005e	41 0f 10 40 10	 movups	 xmm0, XMMWORD PTR [r8+16]
  00063	0f 11 42 10	 movups	 XMMWORD PTR [rdx+16], xmm0
  00067	41 0f 10 48 20	 movups	 xmm1, XMMWORD PTR [r8+32]
  0006c	0f 11 4a 20	 movups	 XMMWORD PTR [rdx+32], xmm1
  00070	41 0f 10 40 30	 movups	 xmm0, XMMWORD PTR [r8+48]
  00075	0f 11 42 30	 movups	 XMMWORD PTR [rdx+48], xmm0
  00079	41 0f 10 48 40	 movups	 xmm1, XMMWORD PTR [r8+64]
  0007e	0f 11 4a 40	 movups	 XMMWORD PTR [rdx+64], xmm1
  00082	49 8b 40 50	 mov	 rax, QWORD PTR [r8+80]
  00086	48 89 42 50	 mov	 QWORD PTR [rdx+80], rax
$LN8@construct:

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 858  : 		}

  0008a	c3		 ret	 0
??$construct@URow@@AEBU1@@?$allocator_traits@V?$allocator@URow@@@std@@@std@@SAXAEAV?$allocator@URow@@@1@PEAURow@@AEBU3@@Z ENDP ; std::allocator_traits<std::allocator<Row> >::construct<Row,Row const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$dead$ = 16
??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char * __ptr64>, COMDAT

; 864  : 		_Al.destroy(_Ptr);
; 865  : 		}

  00000	c2 00 00	 ret	 0
??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z PROC		; std::forward<char * __ptr64 & __ptr64>, COMDAT

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00000	48 8b c1	 mov	 rax, rcx

; 1277 : 	}

  00003	c3		 ret	 0
??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z ENDP		; std::forward<char * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>, COMDAT

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 06		 je	 SHORT $LN8@construct
  00005	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00008	48 89 02	 mov	 QWORD PTR [rdx], rax
$LN8@construct:

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 858  : 		}

  0000b	c3		 ret	 0
??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Al$dead$ = 64
__formal$dead$ = 72
??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * __ptr64>, COMDAT

; 1099 : 	{	// destroy [_First, _Last), no special optimization

$LN155:

; 1100 : 	for (; _First != _Last; ++_First)

  00000	48 3b ca	 cmp	 rcx, rdx
  00003	0f 84 8f 00 00
	00		 je	 $LN153@Destroy_ra
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx

; 1099 : 	{	// destroy [_First, _Last), no special optimization

  00013	48 8b fa	 mov	 rdi, rdx
  00016	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 1100 : 	for (; _First != _Last; ++_First)

  0001b	48 8d 59 18	 lea	 rbx, QWORD PTR [rcx+24]
  0001f	33 f6		 xor	 esi, esi
$LL4@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00021	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00024	48 83 f8 10	 cmp	 rax, 16
  00028	72 34		 jb	 SHORT $LN104@Destroy_ra
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  0002a	48 8b 4b e8	 mov	 rcx, QWORD PTR [rbx-24]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  0002e	48 ff c0	 inc	 rax
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  00031	48 3d 00 10 00
	00		 cmp	 rax, 4096		; 00001000H
  00037	72 20		 jb	 SHORT $LN99@Destroy_ra

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00039	f6 c1 1f	 test	 cl, 31
  0003c	75 6d		 jne	 SHORT $LN142@Destroy_ra

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  0003e	48 8b 41 f8	 mov	 rax, QWORD PTR [rcx-8]

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00042	48 3b c1	 cmp	 rax, rcx
  00045	73 5e		 jae	 SHORT $LN143@Destroy_ra

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00047	48 2b c8	 sub	 rcx, rax
  0004a	48 83 f9 08	 cmp	 rcx, 8
  0004e	72 4f		 jb	 SHORT $LN144@Destroy_ra

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00050	48 83 f9 27	 cmp	 rcx, 39			; 00000027H
  00054	77 43		 ja	 SHORT $LN154@Destroy_ra

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00056	48 8b c8	 mov	 rcx, rax
$LN99@Destroy_ra:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  00059	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN104@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  0005e	48 c7 03 0f 00
	00 00		 mov	 QWORD PTR [rbx], 15

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00065	48 83 3b 10	 cmp	 QWORD PTR [rbx], 16

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  00069	48 89 73 f8	 mov	 QWORD PTR [rbx-8], rsi

; 514  : 		return (this->_BUF_SIZE <= _Myres

  0006d	72 06		 jb	 SHORT $LN127@Destroy_ra
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef

; 740  : 	return (_Ptr);

  0006f	48 8b 43 e8	 mov	 rax, QWORD PTR [rbx-24]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00073	eb 04		 jmp	 SHORT $LN128@Destroy_ra
$LN127@Destroy_ra:
  00075	48 8d 43 e8	 lea	 rax, QWORD PTR [rbx-24]
$LN128@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1100 : 	for (; _First != _Last; ++_First)

  00079	48 83 c3 20	 add	 rbx, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd

; 565  : 		_Left = _Right;

  0007d	40 88 30	 mov	 BYTE PTR [rax], sil
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0

; 1100 : 	for (; _First != _Last; ++_First)

  00080	48 8d 43 e8	 lea	 rax, QWORD PTR [rbx-24]
  00084	48 3b c7	 cmp	 rax, rdi
  00087	75 98		 jne	 SHORT $LL4@Destroy_ra
  00089	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]

; 1101 : 		_Al.destroy(_Unfancy(_First));
; 1102 : 	}

  00093	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00097	5f		 pop	 rdi
$LN153@Destroy_ra:
  00098	c3		 ret	 0
$LN154@Destroy_ra:

; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  00099	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0009e	cc		 int	 3
$LN144@Destroy_ra:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  0009f	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  000a4	cc		 int	 3
$LN143@Destroy_ra:

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  000a5	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  000aa	cc		 int	 3
$LN142@Destroy_ra:

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  000ab	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  000b0	cc		 int	 3
$LN152@Destroy_ra:
??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@std@@YAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AEAU?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
_Al$dead$ = 72
??$_Uninitialized_move@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z PROC ; std::_Uninitialized_move<Row * __ptr64,Row * __ptr64,std::allocator<Row> >, COMDAT

; 313  : 	{	// move [_First, _Last) to raw _Dest, using _Al

$LN20:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	49 8b f8	 mov	 rdi, r8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

  00010	48 2b d9	 sub	 rbx, rcx

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00013	48 8b d1	 mov	 rdx, rcx
  00016	4c 8b c3	 mov	 r8, rbx
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	e8 00 00 00 00	 call	 memmove

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00021	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 319  : 	}

  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??$_Uninitialized_move@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<Row * __ptr64,Row * __ptr64,std::allocator<Row> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@URow@@@std@@PEAURow@@@std@@YAXPEAURow@@0AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
__formal$dead$ = 32
??$_Destroy_range1@V?$allocator@URow@@@std@@PEAURow@@@std@@YAXPEAURow@@0AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<Row>,Row * __ptr64>, COMDAT

; 1108 : 		// nothing to do
; 1109 : 	}

  00000	c2 00 00	 ret	 0
??$_Destroy_range1@V?$allocator@URow@@@std@@PEAURow@@@std@@YAXPEAURow@@0AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<Row>,Row * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@URow@@AEAU1@@?$allocator@URow@@@std@@QEAAXPEAURow@@AEAU2@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@URow@@AEAU1@@?$allocator@URow@@@std@@QEAAXPEAURow@@AEAU2@@Z PROC ; std::allocator<Row>::construct<Row,Row & __ptr64>, COMDAT

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00000	48 85 d2	 test	 rdx, rdx
  00003	0f 84 81 00 00
	00		 je	 $LN3@construct
  00009	41 0f 10 00	 movups	 xmm0, XMMWORD PTR [r8]
  0000d	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00010	41 0f 10 48 10	 movups	 xmm1, XMMWORD PTR [r8+16]
  00015	0f 11 4a 10	 movups	 XMMWORD PTR [rdx+16], xmm1
  00019	41 0f 10 40 20	 movups	 xmm0, XMMWORD PTR [r8+32]
  0001e	0f 11 42 20	 movups	 XMMWORD PTR [rdx+32], xmm0
  00022	41 0f 10 48 30	 movups	 xmm1, XMMWORD PTR [r8+48]
  00027	0f 11 4a 30	 movups	 XMMWORD PTR [rdx+48], xmm1
  0002b	41 0f 10 40 40	 movups	 xmm0, XMMWORD PTR [r8+64]
  00030	0f 11 42 40	 movups	 XMMWORD PTR [rdx+64], xmm0
  00034	41 0f 10 48 50	 movups	 xmm1, XMMWORD PTR [r8+80]
  00039	0f 11 4a 50	 movups	 XMMWORD PTR [rdx+80], xmm1
  0003d	41 0f 10 40 60	 movups	 xmm0, XMMWORD PTR [r8+96]
  00042	0f 11 42 60	 movups	 XMMWORD PTR [rdx+96], xmm0
  00046	48 83 ea 80	 sub	 rdx, -128		; ffffffffffffff80H
  0004a	41 0f 10 40 70	 movups	 xmm0, XMMWORD PTR [r8+112]
  0004f	49 83 e8 80	 sub	 r8, -128		; ffffffffffffff80H
  00053	0f 11 42 f0	 movups	 XMMWORD PTR [rdx-16], xmm0
  00057	41 0f 10 08	 movups	 xmm1, XMMWORD PTR [r8]
  0005b	0f 11 0a	 movups	 XMMWORD PTR [rdx], xmm1
  0005e	41 0f 10 40 10	 movups	 xmm0, XMMWORD PTR [r8+16]
  00063	0f 11 42 10	 movups	 XMMWORD PTR [rdx+16], xmm0
  00067	41 0f 10 48 20	 movups	 xmm1, XMMWORD PTR [r8+32]
  0006c	0f 11 4a 20	 movups	 XMMWORD PTR [rdx+32], xmm1
  00070	41 0f 10 40 30	 movups	 xmm0, XMMWORD PTR [r8+48]
  00075	0f 11 42 30	 movups	 XMMWORD PTR [rdx+48], xmm0
  00079	41 0f 10 48 40	 movups	 xmm1, XMMWORD PTR [r8+64]
  0007e	0f 11 4a 40	 movups	 XMMWORD PTR [rdx+64], xmm1
  00082	49 8b 40 50	 mov	 rax, QWORD PTR [r8+80]
  00086	48 89 42 50	 mov	 QWORD PTR [rdx+80], rax
$LN3@construct:

; 738  : 		}

  0008a	c3		 ret	 0
??$construct@URow@@AEAU1@@?$allocator@URow@@@std@@QEAAXPEAURow@@AEAU2@@Z ENDP ; std::allocator<Row>::construct<Row,Row & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@URow@@AEBU1@@?$allocator@URow@@@std@@QEAAXPEAURow@@AEBU2@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@URow@@AEBU1@@?$allocator@URow@@@std@@QEAAXPEAURow@@AEBU2@@Z PROC ; std::allocator<Row>::construct<Row,Row const & __ptr64>, COMDAT

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00000	48 85 d2	 test	 rdx, rdx
  00003	0f 84 81 00 00
	00		 je	 $LN3@construct
  00009	41 0f 10 00	 movups	 xmm0, XMMWORD PTR [r8]
  0000d	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00010	41 0f 10 48 10	 movups	 xmm1, XMMWORD PTR [r8+16]
  00015	0f 11 4a 10	 movups	 XMMWORD PTR [rdx+16], xmm1
  00019	41 0f 10 40 20	 movups	 xmm0, XMMWORD PTR [r8+32]
  0001e	0f 11 42 20	 movups	 XMMWORD PTR [rdx+32], xmm0
  00022	41 0f 10 48 30	 movups	 xmm1, XMMWORD PTR [r8+48]
  00027	0f 11 4a 30	 movups	 XMMWORD PTR [rdx+48], xmm1
  0002b	41 0f 10 40 40	 movups	 xmm0, XMMWORD PTR [r8+64]
  00030	0f 11 42 40	 movups	 XMMWORD PTR [rdx+64], xmm0
  00034	41 0f 10 48 50	 movups	 xmm1, XMMWORD PTR [r8+80]
  00039	0f 11 4a 50	 movups	 XMMWORD PTR [rdx+80], xmm1
  0003d	41 0f 10 40 60	 movups	 xmm0, XMMWORD PTR [r8+96]
  00042	0f 11 42 60	 movups	 XMMWORD PTR [rdx+96], xmm0
  00046	48 83 ea 80	 sub	 rdx, -128		; ffffffffffffff80H
  0004a	41 0f 10 40 70	 movups	 xmm0, XMMWORD PTR [r8+112]
  0004f	49 83 e8 80	 sub	 r8, -128		; ffffffffffffff80H
  00053	0f 11 42 f0	 movups	 XMMWORD PTR [rdx-16], xmm0
  00057	41 0f 10 08	 movups	 xmm1, XMMWORD PTR [r8]
  0005b	0f 11 0a	 movups	 XMMWORD PTR [rdx], xmm1
  0005e	41 0f 10 40 10	 movups	 xmm0, XMMWORD PTR [r8+16]
  00063	0f 11 42 10	 movups	 XMMWORD PTR [rdx+16], xmm0
  00067	41 0f 10 48 20	 movups	 xmm1, XMMWORD PTR [r8+32]
  0006c	0f 11 4a 20	 movups	 XMMWORD PTR [rdx+32], xmm1
  00070	41 0f 10 40 30	 movups	 xmm0, XMMWORD PTR [r8+48]
  00075	0f 11 42 30	 movups	 XMMWORD PTR [rdx+48], xmm0
  00079	41 0f 10 48 40	 movups	 xmm1, XMMWORD PTR [r8+64]
  0007e	0f 11 4a 40	 movups	 XMMWORD PTR [rdx+64], xmm1
  00082	49 8b 40 50	 mov	 rax, QWORD PTR [r8+80]
  00086	48 89 42 50	 mov	 QWORD PTR [rdx+80], rax
$LN3@construct:

; 738  : 		}

  0008a	c3		 ret	 0
??$construct@URow@@AEBU1@@?$allocator@URow@@@std@@QEAAXPEAURow@@AEBU2@@Z ENDP ; std::allocator<Row>::construct<Row,Row const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEAD@?$allocator@D@std@@QEAAXPEAPEAD@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$dead$ = 16
??$destroy@PEAD@?$allocator@D@std@@QEAAXPEAPEAD@Z PROC	; std::allocator<char>::destroy<char * __ptr64>, COMDAT

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  00000	c2 00 00	 ret	 0
??$destroy@PEAD@?$allocator@D@std@@QEAAXPEAPEAD@Z ENDP	; std::allocator<char>::destroy<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
<_Args_0>$ = 24
??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z PROC ; std::allocator<char>::construct<char * __ptr64,char * __ptr64 & __ptr64>, COMDAT

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 06		 je	 SHORT $LN3@construct
  00005	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00008	48 89 02	 mov	 QWORD PTR [rdx], rax
$LN3@construct:

; 738  : 		}

  0000b	c3		 ret	 0
??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z ENDP ; std::allocator<char>::construct<char * __ptr64,char * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PEAV10@@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PEAV10@@Z PROC ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 740  : 	return (_Ptr);

  00000	48 8b c1	 mov	 rax, rcx

; 741  : 	}

  00003	c3		 ret	 0
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PEAV10@@Z ENDP ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 1002 : 		{	// destroy object at _Ptr

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PEAURow@@@std@@YAPEAURow@@PEAU1@@Z
_TEXT	SEGMENT
_Src$ = 8
??$_Unchecked@PEAURow@@@std@@YAPEAURow@@PEAU1@@Z PROC	; std::_Unchecked<Row * __ptr64>, COMDAT

; 428  : 	return (_Src);

  00000	48 8b c1	 mov	 rax, rcx

; 429  : 	}

  00003	c3		 ret	 0
??$_Unchecked@PEAURow@@@std@@YAPEAURow@@PEAU1@@Z ENDP	; std::_Unchecked<Row * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
_Al$dead$ = 72
??$_Uninitialized_move_al_unchecked@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<Row * __ptr64,Row * __ptr64,std::allocator<Row> >, COMDAT

; 301  : 	{	// move [_First, _Last) to raw _Dest, using _Al, choose optimization

$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	49 8b f8	 mov	 rdi, r8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

  00010	48 2b d9	 sub	 rbx, rcx

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00013	48 8b d1	 mov	 rdx, rcx
  00016	4c 8b c3	 mov	 r8, rbx
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	e8 00 00 00 00	 call	 memmove

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00021	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 306  : 	}

  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@PEAURow@@PEAU1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<Row * __ptr64,Row * __ptr64,std::allocator<Row> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PEAURow@@PEAU1@@std@@YAAEAPEAURow@@AEAPEAU1@PEAU1@@Z
_TEXT	SEGMENT
_Dest$ = 8
_Src$ = 16
??$_Rechecked@PEAURow@@PEAU1@@std@@YAAEAPEAURow@@AEAPEAU1@PEAU1@@Z PROC ; std::_Rechecked<Row * __ptr64,Row * __ptr64>, COMDAT

; 458  : 	_Dest = _Src;

  00000	48 89 11	 mov	 QWORD PTR [rcx], rdx

; 459  : 	return (_Dest);

  00003	48 8b c1	 mov	 rax, rcx

; 460  : 	}

  00006	c3		 ret	 0
??$_Rechecked@PEAURow@@PEAU1@@std@@YAAEAPEAURow@@AEAPEAU1@PEAU1@@Z ENDP ; std::_Rechecked<Row * __ptr64,Row * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 863  : 		{	// destroy object at _Ptr

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAEAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@PEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_move_cat@URow@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAURow@@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
??$_Ptr_move_cat@URow@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAURow@@0@Z PROC ; std::_Ptr_move_cat<Row,Row>, COMDAT

; 810  : 	return {};

  00000	48 8b c1	 mov	 rax, rcx

; 811  : 	}

  00003	c3		 ret	 0
??$_Ptr_move_cat@URow@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAURow@@0@Z ENDP ; std::_Ptr_move_cat<Row,Row>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked1@URow@@U1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
__formal$dead$ = 88
??$_Uninitialized_move_al_unchecked1@URow@@U1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked1<Row,Row,std::allocator<Row> >, COMDAT

; 292  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	49 8b f8	 mov	 rdi, r8
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

  00010	48 2b d9	 sub	 rbx, rcx

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00013	48 8b d1	 mov	 rdx, rcx
  00016	4c 8b c3	 mov	 r8, rbx
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	e8 00 00 00 00	 call	 memmove

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00021	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory

; 294  : 	}

  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??$_Uninitialized_move_al_unchecked1@URow@@U1@V?$allocator@URow@@@std@@@std@@YAPEAURow@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@URow@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked1<Row,Row,std::allocator<Row> >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 743  : 		{	// destroy object at _Ptr

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QEAAXPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Copy_memmove@PEAURow@@PEAU1@@std@@YAPEAURow@@PEAU1@00@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
??$_Copy_memmove@PEAURow@@PEAU1@@std@@YAPEAURow@@PEAU1@00@Z PROC ; std::_Copy_memmove<Row * __ptr64,Row * __ptr64>, COMDAT

; 2301 : 	{	// implement copy-like function as memmove

$LN4:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b da	 mov	 rbx, rdx
  0000d	49 8b f8	 mov	 rdi, r8

; 2302 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);
; 2303 : 	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
; 2304 : 	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

  00010	48 2b d9	 sub	 rbx, rcx

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00013	48 8b d1	 mov	 rdx, rcx
  00016	4c 8b c3	 mov	 r8, rbx
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	e8 00 00 00 00	 call	 memmove

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00021	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]

; 2308 : 	}

  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??$_Copy_memmove@PEAURow@@PEAU1@@std@@YAPEAURow@@PEAU1@00@Z ENDP ; std::_Copy_memmove<Row * __ptr64,Row * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0000e	48 8b c3	 mov	 rax, rbx
  00011	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00015	5b		 pop	 rbx
  00016	c3		 ret	 0
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
END
